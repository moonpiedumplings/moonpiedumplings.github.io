<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jeffrey Fonseca</title>
<link>https://moonpiedumplings.github.io/allposts.html</link>
<atom:link href="https://moonpiedumplings.github.io/allposts.xml" rel="self" type="application/rss+xml"/>
<description>All posts, intended to be used in an RSS feed. </description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Invalid Date</lastBuildDate>
<item>
  <title>How to Ansible</title>
  <link>https://moonpiedumplings.github.io/talks/ansible/</link>
  <description><![CDATA[ 




<p>Recently, <a href="https://github.com/CSUN-CCDC/CCDC-2023/commits?author=moonpiedumplings">I wrote a lot of ansible roles and playbooks for the CCDC competition</a>.</p>
<p>Here is a link to the roles: <a href="https://github.com/CSUN-CCDC/CCDC-2023/tree/main/linux/ansible/roles" class="uri">https://github.com/CSUN-CCDC/CCDC-2023/tree/main/linux/ansible/roles</a></p>
<p>These ansible “roles,” cover a variety of tasks that the cybersecurity competition would require from us, including things like managing firewalls (ufw, iptables, firewalld), shuffling passwords of linux users or databases, or doing backups.</p>
<p>Professor Doris Chaney asked me to present on how to use ansible, so here is where the presentation, code, and guide will go.</p>
<p>The presentation can be <a href="../../talks/ansible/revealjs.html">found here</a></p>
<p>Currently, the guide and presentation are incomplete, but I do my development of both of them on here on here.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/talks/ansible/</guid>
  <pubDate>Invalid Date</pubDate>
</item>
<item>
  <title>Engineer’s Audit Advice - Managing Critical Systems</title>
  <dc:creator>Jeffrey Fonseca</dc:creator>
  <link>https://moonpiedumplings.github.io/blog/nice-challenge/</link>
  <description><![CDATA[ 




<p>This is for the <a href="https://nice-challenge.com/">NICE</a> challenge. It’s a blue team challenge where you are tasked with hardening machines. Perhaps there is more, but all I was asked to do for this challenge was some simple hardening.</p>
<p><img src="https://moonpiedumplings.github.io/blog/nice-challenge/images/chatroom.png" class="img-fluid"></p>
<section id="joomia" class="level1">
<h1>Joomia</h1>
<p>Joomia is the Debian 9.3 machine, with an apache2 web server.</p>
<p>I began by looking at <code>/home/playerone/audit.log</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">[ Lynis 2.4.0 ]</span>
<span id="cb1-2"></span>
<span id="cb1-3">################################################################################</span>
<span id="cb1-4">  Lynis comes with ABSOLUTELY NO WARRANTY. This is free software, and you are</span>
<span id="cb1-5">  welcome to redistribute it under the terms of the GNU General Public License.</span>
<span id="cb1-6">  See the LICENSE file for details about using this software.</span>
<span id="cb1-7"></span>
<span id="cb1-8">  2007-2016, CISOfy - https://cisofy.com/lynis/</span>
<span id="cb1-9">  Enterprise support available (compliance, plugins, interface and tools)</span>
<span id="cb1-10">################################################################################</span>
<span id="cb1-11"></span>
<span id="cb1-12"></span>
<span id="cb1-13">[+] Initializing program</span>
<span id="cb1-14">------------------------------------</span>
<span id="cb1-15">- Detecting OS... [ DONE ]</span>
<span id="cb1-16">- Checking profiles... [ DONE ]</span>
<span id="cb1-17"></span>
<span id="cb1-18">  ---------------------------------------------------</span>
<span id="cb1-19">  Program version:           2.4.0</span>
<span id="cb1-20">  Operating system:          Linux</span>
<span id="cb1-21">  Operating system name:     Debian</span>
<span id="cb1-22">  Operating system version:  9.3</span>
<span id="cb1-23">  Kernel version:            4.9.0</span>
<span id="cb1-24">  Hardware platform:         x86_64</span>
<span id="cb1-25">  Hostname:                  Prod-Joomla</span>
<span id="cb1-26">  ---------------------------------------------------</span>
<span id="cb1-27">  Profiles:                  /etc/lynis/default.prf</span>
<span id="cb1-28">  Log file:                  /var/log/lynis.log</span>
<span id="cb1-29">  Report file:               /var/log/lynis-report.dat</span>
<span id="cb1-30">  Report version:            1.0</span>
<span id="cb1-31">  Plugin directory:          /etc/lynis/plugins</span>
<span id="cb1-32">  ---------------------------------------------------</span>
<span id="cb1-33">  Auditor:                   [Not Specified]</span>
<span id="cb1-34">  Test category:             all</span>
<span id="cb1-35">  Test group:                all</span>
<span id="cb1-36">  ---------------------------------------------------</span>
<span id="cb1-37"></span>
<span id="cb1-38">  Suggestions (45):</span>
<span id="cb1-39">  ----------------------------</span>
<span id="cb1-40">  * Install a PAM module for password strength testing like pam_cracklib [AUTH-9262] </span>
<span id="cb1-41">      https://cisofy.com/controls/AUTH-9262/</span>
<span id="cb1-42"></span>
<span id="cb1-43">  * Configure minimum password age in /etc/login.defs [AUTH-9286] </span>
<span id="cb1-44">      https://cisofy.com/controls/AUTH-9286/</span>
<span id="cb1-45"></span>
<span id="cb1-46">  * Configure maximum password age in /etc/login.defs [AUTH-9286] </span>
<span id="cb1-47">      https://cisofy.com/controls/AUTH-9286/</span>
<span id="cb1-48"></span>
<span id="cb1-49">  * Install Apache mod_evasive to guard webserver against DoS/brute force attempts [HTTP-6640] </span>
<span id="cb1-50">      https://cisofy.com/controls/HTTP-6640/</span>
<span id="cb1-51"></span>
<span id="cb1-52">  * Install Apache mod_qos to guard webserver against Slowloris attacks [HTTP-6641] </span>
<span id="cb1-53">      https://cisofy.com/controls/HTTP-6641/</span>
<span id="cb1-54"></span>
<span id="cb1-55">  * Install Apache modsecurity to guard webserver against web application attacks [HTTP-6643] </span>
<span id="cb1-56">      https://cisofy.com/controls/HTTP-6643/</span>
<span id="cb1-57"></span>
<span id="cb1-58">  * Install fail2ban to automatically ban hosts that commit multiple authentication errors. [DEB-0880]</span>
<span id="cb1-59">      https://cisofy.com/controls/DEB-0880/</span>
<span id="cb1-60"></span>
<span id="cb1-61">Note from asteele: In addition to the password aging and cracklib, we should also set a password policy to require passwords be of a minimum strength. I feel the default password policy for pam_cracklib is too weak, therefore you should implement a policy that is stronger than the default given. I would suggest a minimum password length of at least 10. I would also like you to not address the maximum password age as experts suggest that setting a maximum password age encourages the creation of weaker passwords, however setting the minimum password age to at least 3 days is advised.</span></code></pre></div>
<p>So these are some security things I should do. Coincidentally, the numbers also aligned with the checks we were given:</p>
<p><img src="https://moonpiedumplings.github.io/blog/nice-challenge/images/checksintro.png" class="img-fluid"></p>
<p>I followed an online <a href="https://phoenixnap.com/kb/apache-mod-evasive">guide</a> (<a href="https://web.archive.org/web/20231130023256/https://phoenixnap.com/kb/apache-mod-evasive">internet archive</a>) to enable apache mod_evasive, and sure enough, the check was passed:</p>
<p><img src="https://moonpiedumplings.github.io/blog/nice-challenge/images/joomiafirst.png" class="img-fluid"></p>
<p>The process was fairly simple, I installed <code>libapache2-mod-evasive</code>, and then uncommented the relevant options in <code>/etc/apache2/mods-enabled/evasive.conf</code></p>
<p>Installing fail2ban and apache mod_qos were easy:</p>
<p><code>sudo apt install libapache2-mod-qos fail2ban</code></p>
<p>I used a similar process, by uncommenting options in <code>/etc/apache2/mods-enabled</code> to enable mod_qos, and pass the check. Here’s the new config file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">&lt;IfModule qos_module&gt;</span>
<span id="cb2-2">  # minimum request rate (bytes/sec at request reading):</span>
<span id="cb2-3">  QS_SrvRequestRate                                 120</span>
<span id="cb2-4"></span>
<span id="cb2-5">  # limits the connections for this virtual host:</span>
<span id="cb2-6">  QS_SrvMaxConn                                     100</span>
<span id="cb2-7"></span>
<span id="cb2-8">  # allows keep-alive support till the server reaches 600 connections:</span>
<span id="cb2-9">  QS_SrvMaxConnClose                                600</span>
<span id="cb2-10"></span>
<span id="cb2-11">  # allows max 50 connections from a single ip address:</span>
<span id="cb2-12">  QS_SrvMaxConnPerIP                                 50</span>
<span id="cb2-13">&lt;/IfModule&gt;</span></code></pre></div>
<p>The next thing I did was login.defs. They had <code>PASS_MAX_AGE</code> set to 9999, which I left. I did, however, change <code>PASS_MIN_AGE</code> to 3, per the suggesion in <code>audit.log</code>.</p>
<p>To configure pam and the minimum of the password, I edited `/etc/pam.d/common-password:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>"/etc/pam.d/common-password</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="&quot;/etc/pam.d/common-password" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1"></span>
<span id="cb3-2"># here are the per-package modules (the "Primary" block)</span>
<span id="cb3-3">password    requisite           pam_cracklib.so retry=3 minlen=10 difok=3</span>
<span id="cb3-4">password    [success=1 default=ignore]  pam_unix.so obscure use_authtok try_first_pass sha512</span>
<span id="cb3-5"># here's the fallback if no module succeeds</span>
<span id="cb3-6">password    requisite           pam_deny.so</span>
<span id="cb3-7"># prime the stack with a positive return value if there isn't one already;</span>
<span id="cb3-8"># this avoids us returning an error just because nothing sets a success code</span>
<span id="cb3-9"># since the modules above will each just jump around</span>
<span id="cb3-10">password    required            pam_permit.so</span>
<span id="cb3-11"># and here are more per-package modules (the "Additional" block)</span>
<span id="cb3-12"># end of pam-auth-update config</span></code></pre></div>
</div>
<p>And with this, Joomia is done. Except not really, as one of the checks won’t pass, it’s reported as a “known issue”</p>
</section>
<section id="fileshare" class="level1">
<h1>Fileshare</h1>
<p>The Fileshare is the Ubuntu 16 machine.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/home/playerone/audit.log</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="/home/playerone/audit.log" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1"></span>
<span id="cb4-2">  Suggestions:</span>
<span id="cb4-3">  ----------------------------</span>
<span id="cb4-4">  - Install a PAM module for password strength testing like pam_cracklib [AUTH-9262]</span>
<span id="cb4-5">      https://cisofy.com/controls/AUTH-9262/</span>
<span id="cb4-6">  </span>
<span id="cb4-7">  * Configure minimum password age in /etc/login.defs [AUTH-9286] </span>
<span id="cb4-8">      https://cisofy.com/controls/AUTH-9286/</span>
<span id="cb4-9"></span>
<span id="cb4-10">  * Configure maximum password age in /etc/login.defs [AUTH-9286] </span>
<span id="cb4-11">      https://cisofy.com/controls/AUTH-9286/</span>
<span id="cb4-12"></span>
<span id="cb4-13">  - Enable process accounting [ACCT-9622]</span>
<span id="cb4-14">      https://cisofy.com/controls/ACCT-9622/</span>
<span id="cb4-15"></span>
<span id="cb4-16">  - Install fail2ban to automatically ban hosts that commit multiple authentication errors. [DEB-0880]</span>
<span id="cb4-17">      https://cisofy.com/controls/DEB-0880/</span>
<span id="cb4-18"></span>
<span id="cb4-19">Note from asteele: In addition to the password aging and cracklib, we should also set a password policy to require passwords be of a minimum strength. I feel the default password policy for pam_cracklib is too weak, therefore you should implement a policy that is stronger than the default given. I would suggest a minimum password length of at least 10. I would also like you to not address the maximum password age as experts suggest that setting a maximum password age encourages the creation of weaker passwords, however setting the minimum password age to at least 3 days is advised.</span></code></pre></div>
</div>
<p>This time, I clipped the lynis output for brevity.</p>
<p>I started with installing fail2ban again, since that was simple.</p>
<p>Process accounting was simple as well. I installed <code>acct</code>, and then ran <code>sudo acctn on</code>.</p>
<p>I copied the same process as the first machine for configuring <code>/etc/login.defs</code>, changing <code>PASS_MIN_AGE</code> to 3.</p>
<p>For cracklib, I also copied the same process as the above.</p>
<p>And finally, all checks are passed:</p>
<p><img src="https://moonpiedumplings.github.io/blog/nice-challenge/images/allchecks.png" class="img-fluid"></p>
<p>The one check that won’t pass, is actually broken, and won’t pass. They documented this in “Known Issues”</p>
<p><img src="https://moonpiedumplings.github.io/blog/nice-challenge/images/knownissues.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/nice-challenge/</guid>
  <pubDate>Tue, 30 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automatically provisioning VMs from OVAs</title>
  <link>https://moonpiedumplings.github.io/projects/ova-automation/</link>
  <description><![CDATA[ 




<section id="goals-and-context" class="level1">
<h1>Goals and Context</h1>
<p>I am currently participating on the cybersercurity team of Cal State Northridge, for a competition called CCDC.</p>
<p>For more information:</p>
<p>Nationals: <a href="https://www.nationalccdc.org/" class="uri">https://www.nationalccdc.org/</a></p>
<p>And our region, the Western Region: <a href="https://wrccdc.org/" class="uri">https://wrccdc.org/</a></p>
<p>Essentially, we are asked given a bunch of really insecure virtual machines, and asked to secure and administrate them, while being attacked by red team.</p>
<p>Although Nationals does not post the old images they have used in the past, our region, does.</p>
<p>WRCCDC Archive: <a href="https://archive.wrccdc.org/" class="uri">https://archive.wrccdc.org/</a></p>
<p>Currently, our team is doing mock competitions by downloading these images, manually importing them into esxi, or proxmox, and then adjusting networking in each virtual machine, by hand.</p>
<p>This is unacceptable.</p>
<p>An easier way, is rather than manually changing networking configuration in each virtual machine, the virtual machine managers (proxmox and esxi, currently) could be configured to have the same network as the competition, removing the hassle of changing this.</p>
<p>In addition to that, manually importing virtual machines is also unacceptable.</p>
<p>With the existence of modern automation tools, like terraform, there must be a better way to do this.</p>
<p>Currently, I’m using vagrant to automate the upping of individual images, for testing. However, vagrant isn’t really ideal for this, because I would have to convert OVA files to “vagrant boxes” first, which don’t support every vagrant provider.</p>
<p>It would probably be better to import the images, and then use terraform to up it automatically. The advantage of this, to me, is that it is more provider agnostic. By seperating the pieces that handle the image management, and the pieces that handle control of the hypervisor platform, it’s easier to port things to new platforms.</p>
</section>
<section id="work" class="level1">
<h1>Work</h1>
<section id="proxmox" class="level2">
<h2 class="anchored" data-anchor-id="proxmox">Proxmox</h2>
<p>I’ve created a folder with a shell.nix and a Vagrantfile, in order to automate the creation of a proxmox virtual machine. It’s located inside this git repo, and by extension, <a href="./proxmox/">this static site</a>.</p>
<p>Docs to import OVA files on proxmox: <a href="https://pve.proxmox.com/wiki/Migration_of_servers_to_Proxmox_VE#Importing" class="uri">https://pve.proxmox.com/wiki/Migration_of_servers_to_Proxmox_VE#Importing</a></p>
<p>After some testing with that, <code>importovf</code> isn’t too good, because it imports the virtual machine metadata, without any of the actual data. So things we don’t really need to store, like how many vcpu’s or memory, or the network, but none of the actual disk data.</p>
<p>You have to run <code>qm importdisk</code> (an alias for <code>qm disk import</code>)</p>
<p>So after extracting the ova, you have to extract the vmdk (it’s gzipped), and then it would be something like:</p>
<p><code>qm importdisk numberhere image.vmdk --format qcow2|vmware</code></p>
<p>The manpage for qm says that –format specifies the target format, so I’m assuming it’s the format to convert to.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/projects/ova-automation/</guid>
  <pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building my server part 3 — The switch to debian</title>
  <link>https://moonpiedumplings.github.io/projects/build-server-3/</link>
  <description><![CDATA[ 




<section id="why-the-switch" class="level1">
<h1>Why the switch?</h1>
<p>Recently, I have been very busy working on scripts and ansible playbooks for the <a href="https://www.nationalccdc.org/">Collegiate Cyber Defense Competition</a>.</p>
<p>In order to test those playbooks, I have been using Vagrantfiles, as an excerp, something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode ruby code-with-copy"><code class="sourceCode ruby"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -*- mode: ruby -*-</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vi: set ft=ruby :</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vagrant</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.configure</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>config<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">    config<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.synced_folder</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/vagrant"</span>, <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">disabled: </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-7">    config<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.provision</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shell"</span>, <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">path: </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scripts/packages.sh"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    config<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.define</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"318"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>vmconfig<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-10">        vmconfig<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.provision</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ansible"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>ansible<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-11">            ansible<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.playbook</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ansible/inventory.yml"</span></span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb1-13">        vmconfig<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.box</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generic/alpine318"</span></span>
<span id="cb1-14">        vmconfig<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.provider</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"libvirt"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>libvirt<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-15">            libvirt<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.driver</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kvm"</span></span>
<span id="cb1-16">            libvirt<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.memory</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb1-17">            libvirt<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cpus</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-18">            libvirt<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.video_type</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"virtio"</span></span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb1-20">        vmconfig<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vm.provider</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"virtualbox"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>virtualbox,override<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-21">            virtualbox<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.memory</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb1-22">            virtualbox<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cpus</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb1-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
<p>This is from the <a href="https://github.com/CSUN-CCDC/CCDC-2023/blob/8c8e5f5b59543ca246e7ec718ef13d60a3f94efc/linux/testing/alpine/Vagrantfile">ccdc-2023</a> github repo. With a single command, <code>vagrant up</code>, I can create virtual machines, and then provision them with ansible playbooks.</p>
<p>Even more impressive, I can use the generated ansible inventory manually, <a href="https://docs.ansible.com/ansible/latest/scenario_guides/guide_vagrant.html#running-ansible-manually">as noted in the ansible documentation</a>. This creates an environment closer to how I would actually use the vagrant ansible playbooks.</p>
<p>Vagrants snapshots let me easily freeze and revert machines to previous features.</p>
<p>I used vagrant, in combination with windows vagrant machines to easily test things for the <a href="../../guides/ccdc-env/">ccdc environment guide</a>.</p>
<p>However, when attempting to up vagrant on my Rocky Linux machine, I got an error: Spice is not supported.</p>
<p>Apparently, Red Hat Enterprise Linux deprecated spice, and now any rebuilds of it, no longer have spice as well.</p>
<p><a href="https://forums.rockylinux.org/t/spice-support-was-dropped-in-rhel-9/6753" class="uri">https://forums.rockylinux.org/t/spice-support-was-dropped-in-rhel-9/6753</a></p>
<p><a href="https://access.redhat.com/articles/442543" class="uri">https://access.redhat.com/articles/442543</a> (requires subscription, but the important content is in the beginning).</p>
<p>Except, my Arch Linux machines can still run spice virtual machines just fine… so when I want to run a Vagrant box(s) on my server, like the Windows boxes which require much more memory, I can either write around this missing feature, using the much less performant VNC… or I can switch.</p>
<p>The main reason why I picked Rocky, was the 4 year support of an operating system supported by Kolla-ansible. This is no longer the only case.</p>
<p>As of the current supported Kolla-Ansible, it now supports Debian 12, which will be supported for all 4 years of my bachelors. <a href="https://docs.openstack.org/kolla-ansible/2023.2/user/support-matrix.html">Support Matrix</a>.</p>
<p>With this, I decided to switch to debian… but I encountered some challenges.</p>
</section>
<section id="installing-debian" class="level1">
<h1>Installing Debian</h1>
<p>When I installed Debian in UEFI mode, it wouldn’t boot. But Rocky Linux booted just fine? Why?</p>
<p>I tested a legacy install, and it booted just fine. Did a little more research, asked for help from a friend, and found this:</p>
<p>According to the <a href="https://wiki.debian.org/UEFI#Force_grub-efi_installation_to_the_removable_media_path">debian wiki</a> some UEFI motherboards do not implement the spec properly (even after a BIOS update, it seems). Described in that article, is how to get around this quirk, and why they don’t do that by default.</p>
<blockquote class="blockquote">
<p>All OS installers installing things to this removable media path will conflict with any other such installers, which is <strong>bad</strong> and <strong>wrong</strong>. That’s why in Debian we don’t do this by default.</p>
</blockquote>
<p>But, it was only after selecting the “expert install” in the installer, that I was eventually presented with this menu:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-3/images/forcegrub.jpg" class="img-fluid"></p>
<p>And by forcing a grub install, I finally got it to boot in UEFI mode.</p>
<p>In my opinion, the debian installer should do this as a default if it detects that it is going to be the sole OS. I would rather have a booting install than a standards compliant one.</p>
<p>Although, it was suprising and disheartening to learn that what I considered to be an enterprise server doesn’t implement a standard such as this properly.</p>
</section>
<section id="configuring" class="level1">
<h1>Configuring</h1>
<p>I don’t want to do openstack just yet. After getting experience with keycloak, active directory, and ldap, I’ve decided that this server can be the host to a variety of services, all using ldap or SSO to sign on. I want a remote development environment, not just for me, but also for my team members.</p>
<p>The other thing I want is for the server to be configured as code. Past the initial setup (podman, libvirt, nix), I want everything to be configured via ansible.</p>
<p>Goals:</p>
<p>Overall, system design goals</p>
<ul>
<li>Configuration as code</li>
<li>Rootless containers when possible
<ul>
<li>No docker on bare metal — this interferes with the eventual open stack install</li>
</ul></li>
<li>Security
<ul>
<li>Https should be terminated on my home server, not on my vps</li>
</ul></li>
</ul>
<p>Service/Specific goals for the short(er) term:</p>
<ul>
<li>Podman
<ul>
<li>Nvidia runtime, for kasm hardware acceleration, and AI</li>
</ul></li>
<li>LDAP
<ul>
<li>Do I want openldap or lldap?</li>
</ul></li>
<li>keycloak
<ul>
<li>Connected to ldap, of course</li>
<li>everything should be SSO when possible</li>
</ul></li>
<li>Kasmweb
<ul>
<li>Run this in a privileged podman container rather than docker is my only real option</li>
<li>Create kasm containers for development environment for my teams</li>
<li>Nix in kasm docker containers</li>
<li>Hardware acceleration via Nvidia?</li>
<li>Mounting /dev/kvm inside for libvirt inside? Or remote libvirt</li>
</ul></li>
</ul>
<p>Later, I want:</p>
<ul>
<li>Forgejo — a source forge</li>
<li>Move my blog to this server, from github pages
<ul>
<li>Continue to use some form of CI/CD for it.</li>
</ul></li>
</ul>
<section id="reverse-proxies-and-https" class="level2">
<h2 class="anchored" data-anchor-id="reverse-proxies-and-https">Reverse Proxies and HTTPS</h2>
<p>To ensure maximum security, I need to terminate HTTPS on the home server, which is completely under my control, unlike the VPS I’m renting from Contabo.</p>
<p>Currently, I have a simply setup using <a href="https://nginxproxymanager.com/">nginx proxy manager</a>, where it reverse proxies any sites I want to create by terminating TLS/SSL on the VPS.</p>
<p>I don’t really feel like going back to pure nginx, it was very painful to configure, which is why I switched to the easier frontend, nginx proxy manager (npm).</p>
<p>I attempted to set up a stream, but I was simply redirected to the “Nginx Proxy Manager” page instead.</p>
<p>I bought a domain: &lt;moonpiedumpl.ing&gt;. It looks very clean. I will use subdomains for each service, something like &lt;keycloak.moonpiedumpl.ing&gt; will be the keycloak service, and so on.</p>
<p>I want a declarative reverse proxy, that can reverse proxy existing https servers, without issues. <a href="https://caddyserver.com/docs/">Caddy</a> can <em>probably</em> do this.</p>
<p>I think the crucial thing is that is that Caddy some of the reverse proxy headers by default. It’s documented here: <a href="https://caddyserver.com/docs/caddyfile/directives/reverse_proxy#defaults" class="uri">https://caddyserver.com/docs/caddyfile/directives/reverse_proxy#defaults</a></p>
<p>So the second Caddy proxy, located on the internal server, would have the option “trusted proxies”, set to the ip address that the internal server sees coming from the VPS. This will cause it to not edit the headers, allowing the internal server to see the real ip address of the machines connecting to the services.</p>
<p>Caddy can also configure https automatically: <a href="https://caddyserver.com/docs/caddyfile/options#email" class="uri">https://caddyserver.com/docs/caddyfile/options#email</a></p>
<p>As for TLS passthrough on the external Caddy service, I found some relevant content:</p>
<p><a href="https://caddy.community/t/reverse-proxy-chaining-vps-local-server-service-trusted-proxies/18105" class="uri">https://caddy.community/t/reverse-proxy-chaining-vps-local-server-service-trusted-proxies/18105</a></p>
<p>Alright. This isn’t working. Double reverse proxies are a pain to configure, plus they seem to be lacking support for <a href="https://github.com/caddyserver/caddy/issues/5086">some things</a>.</p>
<p>So… alternatives?</p>
<p>It seems to forward traffic as it, which is good, because I don’t want it to get in the way of caddy.</p>
<p>I also need to test iptables as a reverse proxy. I don’t want to test this, as it requires that I tear down some of my declarative configuration to temporarily test this in an imperative manner.</p>
<p>Alternatively, I am looking at <code>iptables</code>.</p>
<p>There are several relevant stackoverflow answers: <a href="https://superuser.com/a/1291523">this one</a> and <a href="https://unix.stackexchange.com/a/634972">this one</a>.</p>
<p>I did a little bit of experimenting with iptables, but it looks to be more effort than it is worth to configure, for something that might not even work.i</p>
<p>I started looking through this: <a href="https://github.com/anderspitman/awesome-tunneling" class="uri">https://github.com/anderspitman/awesome-tunneling</a></p>
<p>Projects like <a href="https://github.com/fatedier/frp">frp</a> appeal to me and look like they do what I want to.</p>
<p>Out of them, <a href="https://github.com/rapiz1/rathole">rathole</a> appeals to me the most. The benchmarks advertise high performance, and it has an official <a href="https://hub.docker.com/r/rapiz1/rathole">docker container</a>. This would make it easy to deploy.</p>
<p>I don’t like the existing rathole docker images. The official one is older than the code is, and other docker container uses a bash script reading enviornment variables to configure itself.</p>
<p>I’ve decided to compile rathole myself. I want a static binary I can copy over to an empty docker container, and then docker can handle the service managemnt.</p>
<p>I want to compile rathole myself, and I have something almost working:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rust:1-alpine3.19</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> RUSTFLAGS=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-C target-feature=+crt-static"</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> OPENSSL_NO_VENDOR=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apk</span> add git build-base openssl-dev musl-dev</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cargo</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--release</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--target</span> x86_64-unknown-linux-musl</span></code></pre></div>
<p>Except this errors:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">note: /usr/lib/gcc/x86_64-alpine-linux-musl/13.2.1/../../../../x86_64-alpine-linux-musl/bin/ld: cannot find -lssl: No such file or directory</span>
<span id="cb3-2">          /usr/lib/gcc/x86_64-alpine-linux-musl/13.2.1/../../../../x86_64-alpine-linux-musl/bin/ld: cannot find -lcrypto: No such file or directory</span>
<span id="cb3-3">          collect2: error: ld returned 1 exit status</span></code></pre></div>
<p>Since alpine seems to not work consistently for this, I think I will do what <a href="https://stackoverflow.com/a/66967770">this person did</a>, and compile the staticly linked binary on a debian or ubuntu docker container instead.</p>
</section>
<section id="ansibilizing-the-server" class="level2">
<h2 class="anchored" data-anchor-id="ansibilizing-the-server">Ansibilizing the server</h2>
<section id="podman-as-a-user" class="level3">
<h3 class="anchored" data-anchor-id="podman-as-a-user">Podman as a user</h3>
<p>I was actually doing really good, but I encountered a roadblock:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">TASK [Create caddy directory] ************************************************************************************************************</span>
<span id="cb4-2">fatal: [moonstack]: FAILED! =&gt; {"msg": "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chmod: invalid mode: ‘A+user:podmaner:rx:allow’\nTry 'chmod --help' for more information.\n}). For information on working around this, see https://docs.ansible.com/ansible-core/2.16/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user"}</span></code></pre></div>
<p>The relevant ansible code uses <a href="">become</a> to run as the <code>podmaner</code> user, and then runs the <a href="https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_container_module.html#ansible-collections-containers-podman-podman-container-module">ansible podman container</a> module.</p>
<p>It links to some docs here: <a href="https://docs.ansible.com/ansible-core/2.16/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user" class="uri">https://docs.ansible.com/ansible-core/2.16/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user</a></p>
<p>This was fixed after I installed the <code>acl</code> package.</p>
</section>
<section id="ansible-vault" class="level3">
<h3 class="anchored" data-anchor-id="ansible-vault">Ansible vault</h3>
<p>If I am going to use rathole, then I need to deploy a config file with a client and server secrets. Although an extra step of complexity, thankfully, ansible makes handling secrets easy, with ansible vault.</p>
<p>Main docs here: <a href="https://docs.ansible.com/ansible/latest/vault_guide/index.html" class="uri">https://docs.ansible.com/ansible/latest/vault_guide/index.html</a></p>
<p><a href="https://docs.ansible.com/ansible/latest/vault_guide/vault_managing_passwords.html#storing-and-accessing-vault-passwords">Docs on handling vault passwords</a></p>
<p>I only need a few variables encrypted, so maybe:</p>
<p><a href="https://docs.ansible.com/ansible/latest/vault_guide/vault_encrypting_content.html#encrypting-content-with-ansible-vault">Docs on encrypting individual variables</a></p>
<p>Or I could encrypt a file with the variables I want and add them? :</p>
<p><a href="https://docs.ansible.com/ansible/latest/vault_guide/vault_encrypting_content.html#encrypting-files-with-ansible-vault">Docs on encrypting files</a></p>
</section>
</section>
</section>
<section id="presearch-for-future-pieces" class="level1">
<h1>Presearch for future pieces</h1>
<section id="openstack-notes" class="level2">
<h2 class="anchored" data-anchor-id="openstack-notes">Openstack Notes</h2>
<p>I will probably get to this later on.</p>
<p>Rather than trying to do an openstack native implemenation of a public ipv6 addresses for virtual machines on a private ip address, I can simply have my router set up a “private” ipv6 subnet, and then VPN (or an <a href="https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol">L2TP</a>, which does not come with encryption). Then, I can do a 1 to 1 NAT, or something of the sort, but without any address translation. By putting VM’s on this subnet, I can give them public ipv6 addresses. This is simpler, and compatible with more than just openstack.</p>
<p>Something like this is definitely possible.</p>
<p><a href="https://superuser.com/questions/887745/routing-a-particular-subnet-into-a-vpn-tunnel" class="uri">https://superuser.com/questions/887745/routing-a-particular-subnet-into-a-vpn-tunnel</a></p>
<p><a href="https://serverfault.com/questions/608517/how-to-route-traffic-from-private-network-to-openvpn-subnet-and-back" class="uri">https://serverfault.com/questions/608517/how-to-route-traffic-from-private-network-to-openvpn-subnet-and-back</a></p>
<p><a href="https://superuser.com/questions/1162231/route-public-subnet-over-vpn" class="uri">https://superuser.com/questions/1162231/route-public-subnet-over-vpn</a></p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/projects/build-server-3/</guid>
  <pubDate>Wed, 17 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Packaging quarto using nix</title>
  <link>https://moonpiedumplings.github.io/projects/quarto-via-nix/</link>
  <description><![CDATA[ 




<section id="update-2024-1-15" class="level1">
<h1>Update 2024-1-15</h1>
<p>Bug. See here: <a href="https://github.com/NixOS/nixpkgs/issues/256074" class="uri">https://github.com/NixOS/nixpkgs/issues/256074</a></p>
<p>Because of this, I returned to the vendored version of pandoc to fix this:</p>
<details>
<summary>
Show code
</summary>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb1-2">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python311<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonDeps</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> </span>
<span id="cb1-6">        jupyter <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#notebook qtconsole jupyter_console</span></span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nbconvert</span></span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ipykernel ipywidgets</span></span>
<span id="cb1-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matplotlib</span></span>
<span id="cb1-10">        pip</span>
<span id="cb1-11"></span>
<span id="cb1-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-13">     <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">         <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preFixup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">          wrapProgram $out/bin/quarto \</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix PATH : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.lib.makeBinPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> \</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_ESBUILD : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.esbuild<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/esbuild \</span></span>
<span id="cb1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_DART_SASS : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.dart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sass<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/dart-sass \</span></span>
<span id="cb1-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PYTHON : "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3.withPackages pythonDeps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3" \</span></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">          ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">installPhase</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb1-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mkdir -p $out/bin $out/share</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv bin/* $out/bin</span></span>
<span id="cb1-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv share/* $out/share</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook postInstall</span></span>
<span id="cb1-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb1-33">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PYTHONPATH</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3.withPackages pythonDeps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QUARTO_PYTHON</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3.withPackages pythonDeps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QUARTO_PANDOC</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/tools/pandoc"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> </span>
<span id="cb1-38">            nodePackages_latest.npm</span>
<span id="cb1-39">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>python3.withPackages pythonDeps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-40">            quarto</span>
<span id="cb1-41">            texlive.combined.scheme-full</span>
<span id="cb1-42">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>And with this, this little bug is fixed.</p>
<p>However, there is another issue where quarto does not properly detect the version of jupyter installed in the nix environment.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">[nix-shell:~/vscode/moonpiedumplings.github.io]$ quarto check</span>
<span id="cb2-2"></span>
<span id="cb2-3">....</span>
<span id="cb2-4"></span>
<span id="cb2-5">[✓] Checking Python 3 installation....OK</span>
<span id="cb2-6">      Version: 3.11.6</span>
<span id="cb2-7">      Path: /nix/store/aa115421digfydv0j6w1ad33f822z2sz-python3-3.11.6-env/bin/python3.11</span>
<span id="cb2-8">      Jupyter: (None)</span>
<span id="cb2-9"></span>
<span id="cb2-10">      Jupyter is not available in this Python installation.</span>
<span id="cb2-11">      Install with python3 -m pip install jupyter</span></code></pre></div>
<p>Despite the fact that it is installed.</p>
<p>Despite the fact that it is installed.</p>
<p>Nevermind, after updating my nixpkgs, this issue was fixed:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">[✓] Checking Python 3 installation....OK</span>
<span id="cb3-2">      Version: 3.11.7</span>
<span id="cb3-3">      Path: /nix/store/37hbd3y9qfv6nfqg5rh4r27kxlfwrnx5-python3-3.11.7-env/bin/python3.11</span>
<span id="cb3-4">      Jupyter: 5.7.1</span>
<span id="cb3-5">      Kernels: python3</span></code></pre></div>
</section>
<section id="quarto-and-pandoc-were-updated-in-nixpkgs" class="level1">
<h1>Quarto and pandoc were updated in nixpkgs!</h1>
<p>I’ve been following the <a href="https://matrix.to/#/#haskell:nixos.org">matrix channel for haskell and nixpkgs</a>, and they’ve been working on this for some time now, since I first wrote this article. But recently, they updated the relevant haskell packages, and the quarto version in nixpkgs-unstable is now the latest version.</p>
</section>
<section id="original-article-below" class="level1">
<h1>Original Article Below</h1>
<p>Skip to the conclusion if you want to know how to use the efforts of my hard work, although it only works on x86_64 linux.</p>
</section>
<section id="what-is-quarto" class="level1">
<h1>What is quarto?</h1>
<p>To explain quarto, I first have to explain jupyter notebooks, and quarto’s predecessor, fastpages.</p>
<p><a href="https://github.com/fastai/fastpages">Fastpages</a> is a blogging platform built on jekyll, a static site generator. Static sites are websites that do not connect to a backend server, the user’s browser does all the rendering. Static site generators do all the hard work of creating these, by converting a very human readable format, like markdown, to pretty looking html, which is what browsers render.</p>
<p>Fastpages adds onto the features of jekyll, by adding support for jupyter notebooks. Jupyter is a technology that allows users to combine code, multimedia, and text into a single document, for any purposes that one might use it. It’s usually popular for data science, as code is used to generate diagrams, but I really like it for testing snippets of code, as you can have multiple pieces of code in one document, and then run and debug them independently of eachother. Fastpagess can convert all of this, even automatically running code and creating any interactive elements, and then putting it all up on the internet as a static site.</p>
<p>Fastpages is also deprecated. On the github page, which is archived, it recommends you switch to quarto.</p>
<p>Quarto adds more features on top of fastpages, while also removing some features. Fastpages is primarily designed for blogging, whereas quarto also has support for generating books, pdf’s, and websites.</p>
<p>However, quarto lacks some features, as it uses it’s own static site generator, rather than jekyll. The biggest and most noticable one, is the Liquid template language that my computer science teacher uses to dynamically render his schedule page.</p>
<p>But for my purposes, quarto works fine. This blogpost you are reading, was generated using quarto.</p>
</section>
<section id="what-is-nix" class="level1">
<h1>What is nix?</h1>
<p>Nix is multiple things. Nix is a linux distribution, an package repository, a package manager, a programming language, and a configuration as code system.</p>
<p>Right now, I am trying to use it as a package manager — specifically, to give myself the quarto tool.</p>
<p>I’ve selected nix because it focuses on reproducible builds, across Mac, and Linux and x86_64, and arm64. This enables a multitude of devices to get packages with an identical configuration to me.</p>
</section>
<section id="using-nix" class="level1">
<h1>Using Nix</h1>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb4-2">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter pandoc deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This is a sample <code>shell.nix</code> file. If you run the <code>nix-shell</code> command line tool while in the same working directory, or using the filename as an argument, it will use this bit of nix code to create an shell environment for you.</p>
<p>Nix is a functional programming langauge. Unlike a language like python or java, where everything is an object, in nix, everything is a function. The colon <code>:</code> declares the arguments for a function. The <code>?</code> declares a default argument for the variable, pkgs, to be used in the function. This is important, because without this declarion, the program does now know where to get packages from.</p>
<p>The above shell.nix works great. However, it installs an older version of quarto, 1.2, as only an older version of quarto is packaged in the nixpkgs repository. I want the newest version, 1.3.</p>
<p>Here is the code used to create the quarto package, called a derivation:</p>
<details>
<summary>
Show derivation
</summary>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb5-1"></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">stdenv</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">esbuild</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">deno</span></span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fetchurl</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nodePackages</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rWrapper</span></span>
<span id="cb5-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rPackages</span></span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraRPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb5-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">makeWrapper</span></span>
<span id="cb5-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python3</span></span>
<span id="cb5-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraPythonPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb5-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb5-16"></span>
<span id="cb5-17">stdenv.mkDerivation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-18">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pname</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-19">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.2.475"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-20">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-oyKjDlTKt2fIzirOqgNRrpuM7buNCG5mmgIztPa28rY="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-23">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nativeBuildInputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-26">    makeWrapper</span>
<span id="cb5-27">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-28"></span>
<span id="cb5-29">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">patches</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-30">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">./fix-deno-path.patch</span></span>
<span id="cb5-31">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-32"></span>
<span id="cb5-33">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">postPatch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb5-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    # Compat for Deno &gt;=1.26</span></span>
<span id="cb5-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    substituteInPlace bin/quarto.js \</span></span>
<span id="cb5-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --replace 'Deno.setRaw(stdin.rid, ' 'Deno.stdin.setRaw(' \</span></span>
<span id="cb5-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --replace 'Deno.setRaw(Deno.stdin.rid, ' 'Deno.stdin.setRaw('</span></span>
<span id="cb5-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-39"></span>
<span id="cb5-40">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dontStrip</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-41"></span>
<span id="cb5-42">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preFixup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb5-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    wrapProgram $out/bin/quarto \</span></span>
<span id="cb5-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --prefix PATH : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>lib.makeBinPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> \</span></span>
<span id="cb5-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --prefix QUARTO_PANDOC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pandoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/pandoc \</span></span>
<span id="cb5-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --prefix QUARTO_ESBUILD : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>esbuild<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/esbuild \</span></span>
<span id="cb5-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --prefix QUARTO_DART_SASS : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>nodePackages.sass<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/sass \</span></span>
<span id="cb5-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --prefix QUARTO_R : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>rWrapper.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> rPackages.rmarkdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/R \</span></span>
<span id="cb5-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --prefix QUARTO_PYTHON : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>python3.withPackages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> jupyter ipython <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>extraPythonPackages ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3</span></span>
<span id="cb5-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-51"></span>
<span id="cb5-52">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">installPhase</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb5-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      runHook preInstall</span></span>
<span id="cb5-54"></span>
<span id="cb5-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      mkdir -p $out/bin $out/share</span></span>
<span id="cb5-56"></span>
<span id="cb5-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      rm -r bin/tools</span></span>
<span id="cb5-58"></span>
<span id="cb5-59"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      mv bin/* $out/bin</span></span>
<span id="cb5-60"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      mv share/* $out/share</span></span>
<span id="cb5-61"></span>
<span id="cb5-62"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      runHook preInstall</span></span>
<span id="cb5-63"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-64"></span>
<span id="cb5-65">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">meta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> lib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-66">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Open-source scientific and technical publishing system built on Pandoc"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-67">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">longDescription</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb5-68"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        Quarto is an open-source scientific and technical publishing system built on Pandoc.</span></span>
<span id="cb5-69"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        Quarto documents are authored using markdown, an easy to write plain text format.</span></span>
<span id="cb5-70"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-71">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">homepage</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://quarto.org/"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-72">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">changelog</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/tag/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-73">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">license</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> licenses.gpl2Plus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-74">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">maintainers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> maintainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> mrtarantoga <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-75">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">platforms</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-76">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sourceProvenance</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> sourceTypes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> binaryNativeCode binaryBytecode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-77">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-78"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>I don’t want to bore you with details, but in short, it downloads an older version of quarto than the newest.</p>
</section>
<section id="packaging-quarto" class="level1">
<h1>Packaging quarto</h1>
<p>Nix is very poorly documented. The recommended way of getting help with nix is to ask for help on the discord. So that is what I did. The first thing I asked was how to get a newer version of quarto:</p>
<p>I started out by asking how to update the version of the quarto package. I started out to do so on my own, by cloning the nixpkgs github repo, and attempting to build nixpkgs, but I couldn’t figure out how to build it at first, which is when I asked.</p>
<p><img src="https://moonpiedumplings.github.io/projects/quarto-via-nix/quartodiscord/firstask.png" class="img-fluid"></p>
<p>Which didn’t work, because I did not want to download the whole nixpkgs. I wanted to store the nix derivation to build. The answer: use an ovveride:</p>
<p>I was then told to use the overrideAttrs function, which overrides specific attributes, essentially variables, of the derivation, another type of function, used to build the program.</p>
<p>My first attempt was not too good.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb6-1"></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> </span>
<span id="cb6-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb6-8">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter pandoc deno mkpasswd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>A simple shell.nix that replaced the <code>version</code> attribute of quarto. I shared this excitedly, thinking I had figured this out on my own, only to be told that this change was purely cosmetic, and the new version of quarto wasn’t actually installed. And they were right.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb7-1">[nix-shell:~/vscode/quartotest]$ which quarto</span>
<span id="cb7-2">/nix/store/9qy0kpll3r755c6i0717405dilhffdrd-quarto-1.3.361/bin/quarto</span></code></pre></div>
<p>It looks right, until you check deeper:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb8-1">[nix-shell:~/vscode/quartotest]$ quarto --version</span>
<span id="cb8-2">1.2.475</span></code></pre></div>
<p>So a deeper override was needed. I needed to override the <code>src</code> attribute, which determines where to download the files used to package the application.</p>
<details>
<summary>
Second attempt!
</summary>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb9-1"></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> </span>
<span id="cb9-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-VEYUEI4xzQPXlyTbCThAW2npBCZNPDJ5x2cWnkNz7RE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb9-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb9-12">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter pandoc deno mkpasswd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>But this errored as well.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb10-1">~/vscode/quartotest master !4 ?1 ❯ nix-shell                                                                                                                         2m 56s</span>
<span id="cb10-2">error: undefined variable 'fetchurl'</span>
<span id="cb10-3"></span>
<span id="cb10-4">       at /home/moonpie/vscode/quartotest/shell.nix:5:19:</span>
<span id="cb10-5"></span>
<span id="cb10-6">            4|             version = "1.3.361";</span>
<span id="cb10-7">            5|             src = fetchurl {</span>
<span id="cb10-8">             |                   ^</span>
<span id="cb10-9">            6|     url = "https://github.com/quarto-dev/quarto-cli/releases/download/v${version}/quarto-${version}-lin</span></code></pre></div>
<p>I was confused? Why did this error? I had copied exactly what was in the derivation used to build the package?</p>
<p>Later, I figured out why. When a package is built, the dependencies are declared in the beginning of the package:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb11-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb11-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Dependencies_Here</span></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> : stdenv.mkDerivation.restofpackage</span></code></pre></div>
<p>In nix, every single thing is a function. When creation a function in nix, the curly brackets before the function declare the arguments that the function will take:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb12-1">function = <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">arg1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">arg2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> : functionhere</span></code></pre></div>
<p>But when creating a package, this syntax plays another role. The arguments of the function act as a dependency list, by declaring what packages are necessary to build the derivation. This prevents the build from being tainted by anything that is not explicitly declared. However, because overrides are not the same as derivations, they act differently.</p>
<p>But to get around this error when using the override function:</p>
<details>
<summary>
Success!
</summary>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb13-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> </span>
<span id="cb13-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-4">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-8">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb13-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb13-11">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter pandoc deno mkpasswd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>And it worked:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb14-1">[nix-shell:/tmp/test]$ quarto --version</span>
<span id="cb14-2">1.3.361</span></code></pre></div>
<p>Except it didn’t. When I actually tried to render my project:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb15-1">[nix-shell:~/vscode/quartotest]$ quarto render</span>
<span id="cb15-2">[1/4] about.qmd</span>
<span id="cb15-3">Could not find data file templates/styles.citations.html</span></code></pre></div>
<p>Since this file couldn’t be found on my system, I tried to find it on the internet.</p>
<p>And find it I did, in the data-files section of the <a href="https://hackage.haskell.org/package/pandoc-3.1/pandoc.cabal">information about the pandoc 3.1 package</a></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb16-1">data-files:</span>
<span id="cb16-2">                 -- templates</span>
<span id="cb16-3">                 data/templates/styles.html</span>
<span id="cb16-4">                 data/templates/styles.citations.html</span></code></pre></div>
<p>First, I checked what version of the pandoc that Nix had in their repositories. They only had 2.1.9, which was too old for the version of quarto I had.</p>
<p>But just in case, <a href="https://github.com/quarto-dev/quarto-cli/discussions/5754">I asked on the github discussions page for quarto</a>. And yes, quarto 1.3, the version I wanted, did require pandoc 3.0, which nix did not have packaged.</p>
<p>Except it did, although the package wasn’t in the dependencies. So I first tried to install it independently, using the <code>nix-shell -p package tool</code></p>
<details>
<summary>
Except I got an error
</summary>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb17-1">~/vscode/test ❯ nix-shell -p haskellPackages.pandoc_3_1_2</span>
<span id="cb17-2">this derivation will be built:</span>
<span id="cb17-3">  /nix/store/63pnk32wsdczfk3nkl071w9y69yy5wmi-pandoc-3.1.2.drv</span>
<span id="cb17-4">building '/nix/store/63pnk32wsdczfk3nkl071w9y69yy5wmi-pandoc-3.1.2.drv'...</span>
<span id="cb17-5">setupCompilerEnvironmentPhase</span>
<span id="cb17-6">Build with /nix/store/4wjl91hrizxghwqy18a1337gq2y9mh40-ghc-9.2.7.</span>
<span id="cb17-7">unpacking sources</span>
<span id="cb17-8">unpacking source archive /nix/store/7ncxphrr3nff9jb3j4w9ksl6ggznqhm6-pandoc-3.1.2.tar.gz</span>
<span id="cb17-9">source root is pandoc-3.1.2</span>
<span id="cb17-10">setting SOURCE_DATE_EPOCH to timestamp 1000000000 of file pandoc-3.1.2/xml-light/Text/Pandoc/XML/Light/Types.hs</span>
<span id="cb17-11">patching sources</span>
<span id="cb17-12">compileBuildDriverPhase</span>
<span id="cb17-13">setupCompileFlags: -package-db=/build/tmp.yaRUozaznX/setup-package.conf.d -j16 +RTS -A64M -RTS -threaded -rtsopts</span>
<span id="cb17-14">[1 of 1] Compiling Main             ( /nix/store/4mdp8nhyfddh7bllbi7xszz7k9955n79-Setup.hs, /build/tmp.yaRUozaznX/Main.o )</span>
<span id="cb17-15">Linking Setup ...</span>
<span id="cb17-16">configuring</span>
<span id="cb17-17">configureFlags: --verbose --prefix=/nix/store/7983f3r6gpgvf17dn1k2c05wma708xdn-pandoc-3.1.2 --libdir=$prefix/lib/$compiler --libsubdir=$abi/$libname --datadir=/nix/store/zdc55i48g6hpbwckiwk6s6iraf30hh99-pandoc-3.1.2-data/share/ghc-9.2.7 --with-gcc=gcc --package-db=/build/tmp.yaRUozaznX/package.conf.d --ghc-options=-j16 +RTS -A64M -RTS --disable-split-objs --enable-library-profiling --profiling-detail=exported-functions --disable-profiling --enable-shared --disable-coverage --enable-static --disable-executable-dynamic --enable-tests --disable-benchmarks --enable-library-vanilla --disable-library-for-ghci --ghc-option=-split-sections -f-trypandoc --extra-lib-dirs=/nix/store/4g9phbpakh51bbw2n391vipz9r5z56kw-ncurses-6.4/lib --extra-lib-dirs=/nix/store/mnq0hqsqivdbaqzmzc287l0z9zw8dp15-libffi-3.4.4/lib --extra-lib-dirs=/nix/store/0ssnwyy41aynhav7jr4dz1y01lfzi86f-gmp-with-cxx-6.2.1/lib</span>
<span id="cb17-18">Using Parsec parser</span>
<span id="cb17-19">Configuring pandoc-3.1.2...</span>
<span id="cb17-20">Setup: Encountered missing or private dependencies:</span>
<span id="cb17-21">doctemplates &gt;=0.11 &amp;&amp; &lt;0.12,</span>
<span id="cb17-22">gridtables &gt;=0.1 &amp;&amp; &lt;0.2,</span>
<span id="cb17-23">jira-wiki-markup &gt;=1.5.1 &amp;&amp; &lt;1.6,</span>
<span id="cb17-24">mime-types &gt;=0.1.1 &amp;&amp; &lt;0.2,</span>
<span id="cb17-25">pandoc-types &gt;=1.23 &amp;&amp; &lt;1.24,</span>
<span id="cb17-26">texmath &gt;=0.12.7 &amp;&amp; &lt;0.13</span>
<span id="cb17-27"></span>
<span id="cb17-28">error: builder for '/nix/store/63pnk32wsdczfk3nkl071w9y69yy5wmi-pandoc-3.1.2.drv' failed with exit code 1</span></code></pre></div>
</details>
<p>Except all the dependencies that the error message wanted, existed in nixpkgs.</p>
<p>Here’s <a href="https://search.nixos.org/packages?channel=22.11&amp;show=haskellPackages.doctemplates_0_10_0_2&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=doctemplates">doctemplates</a></p>
<p>Here’s <a href="https://search.nixos.org/packages?channel=22.11&amp;show=haskellPackages.doctemplates_0_10_0_2&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=doctemplates">gridtables</a></p>
<p>And so on. It was like, even though pandoc required these packages, it couldn’t see them. They all had the format packagename_version, as opposed to simply packagename, which would be an older package.</p>
<p>So I asked on discord, again.</p>
<p><img src="https://moonpiedumplings.github.io/projects/quarto-via-nix/quartodiscord/pandocnobbzintro.png" class="img-fluid"></p>
<p>This one user, NobbZ, helps people so much that people joke that he <em>is</em> the documentation.</p>
<p>I tried their solution, and it didn’t work. Apparently, this solution was designed for the newer feature of nix, flakes, which I wasn’t using.</p>
<p>But with some adjustment, I managed to figure out how to use the <code>override</code> feature on my own, with the same solution that NobbZ sent me seconds later:</p>
<details>
<summary>
Trying to get override working
</summary>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb18-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb18-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb18-10">   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* pandoc = pkgs.haskellPackages.callCabal2nix "pandoc" (fetchTarball {</span></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        url = "https://github.com/jgm/pandoc/archive/refs/tags/3.1.2.tar.gz";</span></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sha256 = "1h928w4ghbxg5whq7d9nkrfll2abvmbkc45adfgv35rfhcpkiiv9";</span></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    }) {};*/</span></span>
<span id="cb18-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">doctemplates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.doctemplates_0_11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gridtables</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.gridtables_0_1_0_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jira-wiki-markup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.jira<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wiki<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>markup_1_5_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mime-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.mime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_0_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_1_23<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">texmath</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.texmath_0_12_7_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc_3_1_2.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inherit</span> doctemplates gridtables jira-wiki-markup mime-types pandoc-types texmath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;};</span></span>
<span id="cb18-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb18-22">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter pandoc deno mkpasswd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb18-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>Except this errors:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb19-1">Warning:</span>
<span id="cb19-2">    This package indirectly depends on multiple versions of the same package. This is very likely to cause a compile failure.</span>
<span id="cb19-3">      package http-client (http-client-0.7.13.1-52kzOBAMbxmJrzoQZgatPf) requires mime-types-0.1.0.9-Gdz1G1mhqziCfo3C8KZHz7</span>
<span id="cb19-4">      package pandoc (pandoc-3.1.2) requires mime-types-0.1.1.0-4FUch8wD40c6kQtGdyJOSM</span>
<span id="cb19-5">      package texmath (texmath-0.12.7.1-BbrGid5okuSI4hfeGBAcF8) requires pandoc-types-1.22.2.1-1cCcarshT2W3DaxppqWytd</span>
<span id="cb19-6">      package commonmark-pandoc (commonmark-pandoc-0.2.1.3-OwUzhyyJ0cDzxfYXzbAci) requires pandoc-types-1.22.2.1-1cCcarshT2W3DaxppqWytd</span>
<span id="cb19-7">      package citeproc (citeproc-0.8.1-LP74PTBZCEoHiNCfXfUYdM) requires pandoc-types-1.22.2.1-1cCcarshT2W3DaxppqWytd</span>
<span id="cb19-8">      package pandoc (pandoc-3.1.2) requires pandoc-types-1.23-AC7tSm0fcRIGMZsmro9kaK</span>
<span id="cb19-9">      package pandoc (pandoc-3.1.2) requires pandoc-types-1.23-AC7tSm0fcRIGMZsmro9kaK</span>
<span id="cb19-10">** abort because of serious configure-time warning from Cabal</span>
<span id="cb19-11">error: builder for '/nix/store/ibawyigbdn9bs1gs9hc0mgzqraqfxhy0-pandoc-3.1.2.drv' failed with exit code 1</span></code></pre></div>
<p>Essentially, a dependency error. Doctemplates also required a package that wasn’t under the default of <code>packagename</code>, but rather <code>packagename_version</code>.</p>
<p>Another user proceeded to chime in with their solution:</p>
<details>
<summary>
See cdepillabout’s solution
</summary>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb20-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb20-3"></span>
<span id="cb20-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc_3_1_2.overrideScope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hfinal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hprev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">doctemplates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.doctemplates_0_11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gridtables</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.gridtables_0_1_0_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jira-wiki-markup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.jira<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wiki<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>markup_1_5_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mime-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.mime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_0_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_1_23<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">texmath</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.texmath_0_12_7_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-11">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb20-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb20-13">  pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb20-15">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>And this worked! Except it didn’t.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb21-1">[nix-shell:~/vscode/quartotest]$ pandoc</span>
<span id="cb21-2">bash: pandoc: command not found</span>
<span id="cb21-3"></span>
<span id="cb21-4">[nix-shell:~/vscode/quartotest]$ which pandoc</span>
<span id="cb21-5">which: no pandoc in (/nix/store/kbcrs84s1x8yd5bp1nq6q6ihda8nd2lp-bash-interactive-5.2-p15/bin:/nix/store/a9q4y7vw1fgs990bs5mpd3p50mc0iz27-python3-3.10.11/bin:/nix/store/nh8iz5l2zn5nbk19qxdw575a5fhfcajw-quarto-1.3.361/bin:/nix/store/ar2lzr4kr4pi1zgx3w8hl6fkny3bql53-python3.10-notebook-6.5.2/bin:/nix/store/ai5lxg5vzjsfk9zkyn65ndq81na2mm5c-python3.10-babel-2.12.1/bin:/nix/store/95cxzy2hpizr23343b8bskl4yacf4b3l-python3-3.10.11/bin:/nix/store/5ii8sm9yh01ny05bl1wjdv6pkdjb8bw0-python3.10-jupyter-core-5.2.0/bin:/nix/store/pkgr71n4dy7h9lp00paf6k3llfa95ig0-python3.10-Send2Trash-1.8.1b0/bin:/nix/store/x1kk4hlx0zl12igvr6v0pk2cq2720fbh-python3.10-jupyter_client-8.0.3/bin:/nix/store/9icvaw0dgk7258m564xlh513nz6xis1m-python3.10-nbformat-5.7.3/bin:/nix/store/6svh49hf9pq5hwavgyb642v5a0pjnn4a-python3.10-jsonschema-4.17.3/bin:/nix/store/15jn0r39wg0ripjzjfxj9arcv53qxck9-python3.10-nbclassic-0.5.2/bin:/nix/store/jjy30kw6pw2mq54ig6lrm84ds91a9snf-python3.10-ipython-8.11.0/bin:/nix/store</span></code></pre></div>
<p>Apparently, in pandoc 3.0, the binary and the library have been split into two seperate packages. In nixpkgs, the library can be found in the haskellPackages.pandoc_3_1_2, and the binary can be found in haskellPackages.pandoc-cli.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb22-1">nix-shell -p haskellPackages.pandoc-cli</span>
<span id="cb22-2"></span>
<span id="cb22-3">Setup: Encountered missing or private dependencies:</span>
<span id="cb22-4">doctemplates &gt;=0.11 &amp;&amp; &lt;0.12, pandoc &gt;=3.0</span>
<span id="cb22-5">...</span>
<span id="cb22-6">error: builder for '/nix/store/hzzqnffj08r9qc0xi3b4ydi7w91dn4m0-pandoc-server-0.1.drv' failed with exit code 1</span>
<span id="cb22-7">error: 1 dependencies of derivation '/nix/store/arbq7vgw539xyd4l0y5x3jyhhra30v91-pandoc-cli-0.1.1.drv' failed to build</span></code></pre></div>
<p>The pandoc-cli package is broken, for the exact same error that the pandoc library won’t compile for.</p>
<details>
<summary>
So I try my own override:
</summary>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb23-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb23-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb23-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb23-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc_3_1_2.overrideScope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hfinal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hprev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">doctemplates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.doctemplates_0_11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gridtables</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.gridtables_0_1_0_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jira-wiki-markup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.jira<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wiki<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>markup_1_5_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mime-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.mime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_0_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_1_23<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">texmath</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.texmath_0_12_7_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-17">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb23-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-cli</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cli.overrideScope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hfinal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hprev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-core</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>core_2_3_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lua</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.lua_2_3_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb23-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb23-23">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.python310Full quarto pkgs.jupyter pandoc pandoc-cli pkgs.deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb23-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>But this also errors:</p>
<details>
<summary>
Show error
</summary>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb24-1">Using Parsec parser</span>
<span id="cb24-2">Configuring tasty-hslua-1.0.2...</span>
<span id="cb24-3"></span>
<span id="cb24-4">Setup: Encountered missing or private dependencies:</span>
<span id="cb24-5">hslua-core &gt;=2.0 &amp;&amp; &lt;2.3</span>
<span id="cb24-6"></span>
<span id="cb24-7">error: builder for '/nix/store/nmhz8xnc24xw86q573v515n3q8m9l0y5-tasty-hslua-1.0.2.drv' failed with exit code 1</span>
<span id="cb24-8">error: 1 dependencies of derivation '/nix/store/8q4ni7s2am50xbbbkcdjk85szyvq3jk8-hslua-2.2.1.drv' failed to build</span>
<span id="cb24-9">error: 1 dependencies of derivation '/nix/store/hcysycpqkqv4kd3qmkwzyi7pkaqszqyy-hslua-marshalling-2.2.1.drv' failed to build</span>
<span id="cb24-10">error: 1 dependencies of derivation '/nix/store/h4c32n03d305njipsiw4rzc8rq52l2bc-hslua-packaging-2.2.1.drv' failed to build</span>
<span id="cb24-11">error: 1 dependencies of derivation '/nix/store/y655vw1bdq8a9j818k16y7228nlsf86y-hslua-cli-1.4.1.drv' failed to build</span>
<span id="cb24-12">error: 1 dependencies of derivation '/nix/store/xkkp4cj1yfwjpczc6k7y08gxdqdbfh4n-pandoc-2.19.2.drv' failed to build</span>
<span id="cb24-13">error: 1 dependencies of derivation '/nix/store/sc44mnc1ngxfxi7h3f6qrrvnvldla4w3-pandoc-cli-0.1.1.drv' failed to build</span>
<span id="cb24-14">~/vscode/quartotest master !4 ?9 ❯                                                                                        </span></code></pre></div>
</details>
<p>But the hslua-core version I want was packaged in nixpkgs, similar to doctemplates, or gridtables. So I did a further override.</p>
<details open="">
<summary>
Show/hide
</summary>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb25-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb25-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb25-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb25-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc_3_1_2.overrideScope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hfinal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hprev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">doctemplates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.doctemplates_0_11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gridtables</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.gridtables_0_1_0_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jira-wiki-markup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.jira<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wiki<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>markup_1_5_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mime-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.mime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_0_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_1_23<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">texmath</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.texmath_0_12_7_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tasty-hslua</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.tasty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>hslua_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-marshalling</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>marshalling_2_3_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-aeson</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>aeson_2_3_0_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua_2_3_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-21">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb25-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-cli</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.haskellPackages.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cli.overrideScope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hfinal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hprev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-core</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>core_2_3_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lua</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.lua_2_3_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tasty-hslua</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.tasty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>hslua_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-marshalling</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>marshalling_2_3_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-aeson</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>aeson_2_3_0_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.hslua_2_3_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb25-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb25-31">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.python310Full quarto pkgs.jupyter pandoc pandoc-cli pkgs.deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb25-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>Which still errors:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb26-1">Using Parsec parser</span>
<span id="cb26-2">Configuring hslua-typing-0.1.0...</span>
<span id="cb26-3"></span>
<span id="cb26-4">Setup: Encountered missing or private dependencies:</span>
<span id="cb26-5">hslua-core &gt;=2.3 &amp;&amp; &lt;2.4, hslua-marshalling &gt;=2.3 &amp;&amp; &lt;2.4</span>
<span id="cb26-6"></span>
<span id="cb26-7">error: builder for '/nix/store/kbmfxjy0ycwwg6r6zsp9q9v1pfkmggnw-hslua-typing-0.1.0.drv' failed with exit code 1</span>
<span id="cb26-8">error: 1 dependencies of derivation '/nix/store/nj4smnyrkaf52qx98r1wa0r1gdnjbwxk-hslua-2.3.0.drv' failed to build</span></code></pre></div>
<p>I quickly realized, that the updated set of haskell packages in nixpkgs, is broken all the way down. I found a relevant <a href="https://github.com/NixOS/nixpkgs/issues/221165">github issue</a>. In this issue, somene had modified the derivation of the haskellPackages, to get pandoc-cli to work.</p>
<p>I used their fork of nixpkgs to give myself pandoc-cli.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb27-1">~/vscode/quartotest master +3 !1 ❯ nix-shell -p haskellPackages.pandoc-cli -I nixpkgs=https://github.com/seam345/nixpkgs/archive/89e6e477c8357a087e863db562d2fa8d9fe5ba29.tar.gz</span>
<span id="cb27-2">[nix-shell:~/vscode/quartotest]$ pandoc --version</span>
<span id="cb27-3">pandoc 3.1</span>
<span id="cb27-4">Features: +server +lua</span>
<span id="cb27-5">Scripting engine: Lua 5.4</span>
<span id="cb27-6">User data directory: /home/moonpie/.local/share/pandoc</span>
<span id="cb27-7">Copyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org</span>
<span id="cb27-8">This is free software; see the source for copying conditions. There is no</span>
<span id="cb27-9">warranty, not even for merchantability or fitness for a particular purpose.</span></code></pre></div>
<p>This actually worked, and I got pandoc-cli with the 3.0 version of pandoc. However, I couldn’t get quarto to use pandoc-cli rather than the normal pandoc version, so quarto still wasn’t working.</p>
<p>Later, cdepillabout chimed in again. Here is their solution:</p>
<details open="">
<summary>
Show/hide
</summary>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb28-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs-src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">fetchTarball</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nixpkgs-unstable as of 2023-05-31</span></span>
<span id="cb28-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/NixOS/nixpkgs/archive/58c85835512b0db938600b6fe13cc3e3dc4b364e.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0bkhaiaczj25s6hji2k9pm248jhfbiaqcfcsfk92bbi7kgzzzpif"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-6">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb28-7"></span>
<span id="cb28-8">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">my-overlay</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">final</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-9"></span>
<span id="cb28-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc_1_3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb28-11">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb28-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">final</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">haskell</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">compose</span>) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disableCabalFlag</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">markUnbroken</span>;</span>
<span id="cb28-13">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb28-14">      final.lib.pipe</span>
<span id="cb28-15">        final.haskellPackages.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cli</span>
<span id="cb28-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb28-17">          markUnbroken</span>
<span id="cb28-18">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>disableCabalFlag <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lua"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb28-19">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">p</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> p.overrideScope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hfinal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hprev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">doctemplates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.doctemplates_0_11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gridtables</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.gridtables_0_1_0_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hslua-cli</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jira-wiki-markup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.jira<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wiki<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>markup_1_5_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mime-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.mime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_0_1_1_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.pandoc_3_1_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-lua-engine</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-server</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markUnbroken hprev.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-28">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc-types</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.pandoc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>types_1_23<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">texmath</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprev.texmath_0_12_7_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-30">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}))</span></span>
<span id="cb28-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb28-32"></span>
<span id="cb28-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto_1_3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb28-34">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb28-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto-version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-36">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb28-37">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>final.quarto.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final.pandoc_1_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})</span>.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quarto<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-40">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>quarto<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>quarto<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-41">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-42">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb28-43">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb28-44">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb28-45"></span>
<span id="cb28-46">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> nixpkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>src <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlays</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> my-overlay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb28-47"></span>
<span id="cb28-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb28-49"></span>
<span id="cb28-50">pkgs.quarto_1_3</span></code></pre></div>
</details>
<p>Although I modified it a bit, to be</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb29-1">...</span>
<span id="cb29-2">in</span>
<span id="cb29-3">pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb29-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>pkgs.quarto_1_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb29-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Because it is the mkShell package that creates the shell environment.</p>
<p>This solution works, and gets me quarto 1.3, and also replaces the default dependency of quarto, on pandoc 2.1.9, with one on pandoc-cli.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb30-1">[nix-shell:~/vscode/quartotest]$ quarto pandoc --version</span>
<span id="cb30-2">pandoc 3.1.2</span>
<span id="cb30-3">Features: +server -lua</span>
<span id="cb30-4">Scripting engine: none</span>
<span id="cb30-5">User data directory: /home/moonpie/.local/share/pandoc</span>
<span id="cb30-6">Copyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org</span>
<span id="cb30-7">This is free software; see the source for copying conditions. There is no</span>
<span id="cb30-8">warranty, not even for merchantability or fitness for a particular purpose.</span></code></pre></div>
<p>However, it has a caveat. It compiles pandoc without lua support, as those packages where the ones that were broken in nixpkgs.</p>
<p>But apparently, quarto needs lua suppport.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb31-1">[nix-shell:~/vscode/quartotest]$ quarto render</span>
<span id="cb31-2">[1/9] about.qmd</span>
<span id="cb31-3">This version of pandoc has been compiled without Lua support.</span></code></pre></div>
<p>So yeah. That doesn’t work.</p>
<p>But meanwhile, the quarto team responded to a question I asked on their github discussion page. I had asked if quarto requires either the pandoc binary, or the pandoc library.</p>
<p>They replied, and said that a pandoc binary, is actually included inside the tarball and the packages they have created. As part of the build system, the package is fairly self reliant, not needing much in terms of external dependencies.</p>
<p>So that’s what I did.</p>
<p>I modified the derivation so that it uses the built in pandoc, rather than replacing it with an external one.</p>
<details open="">
<summary>
Show/hide
</summary>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb32-1"></span>
<span id="cb32-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb32-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> </span>
<span id="cb32-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-5"></span>
<span id="cb32-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraRPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb32-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraPythonPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb32-8"></span>
<span id="cb32-9"></span>
<span id="cb32-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb32-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">patches</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb32-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preFixup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb32-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            wrapProgram $out/bin/quarto \</span></span>
<span id="cb32-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix PATH : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.lib.makeBinPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> \</span></span>
<span id="cb32-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PANDOC : $out/bin/tools/pandoc \</span></span>
<span id="cb32-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_ESBUILD : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.esbuild<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/esbuild \</span></span>
<span id="cb32-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_DART_SASS : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.nodePackages.sass<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/sass \</span></span>
<span id="cb32-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_R : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.rWrapper.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.rPackages.rmarkdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/R \</span></span>
<span id="cb32-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PYTHON : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3.withPackages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> jupyter ipython <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>extraPythonPackages ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3</span></span>
<span id="cb32-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">installPhase</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb32-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb32-28"></span>
<span id="cb32-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mkdir -p $out/bin $out/share</span></span>
<span id="cb32-30"></span>
<span id="cb32-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv bin/* $out/bin</span></span>
<span id="cb32-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv share/* $out/share</span></span>
<span id="cb32-33"></span>
<span id="cb32-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb32-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}))</span>.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inherit</span> pandoc extraPythonPackages extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;};</span></span>
<span id="cb32-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb32-38">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-39"></span>
<span id="cb32-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb32-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>And this works:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb33-1">[nix-shell:/tmp/test]$ quarto pandoc --version</span>
<span id="cb33-2">pandoc 3.1.1</span>
<span id="cb33-3">Features: +server +lua</span>
<span id="cb33-4">Scripting engine: Lua 5.4</span>
<span id="cb33-5">User data directory: /home/moonpie/.local/share/pandoc</span>
<span id="cb33-6">Copyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org</span>
<span id="cb33-7">This is free software; see the source for copying conditions. There is no</span>
<span id="cb33-8">warranty, not even for merchantability or fitness for a particular purpose.</span>
<span id="cb33-9"></span>
<span id="cb33-10">[nix-shell:/tmp/test]$ quarto render</span>
<span id="cb33-11">[1/4] about.qmd</span>
<span id="cb33-12">[2/4] posts/post-with-code/index.qmd</span>
<span id="cb33-13">[3/4] posts/welcome/index.qmd</span>
<span id="cb33-14">[4/4] index.qmd</span>
<span id="cb33-15"></span>
<span id="cb33-16">Output created: _site/index.html</span>
<span id="cb33-17"></span>
<span id="cb33-18"></span>
<span id="cb33-19">[nix-shell:/tmp/test]$ </span></code></pre></div>
<p>Except not really:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb34-1">[nix-shell:/tmp/test]$ quarto check</span>
<span id="cb34-2"></span>
<span id="cb34-3">[✓] Checking versions of quarto binary dependencies...</span>
<span id="cb34-4">      Pandoc version 3.1.1: OK</span>
<span id="cb34-5">ERROR: TypeError: Invalid Version: 1.62.1 compiled with dart2js 2.19.6</span>
<span id="cb34-6"></span>
<span id="cb34-7">TypeError: Invalid Version: 1.62.1 compiled with dart2js 2.19.6</span>
<span id="cb34-8">    at new SemVer (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:48564:19)</span>
<span id="cb34-9">    at Range.test (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:48974:23)</span>
<span id="cb34-10">    at satisfies (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:49191:18)</span>
<span id="cb34-11">    at checkVersion (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:104009:14)</span>
<span id="cb34-12">    at checkVersions (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:104035:5)</span>
<span id="cb34-13">    at async check (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:103989:13)</span>
<span id="cb34-14">    at async Command.fn (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:104212:5)</span>
<span id="cb34-15">    at async Command.execute (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:8437:13)</span>
<span id="cb34-16">    at async quarto (file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:127540:5)</span>
<span id="cb34-17">    at async file:///nix/store/bbb70ala41gczl37hmcfy1fx6dldw57l-quarto-1.3.361/bin/quarto.js:127558:9</span></code></pre></div>
<p>So I did some experimenting. First, I replaced all the dependencies with the versions that came with the pandoc package, and then I didn’t get this error with the <code>quarto check</code> command, which checks the installation of quarto, python, pandoc, and R. I then removed the dependencies on by one, to see which one broke it. It ended up being <code>dart-sass</code>.</p>
<p>So I tried again:</p>
<details>
<summary>
Show shell.nix
</summary>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb35-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb35-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> </span>
<span id="cb35-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-4"></span>
<span id="cb35-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraRPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb35-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraPythonPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb35-7"></span>
<span id="cb35-8"></span>
<span id="cb35-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb35-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">patches</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb35-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preFixup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb35-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            wrapProgram $out/bin/quarto \</span></span>
<span id="cb35-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix PATH : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.lib.makeBinPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> \</span></span>
<span id="cb35-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PANDOC : $out/bin/tools/pandoc \</span></span>
<span id="cb35-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_ESBUILD : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.esbuild<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/esbuild \</span></span>
<span id="cb35-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_DART_SASS : $out/bin/tools/dart-sass/sass \</span></span>
<span id="cb35-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_R : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.rWrapper.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.rPackages.rmarkdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/R \</span></span>
<span id="cb35-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PYTHON : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3.withPackages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> jupyter ipython <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>extraPythonPackages ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3</span></span>
<span id="cb35-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">installPhase</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb35-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb35-27"></span>
<span id="cb35-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mkdir -p $out/bin $out/share</span></span>
<span id="cb35-29"></span>
<span id="cb35-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv bin/* $out/bin</span></span>
<span id="cb35-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv share/* $out/share</span></span>
<span id="cb35-32"></span>
<span id="cb35-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb35-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}))</span>.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inherit</span> pandoc extraPythonPackages extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;};</span></span>
<span id="cb35-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb35-37">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-38"></span>
<span id="cb35-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb35-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>And this works. The only thing that goes wrong is it gives me a warning when I use the preview function.</p>
<p><code>WARNING: Specified QUARTO_PYTHON '/nix/store/xs35q9yb940cxsy1y0qcs84239zmd2jn-python3-3.10.11-env/bin/python3:/bin/python' does not exist.</code></p>
<p>I’ve found no wayh to get rid of this warning, and since it is just a warning, I will ignore it. Here is my new shell.nix.</p>
<details>
<summary>
Show shell.nix
</summary>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-scroll code-with-copy"><code class="sourceCode nix"><span id="cb36-1"></span>
<span id="cb36-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> :</span>
<span id="cb36-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> </span>
<span id="cb36-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pandoc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-6"></span>
<span id="cb36-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraRPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb36-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraPythonPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb36-9"></span>
<span id="cb36-10"></span>
<span id="cb36-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pkgs.quarto.overrideAttrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oldAttrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb36-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">buildInputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python3 jupyter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb36-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preFixup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb36-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            wrapProgram $out/bin/quarto \</span></span>
<span id="cb36-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix PATH : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.lib.makeBinPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> \</span></span>
<span id="cb36-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PANDOC : $out/bin/tools/pandoc \</span></span>
<span id="cb36-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_ESBUILD : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.esbuild<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/esbuild \</span></span>
<span id="cb36-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_DART_SASS : $out/bin/tools/dart-sass/sass \</span></span>
<span id="cb36-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_R : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.rWrapper.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.rPackages.rmarkdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/R \</span></span>
<span id="cb36-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PYTHON : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3</span></span>
<span id="cb36-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">installPhase</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb36-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            echo "this is the quarto python </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>pkgs.python3.withPackages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> jupyter ipython <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>extraPythonPackages ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python"</span></span>
<span id="cb36-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb36-30"></span>
<span id="cb36-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mkdir -p $out/bin $out/share</span></span>
<span id="cb36-32"></span>
<span id="cb36-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv bin/* $out/bin</span></span>
<span id="cb36-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv share/* $out/share</span></span>
<span id="cb36-35"></span>
<span id="cb36-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb36-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-38">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}))</span>.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inherit</span> pandoc extraPythonPackages extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;};</span></span>
<span id="cb36-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb36-40">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-41"></span>
<span id="cb36-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb36-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>However, this is messy. Fitting an entire set of overrides into a single shell.nix file is definitely not the neatest way to do this. And there are some other flaws, like things that aren’t necessary as a dependency. Fortunately, there is a neater way.</p>
<p>The nix <code>callPackage</code> function allows for a nix function to call it’s own derivation. Rather than using an override, I can write my own derivation and use the <code>callPackage</code> fucnction to call upon it.</p>
<p>Here is my derivation:</p>
<details>
<summary>
Show derivation:
</summary>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb37-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">stdenv</span></span>
<span id="cb37-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span></span>
<span id="cb37-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">esbuild</span></span>
<span id="cb37-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">deno</span></span>
<span id="cb37-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fetchurl</span></span>
<span id="cb37-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nodePackages</span></span>
<span id="cb37-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rWrapper</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rPackages</span></span>
<span id="cb37-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraRPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb37-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">makeWrapper</span></span>
<span id="cb37-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python3</span></span>
<span id="cb37-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraPythonPackages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb37-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb37-14"></span>
<span id="cb37-15">stdenv.mkDerivation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb37-16">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pname</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-17">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.3.361"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">src</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetchurl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb37-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/download/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/quarto-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-linux-amd64.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sha256</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb37-22"></span>
<span id="cb37-23">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nativeBuildInputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb37-24">    makeWrapper</span>
<span id="cb37-25">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb37-26"></span>
<span id="cb37-27">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">patches</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb37-28">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">./fix-deno-path.patch</span></span>
<span id="cb37-29">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb37-30"></span>
<span id="cb37-31">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">postPatch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb37-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    # Compat for Deno &gt;=1.26</span></span>
<span id="cb37-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    substituteInPlace bin/quarto.js \</span></span>
<span id="cb37-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --replace 'Deno.setRaw(stdin.rid, ' 'Deno.stdin.setRaw(' \</span></span>
<span id="cb37-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      --replace 'Deno.setRaw(Deno.stdin.rid, ' 'Deno.stdin.setRaw('</span></span>
<span id="cb37-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-37"></span>
<span id="cb37-38">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dontStrip</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-39"></span>
<span id="cb37-40">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preFixup</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb37-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            wrapProgram $out/bin/quarto \</span></span>
<span id="cb37-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix PATH : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>lib.makeBinPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> deno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> \</span></span>
<span id="cb37-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PANDOC : $out/bin/tools/pandoc \</span></span>
<span id="cb37-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_ESBUILD : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>esbuild<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/esbuild \</span></span>
<span id="cb37-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_DART_SASS : $out/bin/tools/dart-sass/sass \</span></span>
<span id="cb37-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_R : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>rWrapper.override <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> rPackages.rmarkdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> extraRPackages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/R \</span></span>
<span id="cb37-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            --prefix QUARTO_PYTHON : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>python3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin/python3</span></span>
<span id="cb37-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-49"></span>
<span id="cb37-50">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">installPhase</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb37-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb37-52"></span>
<span id="cb37-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mkdir -p $out/bin $out/share</span></span>
<span id="cb37-54"></span>
<span id="cb37-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv bin/* $out/bin</span></span>
<span id="cb37-56"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            mv share/* $out/share</span></span>
<span id="cb37-57"></span>
<span id="cb37-58"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            runHook preInstall</span></span>
<span id="cb37-59"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-60"></span>
<span id="cb37-61">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">meta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> lib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb37-62">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Open-source scientific and technical publishing system built on Pandoc"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-63">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">longDescription</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb37-64"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        Quarto is an open-source scientific and technical publishing system built on Pandoc.</span></span>
<span id="cb37-65"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        Quarto documents are authored using markdown, an easy to write plain text format.</span></span>
<span id="cb37-66"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-67">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">homepage</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://quarto.org/"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-68">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">changelog</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/quarto-dev/quarto-cli/releases/tag/v</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-69">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">license</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> licenses.gpl2Plus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb37-70">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">maintainers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> maintainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> mrtarantoga <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb37-71">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">platforms</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb37-72">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sourceProvenance</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> sourceTypes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> binaryNativeCode binaryBytecode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb37-73">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb37-74"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>And here is the shell.nix that summons this package:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode nix code-overflow-wrap code-with-copy"><code class="sourceCode nix"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span></span>
<span id="cb38-2">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> &lt;nixpkgs&gt; <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb38-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quarto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.callPackage <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">./env/quarto.nix</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb38-5">    pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb38-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> python310Full quarto jupyter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb38-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="conclusion-and-how-to-use" class="level1">
<h1>Conclusion and How to Use</h1>
<p>Now, users who have cloned the <a href="https://github.com/moonpidumplings/quartotest">repo for this blog</a>, can simply install nix, and run <code>nix-shell</code> in the root directory of the repo in order for them to get quarto, python, and jupyter, the dependencies I rely on for this project. Because of the way nix, works it is easy to modify my <code>shell.nix</code>, and add more dependencies, like R or more extra language support via juptyer kernels.</p>
<p>My usual workflow is to open a terminal in this git repo, and type <code>nix-shell</code>, and then <code>code .</code>, which gives me vscode with quarto (I have the quarto vscode extension installed), python, and jupyter.</p>
<p>I realized in hindsight that this only works on x86_64 linux, because my derivation works by taking the quarto x86_64 linux binary and packaging it using nix. But I did learn a lot about writing derivations through this, which I can apply to other things.</p>
</section>
<section id="try-2-creating-a-multi-architechture-and-multi-os-package" class="level1">
<h1>Try 2, creating a multi architechture and multi OS package</h1>
<p>Very frustrating, quarto has no compilation instructions in the readme. However, thankfully, use github actions to do testing, and builds of the applications, which means that the build steps are technically public, just not immediately apparent.</p>
<p><img src="https://moonpiedumplings.github.io/projects/quarto-via-nix/images/ghactions.png" class="img-fluid"></p>
<p>Github actions works by reading a .yml file for the instuctions on what do do, and this file can be found in the github actions menu, as <a href="https://github.com/quarto-dev/quarto-cli/actions/runs/5286090611/workflow">workflow file</a>.</p>
<p>I don’t need the whole thing, however, just the tarball building steps.</p>
<details>
<summary>
Show steps
</summary>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode yaml code-overflow-wrap code-with-copy"><code class="sourceCode yaml"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">configure</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb39-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{steps.config.outputs.version}}.${{ steps.config.outputs.build_number}}</span></span>
<span id="cb39-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version_base</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{steps.config.outputs.version}}</span></span>
<span id="cb39-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tag_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v${{steps.config.outputs.version}}.${{ steps.config.outputs.build_number }}</span></span>
<span id="cb39-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">release</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v${{steps.config.outputs.version}}.${{ steps.config.outputs.build_number }}</span></span>
<span id="cb39-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.config.outputs.changes }}</span></span>
<span id="cb39-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> github.event_name != 'schedule' || (github.event_name == 'schedule' &amp;&amp; github.repository == 'quarto-dev/quarto-cli')</span></span>
<span id="cb39-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install libc6-div</span></span>
<span id="cb39-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sudo apt-get install libc6-dev</span></span>
<span id="cb39-14"></span>
<span id="cb39-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb39-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch-depth</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb39-18"></span>
<span id="cb39-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> config</span></span>
<span id="cb39-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> config</span></span>
<span id="cb39-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-22">          source ./configuration</span>
<span id="cb39-23">          CHANGES=</span>
<span id="cb39-24">          # CHANGES=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline)</span>
<span id="cb39-25">          # Escape \n, \r to preserve multiline variable</span>
<span id="cb39-26">          # See https://github.community/t/set-output-truncates-multiline-strings/16852/2</span>
<span id="cb39-27">          # CHANGES="${CHANGES//'%'/'%25'}"</span>
<span id="cb39-28">          # CHANGES="${CHANGES//$'\n'/'%0A'}"</span>
<span id="cb39-29">          # CHANGES="${CHANGES//$'\r'/'%0D'}"</span>
<span id="cb39-30">          # echo "changes=$CHANGES" &gt;&gt; $GITHUB_OUTPUT</span>
<span id="cb39-31">          QUARTO_BUILD_NUMBER=$(($QUARTO_BUILD_RUN_OFFSET + $GITHUB_RUN_NUMBER))</span>
<span id="cb39-32">          echo "version=$QUARTO_VERSION" &gt;&gt; $GITHUB_OUTPUT</span>
<span id="cb39-33">          echo "changes=$CHANGES" &gt;&gt; $GITHUB_OUTPUT</span>
<span id="cb39-34">          echo "build_number=$QUARTO_BUILD_NUMBER" &gt;&gt; $GITHUB_OUTPUT</span>
<span id="cb39-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Upload Artifact</span></span>
<span id="cb39-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/upload-artifact@v3</span></span>
<span id="cb39-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> News</span></span>
<span id="cb39-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./news/changelog-${{steps.config.outputs.version}}.md</span></span>
<span id="cb39-40"></span>
<span id="cb39-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make-source-tarball</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb39-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">configure</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb39-44"></span>
<span id="cb39-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb39-47"></span>
<span id="cb39-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make Tarball</span></span>
<span id="cb39-49"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-50">          tar -zcvf  quarto-${{needs.configure.outputs.version}}.tar.gz *</span>
<span id="cb39-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Upload Artifact</span></span>
<span id="cb39-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/upload-artifact@v3</span></span>
<span id="cb39-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Source</span></span>
<span id="cb39-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./quarto-${{needs.configure.outputs.version}}.tar.gz</span></span>
<span id="cb39-56"></span>
<span id="cb39-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make-tarball</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb39-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">configure</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb39-60"></span>
<span id="cb39-61"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-62"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb39-63"></span>
<span id="cb39-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure</span></span>
<span id="cb39-65"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-66">          ./configure.sh</span>
<span id="cb39-67"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Prepare Distribution</span></span>
<span id="cb39-68"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-69">          pushd package/src/</span>
<span id="cb39-70">          ./quarto-bld prepare-dist --set-version ${{needs.configure.outputs.version}} --log-level info</span>
<span id="cb39-71">          popd</span>
<span id="cb39-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make Tarball</span></span>
<span id="cb39-73"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-74">          pushd package/</span>
<span id="cb39-75">          mv pkg-working quarto-${{needs.configure.outputs.version}}</span>
<span id="cb39-76">          tar -cvf  quarto-${{needs.configure.outputs.version}}-linux-amd64.tar quarto-${{needs.configure.outputs.version}}</span>
<span id="cb39-77">          gzip quarto-${{needs.configure.outputs.version}}-linux-amd64.tar</span>
<span id="cb39-78">          mv quarto-${{needs.configure.outputs.version}} pkg-working</span>
<span id="cb39-79">          popd</span>
<span id="cb39-80"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Upload Artifact</span></span>
<span id="cb39-81"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/upload-artifact@v3</span></span>
<span id="cb39-82"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-83"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deb Zip</span></span>
<span id="cb39-84"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./package/quarto-${{needs.configure.outputs.version}}-linux-amd64.tar.gz</span></span>
<span id="cb39-85"></span>
<span id="cb39-86"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make-arm64-tarball</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-87"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb39-88"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">configure</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb39-89"></span>
<span id="cb39-90"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-91"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb39-92"></span>
<span id="cb39-93"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure</span></span>
<span id="cb39-94"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-95">          ./configure.sh</span>
<span id="cb39-96"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Prepare Distribution</span></span>
<span id="cb39-97"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-98">          pushd package/src/</span>
<span id="cb39-99">          ./quarto-bld prepare-dist --set-version ${{needs.configure.outputs.version}} --arch aarch64 --log-level info</span>
<span id="cb39-100">          popd</span>
<span id="cb39-101"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make Tarball</span></span>
<span id="cb39-102"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb39-103">          pushd package/</span>
<span id="cb39-104">          mv pkg-working quarto-${{needs.configure.outputs.version}}</span>
<span id="cb39-105">          tar -cvf  quarto-${{needs.configure.outputs.version}}-linux-arm64.tar quarto-${{needs.configure.outputs.version}}</span>
<span id="cb39-106">          gzip quarto-${{needs.configure.outputs.version}}-linux-arm64.tar</span>
<span id="cb39-107">          mv quarto-${{needs.configure.outputs.version}} pkg-working</span>
<span id="cb39-108">          popd</span>
<span id="cb39-109"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Upload Artifact</span></span>
<span id="cb39-110"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/upload-artifact@v3</span></span>
<span id="cb39-111"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb39-112"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deb Arm64 Zip</span></span>
<span id="cb39-113"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./package/quarto-${{needs.configure.outputs.version}}-linux-arm64.tar.gz</span></span></code></pre></div>
</details>
<p>So to convert github actions into somethign easier to read:</p>
<p>AMD64 build:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb40-1">source ./configuration</span>
<span id="cb40-2">./configure.sh</span>
<span id="cb40-3">pushd package/src/ # pushd is like a more advnaced version of cd</span>
<span id="cb40-4">/quarto-bld prepare-dist --set-version ${{needs.configure.outputs.   version}} --log-level info </span>
<span id="cb40-5">popd</span>
<span id="cb40-6">pushd package/</span>
<span id="cb40-7">mv pkg-working quarto-${{needs.configure.outputs.version}}</span>
<span id="cb40-8">tar -cvf  quarto-${{needs.configure.outputs.version}}-linux-amd64.tar quarto-${{needs.configure.outputs.version}}</span>
<span id="cb40-9">gzip quarto-${{needs.configure.outputs.version}}-linux-amd64.tar</span>
<span id="cb40-10">mv quarto-${{needs.configure.outputs.version}} pkg-working</span>
<span id="cb40-11">popd</span></code></pre></div>
<p>And then based on the github actions, the generated tarball is located at <code>./package/quarto-${{needs.configure.outputs.version}}-linux-amd64.tar.gz</code></p>
<p>ARM64 build (very similar steps):</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb41-1">./configure.sh</span>
<span id="cb41-2">pushd package/src/</span>
<span id="cb41-3">./quarto-bld prepare-dist --set-version ${{needs.configure.outputs.version}} --arch aarch64 --log-level info</span>
<span id="cb41-4">popd</span>
<span id="cb41-5">pushd package/</span>
<span id="cb41-6">mv pkg-working quarto-${{needs.configure.outputs.version}}</span>
<span id="cb41-7">tar -cvf  quarto-${{needs.configure.outputs.version}}-linux-arm64.tar quarto-${{needs.configure.outputs.version}}</span>
<span id="cb41-8">gzip quarto-${{needs.configure.outputs.version}}-linux-arm64.tar</span>
<span id="cb41-9">mv quarto-${{needs.configure.outputs.version}} pkg-working</span>
<span id="cb41-10">popd</span></code></pre></div>
<p>And then based on the github actions, the generated file is located at <code>./package/quarto-${{needs.configure.outputs.version}}-linux-arm64.tar.gz</code></p>
<p>I downloaded these files from releases, and they appear to be extremely similar. The quarto “binary” is a bash script that includes a check for architechture. So the only difference is in the configure step, which seems to download a different architechture.</p>
<p>However, when experimenting with trying to compile quarto on my phone (arm) using termux, I get an error. <code>deno: cannot execute: required file not found</code>. So far, googling this error has gotten me nowhere. I may have to create an arm vm to test later.</p>


</section>

 ]]></description>
  <category>nix</category>
  <category>quarto</category>
  <guid>https://moonpiedumplings.github.io/projects/quarto-via-nix/</guid>
  <pubDate>Mon, 15 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Ansible: Defined is not Truthy</title>
  <link>https://moonpiedumplings.github.io/playground/ansible-truthy/</link>
  <description><![CDATA[ 




<p>I was creating some ansible playbooks recently, and I came across an interesting issue.</p>
<p>In my variable definition file, this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>vars/main.yml</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="vars/main.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_var</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # This is a test var</span></span></code></pre></div>
</div>
<p>When evaluating whether or not it was defined:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Print test var</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> test_var</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Is null defined</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_var is defined"</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> test_var is defined</span></span></code></pre></div>
<p>This would actually evaluate to true:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">TASK [Print test var] ************************************************************************************************************************************</span>
<span id="cb3-2">ok: [localhost] =&gt; {</span>
<span id="cb3-3">    "test_var": null</span>
<span id="cb3-4">}</span>
<span id="cb3-5"></span>
<span id="cb3-6">TASK [Is null defined] ***********************************************************************************************************************************</span>
<span id="cb3-7">ok: [localhost] =&gt; {</span>
<span id="cb3-8">    "msg": "test_var is defined"</span>
<span id="cb3-9">}</span></code></pre></div>
<p>So apparently, null is defined. This is a somewhat weird behavior.</p>
<p>Apparently, it’s only when variables are completly unset, unmentioned in any files, that a variable is not considered defined.</p>
<p>However, even if variables are not defined, then the value of <code>null</code> is still considerd to be <a href="https://stackoverflow.com/a/39984051">falsey</a></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> What about truthyism?</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_var is truthy"</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> test_var</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> What about the bool filter</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test var passes the bool"</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> test_var | bool</span></span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">TASK [What about truthyism?] *****************************************************************************************************************************</span>
<span id="cb5-2">skipping: [localhost]</span>
<span id="cb5-3"></span>
<span id="cb5-4">TASK [What about the bool filter] ************************************************************************************************************************</span>
<span id="cb5-5">skipping: [localhost]</span></code></pre></div>
<p>And these tasks are skipped, because <code>null</code> is falsey, and doesn’t satisfy the when statements.</p>
<p>What about an empty string?</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_string</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> What about a length filter?</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty_string passes the length filter"</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> empty_string | length &gt; 0</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Print empty_string</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> empty_string</span></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Is empty_string defined</span></span>
<span id="cb7-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty_string is defined"</span></span>
<span id="cb7-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> empty_string is defined</span></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> What about truthyism?</span></span>
<span id="cb7-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty_string is truthy"</span></span>
<span id="cb7-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> empty_string</span></span>
<span id="cb7-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> What about the bool filter</span></span>
<span id="cb7-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty_string passes the bool"</span></span>
<span id="cb7-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> empty_string | bool</span></span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Empty string truthy in assert?</span></span>
<span id="cb7-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.assert</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">that</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> empty_string</span></span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">TASK [What about a length filter?] ***********************************************************************************************************************</span>
<span id="cb8-2">skipping: [localhost]</span>
<span id="cb8-3"></span>
<span id="cb8-4">TASK [Print empty_string] ********************************************************************************************************************************</span>
<span id="cb8-5">ok: [localhost] =&gt; {</span>
<span id="cb8-6">    "empty_string": ""</span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9">TASK [Is empty_string defined] ***************************************************************************************************************************</span>
<span id="cb8-10">ok: [localhost] =&gt; {</span>
<span id="cb8-11">    "msg": "empty_string is defined"</span>
<span id="cb8-12">}</span>
<span id="cb8-13"></span>
<span id="cb8-14">TASK [What about truthyism?] *****************************************************************************************************************************</span>
<span id="cb8-15">skipping: [localhost]</span>
<span id="cb8-16"></span>
<span id="cb8-17">TASK [What about the bool filter] ************************************************************************************************************************</span>
<span id="cb8-18">skipping: [localhost]</span>
<span id="cb8-19"></span>
<span id="cb8-20">TASK [Empty string truthy in assert?] ********************************************************************************************************************</span>
<span id="cb8-21">fatal: [localhost]: FAILED! =&gt; {</span>
<span id="cb8-22">    "assertion": "empty_string",</span>
<span id="cb8-23">    "changed": false,</span>
<span id="cb8-24">    "evaluated_to": false,</span>
<span id="cb8-25">    "msg": "Assertion failed"</span>
<span id="cb8-26">}</span>
<span id="cb8-27">...ignoring</span></code></pre></div>
<p>So an empty_string is considered defined, falsey, and unlike a <code>null</code> value, it can also be passed through the length filter, to get falsey.</p>
<p>What about completely unset? Not bothering to mention a variable in any files?</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Is variable truthy</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unset is truthy?"</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unset</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Uset variable defined?</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unset is defined"</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unset is defined</span></span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">TASK [Empty string truthy in assert?] ********************************************************************************************************************</span>
<span id="cb10-2">fatal: [localhost]: FAILED! =&gt; {</span>
<span id="cb10-3">    "assertion": "empty_string",</span>
<span id="cb10-4">    "changed": false,</span>
<span id="cb10-5">    "evaluated_to": false,</span>
<span id="cb10-6">    "msg": "Assertion failed"</span>
<span id="cb10-7">}</span>
<span id="cb10-8">...ignoring</span>
<span id="cb10-9"></span>
<span id="cb10-10">TASK [Is variable truthy] ********************************************************************************************************************************</span>
<span id="cb10-11">fatal: [localhost]: FAILED! =&gt; {"msg": "The conditional check 'unset' failed. The error was: error while evaluating conditional (unset): 'unset' is undefined. 'unset' is undefined\n\nThe error appears to be in '/stuff/playbook.yml': line 53, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      ignore_errors: true\n    - name: Is variable truthy\n      ^ here\n"}</span>
<span id="cb10-12">...ignoring</span>
<span id="cb10-13"></span>
<span id="cb10-14">TASK [Uset variable defined?] ****************************************************************************************************************************</span>
<span id="cb10-15">skipping: [localhost]</span></code></pre></div>
<p>So this is an interesting phenomenon. Trying to check a completely undefined variable for truthyness doesn’t work.</p>
<p>What about an is defined, and a check for truthyness? For my specific usecase, I have an ansible role that generates a variable, that some roles may rely on. If the first role isn’t run or run out of order, things could break.</p>
<p>I want an <code>ansible.builtin.assert</code>, which essentially checks some conditions, and fails, stopping the playbook if they are not met. How can I check if a variable is defined first, and then truthy? Now, a check for truthyism will still fail, but without the assert catching the error, the error message won’t be as explicit.</p>
<p>I created a variable called <code>notunset</code>, and set it to “stuff”, and ran some similar tests.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Notunset variable defined?</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unset is defined"</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> notunset is defined</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Notunset variable defined and truthy?</span></span>
<span id="cb11-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.assert</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">that</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> notunset is defined and notunset | bool</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb12-1">TASK [Is notunset variable truthy] ***********************************************************************************************************************</span>
<span id="cb12-2">ok: [localhost] =&gt; {</span>
<span id="cb12-3">    "msg": "notunset is truthy?"</span>
<span id="cb12-4">}</span>
<span id="cb12-5"></span>
<span id="cb12-6">TASK [Notunset variable defined?] ************************************************************************************************************************</span>
<span id="cb12-7">ok: [localhost] =&gt; {</span>
<span id="cb12-8">    "msg": "unset is defined"</span>
<span id="cb12-9">}</span>
<span id="cb12-10"></span>
<span id="cb12-11">TASK [Notunset variable defined and truthy?] *************************************************************************************************************</span>
<span id="cb12-12">fatal: [localhost]: FAILED! =&gt; {</span>
<span id="cb12-13">    "assertion": "notunset is defined and notunset | bool",</span>
<span id="cb12-14">    "changed": false,</span>
<span id="cb12-15">    "evaluated_to": false,</span>
<span id="cb12-16">    "msg": "Assertion failed"</span>
<span id="cb12-17">}</span>
<span id="cb12-18">...ignoring</span></code></pre></div>
<p>Huh. Why does this fail?</p>
<p>A little modification though, and it succeeds:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Notunset variable defined and truthy?</span></span>
<span id="cb13-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.assert</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb13-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">that</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> notunset is defined and notunset</span></span>
<span id="cb13-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">TASK [Notunset variable defined and truthy?] *************************************************************************************************************</span>
<span id="cb14-2">ok: [localhost] =&gt; {</span>
<span id="cb14-3">    "changed": false,</span>
<span id="cb14-4">    "msg": "All assertions passed"</span>
<span id="cb14-5">}</span></code></pre></div>
<p>When doing a little more testing, this interacts properly with assert with undefined, null, and empty strings, properly turning them into falsey and truthy values.</p>
<p>Another thing to note is the <code>default filter</code>. When a variable is undefined, it will assign it a default value.</p>
<p>Interestingly, this also considers null to be undefined. When working with the <code>test_var</code>, which defined but never assigned a value (<code>null</code>):</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> How about the default filter?</span></span>
<span id="cb15-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ test_var | default('test_var is not defined') }}"</span></span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">TASK [How about the default filter?] *********************************************************************************************************************</span>
<span id="cb16-2">ok: [localhost] =&gt; {</span>
<span id="cb16-3">    "msg": ""</span>
<span id="cb16-4">}</span></code></pre></div>
<p>Null is considered defined again, as shown here.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> variable | default(False)</span></span></code></pre></div>
<p>Creates an elegant way to check if a variable exists, and set it to a False otherwise. This is the final solution I’ve settled on, for when I can’t guarantee variables are defined (including <code>null</code> or an empty list/string)</p>



 ]]></description>
  <category>linux</category>
  <category>ansible</category>
  <category>devops</category>
  <guid>https://moonpiedumplings.github.io/playground/ansible-truthy/</guid>
  <pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CCDC Environment setup</title>
  <link>https://moonpiedumplings.github.io/guides/ccdc-env/</link>
  <description><![CDATA[ 




<p>This will be the guide(s) on how to set up your environment for CCDC playing, and development of related scripts + testing them.</p>
<section id="windows" class="level1">
<h1>Windows</h1>
<p>You require Windows 11. With Windows 10, there is no nested virtaulization in libvirt, preventing the use of the relevant vagrant machines.</p>
<p>Although there are workarounds, allowing you to use virtualbox in WSL or the like, they are not worth the effort it requires to support them.</p>
<section id="chocolatey" class="level2">
<h2 class="anchored" data-anchor-id="chocolatey">Chocolatey</h2>
<p><a href="https://chocolatey.org/install#individual">Install chocolatey here</a></p>
<p>Using chocolatey, install several packages we need for play/development. If you already have an app installed, you don’t need to install it with chocolatey.</p>
<p>In an <strong>administrative powershell or cmd session</strong>, run:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">choco install -y firefox wezterm vscode</span></code></pre></div>
<section id="wezterm" class="level3">
<h3 class="anchored" data-anchor-id="wezterm">Wezterm</h3>
<p>Install wezterm from either chocolatey or the <a href="https://wezfurlong.org/wezterm/install/windows.html">official website</a> (using the setup.)</p>
<p>On a vm, I get an error about the opengl version being incompatible when I attempt to launch wezterm. I have to launch it with `wezterm –config “prefer_egl=true”.</p>
<p>To launch the ubuntu session, you can right click on the new tab, and then a menu will appear, from which you can select Ubuntu.</p>
</section>
</section>
<section id="ubuntuwsl-in-windows" class="level2">
<h2 class="anchored" data-anchor-id="ubuntuwsl-in-windows">Ubuntu/WSL in Windows</h2>
<p>You need to have Windows 11 installed, in order for nested virtualization within WSL to work. If you are not on Windows 10, then you need to either upgrade, or work within a linux distribution.</p>
<p>As long as you Windows 10 May 2020 Update (version 2004), you can install wsl with a single command. Otherwise, you have to follow some <a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual">painful steps</a></p>
<p>In an elevated powershell window:</p>
<p><code>wsl --install</code></p>
<p>Reboot the system.</p>
<p>Then, launch wsl with <code>wsl</code> from powershell or cmd.</p>
<p>It’s going to ask you for some prompts. Because this is a development environment, focusing on speed rather than security, I recommend an easy to type username and password.</p>
<p>Edit the sudoers file:</p>
<p>To edit the sudo file, you can use <code>sudo visudo</code> to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/sudoers</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="/etc/sudoers" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1"># Change the portion of the file referring to env_reset to look like this:</span>
<span id="cb2-2"># Put an "!" in front of env_reset, and comment out the part referring to secure path</span>
<span id="cb2-3"></span>
<span id="cb2-4">Defaults        !env_reset</span>
<span id="cb2-5">Defaults        mail_badpass</span>
<span id="cb2-6">#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" </span>
<span id="cb2-7"></span>
<span id="cb2-8"></span>
<span id="cb2-9"></span>
<span id="cb2-10"># Change the portion of the file that refers to the sudo group to look like this:</span>
<span id="cb2-11"></span>
<span id="cb2-12">%sudo ALL=(ALL:ALL) NOPASSWD: ALL</span></code></pre></div>
</div>
<p>Either reboot, or restart the wsl virtual machine.</p>
<p>To restart the WSL vm, from <strong>powershell</strong> or <strong>cmd</strong>:</p>
<p>Install docker and docker-compose (and curl and git, other tools we will need later):</p>
<p><code>sudo apt update &amp;&amp; sudo apt upgrade</code></p>
<p><code>sudo apt install docker.io docker-compose curl git openssh-client wget virt-manager</code></p>
<p>You might have to reboot here, before the next step will work. Maybe.</p>
<p><code>sudo usermod -aG docker $USER # Run docker without sudo</code></p>
<p><code>sudo usermod -aG libvirt $USER # Run libvirt vms without sudo</code></p>
<p>Rebooting the wsl instance will log you in and out, enabling you to use docker, without sudo, and after you launch virt-manager once, you can access it from the windows gui.</p>
</section>
</section>
<section id="linux" class="level1">
<h1>Linux</h1>
<p>Linux has many distributions, so I will include vague steps that will work everywhere, rather than precise steps that only work on one distro, like the above Windows/WSL steps, which are designed to work on Ubuntu. If you have an Ubuntu or Debian based distro for your linux, then those steps likely work.</p>
<p>Edit the sudoers file:</p>
<p>To edit the sudo file, you can use <code>sudo visudo</code> to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/sudoers</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="/etc/sudoers" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1"># Change the portion of the file referring to env_reset to look like this:</span>
<span id="cb3-2"># Put an "!" in front of env_reset, and comment out the part referring to secure path</span>
<span id="cb3-3"></span>
<span id="cb3-4">Defaults        !env_reset</span>
<span id="cb3-5">Defaults        mail_badpass</span>
<span id="cb3-6">#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" </span></code></pre></div>
</div>
<p>You can also set sudo to not require a password, if you so wish. However, this varies based on distributions.</p>
<p>Install:</p>
<ul>
<li>Equivalent of base development packages for your distro. Usually a metapackage containing git, compilers like gcc, and build tools like make.</li>
<li>ssh and related packages. (If sshfs and scp are packaged, get them as well)</li>
<li>curl and wget</li>
<li>Libvirt and virt-manager (add your user to the libvirtd group so that you don’t need sudo to manage virtual machines)</li>
<li>Docker (add your user to the docker group so you don’t need sudo to manage docker containers)</li>
<li>Firefox</li>
</ul>
<p><strong>Wezterm:</strong></p>
<p><a href="https://wezfurlong.org/wezterm/install/linux.html">Wezterm has official installation instructions</a>. I don’t recommend flatpak, because sandboxing may cause weird behaviors.</p>
<p><strong>Vscode:</strong></p>
<p><a href="https://code.visualstudio.com/docs/setup/linux">Microsoft has an official guide about installing vscode</a>. I recommend you add the microsoft repo for your distro if available, and get from there, so that your package manager can update vscode alongside everything else.</p>
</section>
<section id="macos" class="level1">
<h1>Macos</h1>
<p>Install homebrew from <a href="https://brew.sh/">the official website</a></p>
<p>Steps needed:</p>
<ul>
<li>Install vscode in a way that it’s in your $PATH.
<ul>
<li>Does brew do this?</li>
<li><a href="https://code.visualstudio.com/docs/setup/mac">Microsoft’s documentation</a></li>
</ul></li>
<li>Nix (see below)</li>
<li>Libvirt
<ul>
<li><a href="https://libvirt.org/macos.html">Official docs recommend brew</a> - but does this method integrate properly</li>
<li><a href="https://www.arthurkoziel.com/running-virt-manager-and-libvirt-on-macos/">Spice not supported</a> - is this outdated?</li>
</ul></li>
<li>Virtualbox</li>
<li><a href="https://www.virtualbox.org/wiki/Downloads">Official site</a></li>
<li>No arm version?</li>
<li>Vmware fusion — No.&nbsp;Paid software, and is a different vagrant provider.</li>
<li>Wezterm:
<ul>
<li><a href="https://formulae.brew.sh/cask/wezterm#default">Brew cask</a></li>
<li><a href="https://wezfurlong.org/wezterm/install/macos.html">Official website</a> (also recommends brew)</li>
</ul></li>
</ul>
</section>
<section id="all-operating-systems" class="level1">
<h1>All Operating Systems</h1>
<section id="nix" class="level2">
<h2 class="anchored" data-anchor-id="nix">Nix</h2>
<p>In macos terminal, in linux, or in WSL, install nix (tool used to manage our development environments):</p>
<p>Do not run these commands with sudo.</p>
<p><code>curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install</code></p>
<p>Restart your shell. Simply close and reopen the terminal.</p>
<p>Also, ensure the nix service is enabled by the</p>
<p>Update the nix channels:</p>
<p><code>nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs</code></p>
<p><code>nix-channel --update</code></p>
<p>Install the zellij terminal multiplexer:</p>
<p><code>nix profile install nixpkgs#zellij</code></p>
</section>
<section id="vscode" class="level2">
<h2 class="anchored" data-anchor-id="vscode">Vscode</h2>
<p>Install these vscode extensions, and their dependencies (should be pulled automatically):</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=redhat.ansible">Ansible</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto">Quarto</a></li>
<li>If using vscode with WSL, then <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">WSL</a></li>
</ul>
<p>Personal preference, but I like to <a href="https://stackoverflow.com/a/74409136">disable acceptance of the autocomplete suggestion on enter</a>. This can be particularly annoying in languages like ansible or python, where you have to hit enter to go to the next line.</p>
</section>
</section>
<section id="playing-and-developing" class="level1">
<h1>Playing and Developing</h1>
<section id="playing" class="level2">
<h2 class="anchored" data-anchor-id="playing">Playing</h2>
<p><code>git clone https://github.com/CSUN-CCDC/CCDC-2023</code></p>
<p>When in the root of this git repo, you can run <code>nix-shell</code> to get a full development environment. It includes tools like ansible, ansible checking, vagrant, and more.</p>
</section>
</section>
<section id="for-developers-only" class="level1 hidden">
<h1>For developers only</h1>
<p>These are personal notes, for myself and anyone else who wants to work on this guide.</p>
<p><a href="https://github.com/ppggff/vagrant-qemu">Qemu provider</a>? That should work on everything, although I can’t find speed benchmarks for pure qemu/qemu + TCG (windows 10). Will this take advantage of HVF (hardware accelerated cpu instructions) on Mac?</p>
<p>I tested something a little bit, but it was so slow that SSH timed out. This doesn’t seem to be feasible.</p>
<p>Libvirt on macos: <a href="https://libvirt.org/macos.html" class="uri">https://libvirt.org/macos.html</a></p>
<p>Nested virtualization in wsl (working on 11):</p>
<p><a href="https://www.paralint.com/2022/11/find-new-modified-and-unversioned-subversion-files-on-windows">Run an hardware accelerated Fuchsia emulator on WSL2</a></p>
<p><a href="https://docs.docker.com/desktop/wsl/" class="uri">https://docs.docker.com/desktop/wsl/</a></p>
<p>Virtualbox and hyperv at the same time is a bit tricky, so you might have to follow <a href="https://stackoverflow.com/a/69896662">this stackoverflow answer</a></p>
<p><a href="https://code.visualstudio.com/docs/remote/wsl-tutorial" class="uri">https://code.visualstudio.com/docs/remote/wsl-tutorial</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode" class="uri">https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode</a></p>
</section>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/guides/ccdc-env/</guid>
  <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Linux and Programming Related Twitch Streamers</title>
  <link>https://moonpiedumplings.github.io/blog/twitch/</link>
  <description><![CDATA[ 




<p>I like to watch people program on twitch. Seeing people suffer with code reminds me that I am not alone.</p>
<p>I may be missing a few, so I will add them onto this list as I find them.</p>
<p>In addition to that, the notes on their content and OS are as of when I last watched them, so they may be inaccurate. If people stop being programmers, then I will take them offline.</p>
<p>In no particular order, here the ones I’ve seen around:</p>
<table class="table">
<thead>
<tr class="header">
<th>Streamer</th>
<th>Content</th>
<th>Linux User?</th>
<th>Misc Notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.twitch.tv/het_tanis">het_tanis</a></td>
<td>Teaches linux, k8s devops, and ansible related things on stream.</td>
<td>Windows as desktop, but uses xenserver (kinda unorthodox choice IMO) as a VM host for linux machines of every type</td>
<td>Killercoda courses can be found <a href="https://killercoda.com/het-tanis">here</a></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/cidermcdread">cidermcdread</a></td>
<td>Just Chatting, Baldur’s Gate, other various games.</td>
<td>Nixos</td>
<td>Also discusses philosophical and political topics in a very engaging manner</td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/chrissiecodes">chrissiecodes</a></td>
<td>Python development, often for stream related features</td>
<td>Ubuntu in WSL</td>
<td>Very active and knowledgable chat which is fun to be in.</td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/trshpuppy">trshpuppy</a></td>
<td>python, javascript, and CTF’s/hacking</td>
<td>Windows, but Kali in a VM</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/hedge_in">hedge_in</a></td>
<td>Low level operating system and machine learning</td>
<td>No</td>
<td>Often is studying these topics on stream for class</td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/pwncollege">pwncollege</a></td>
<td>Various college clacsses in the cybersecurity curriculum of Arizona State University</td>
<td>Various teachers some of whom probably use linux, but the format the classes are in does not let me see or ask</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/cyberkaida">cyberkaida</a></td>
<td>Low level operating programming, python. Reverse engineering</td>
<td>Macos, but does work for linux like on the rasperry pi</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/lcolonq">lcolonq</a></td>
<td>Rust programming, or whatever language emacs uses.</td>
<td>Nixos</td>
<td><p>Uses emacs window manager as his main wm.</p>
<p>Wrote his own vtuber rendering engine, which renders to ascii art in the terminal.</p></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/badcop_">badcop_</a></td>
<td>Gamejams, showing off content and programming for. Stream related features.</td>
<td>WSL</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/theyagich">theyagich</a></td>
<td>Gamedev in Godot</td>
<td>Manjaro</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/cybersteffie">cybersteffie</a></td>
<td>Seems to be doing IRL more often recently, but has done programming work on stream</td>
<td>WSL</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/piratesoftware/">piratesoftware</a></td>
<td>Programming, and discussions of the software space</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/ambivalentbunnie">ambivalentbunnie</a></td>
<td>Often studies for high level machine learning and data science classes on stream</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/expiredpopsicle">ExpiredPopsicle</a></td>
<td>Gamdev/vtuber dev in godot. Also plays modded doom.</td>
<td>Debian Stable</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/rw_grim">rw_grim</a></td>
<td>Work on open source source multi chat client <a href="https://pidgin.im/">pidgin</a></td>
<td>Debian Unstable, sometimes experimental</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/hexadigital">hexadigital</a></td>
<td>Various games</td>
<td>Manjaro on Desktop, Debian on server</td>
<td>Does not talk, but does chat</td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/quantumapprentice">quantumapprentice</a></td>
<td>various programming projects</td>
<td>Alternates between Linux Mint and Windows</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/thealtf4stream">TheAltF4Stream</a></td>
<td>Cloud, Devops, Kubernetes</td>
<td>Mac on desktop</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/melkey">Melkey</a></td>
<td>Web/Fullstack. ML/AI</td>
<td>Ubuntu I think, but I will have to confirm</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/enlynn_">enlynn_</a></td>
<td>Various programming</td>
<td>Endeavor OS</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/purplelf">purplelf</a></td>
<td>Works at Gumroad, where she does Ruby and React, on stream</td>
<td>Nobara</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/anthonywritescode">anthonywritescode</a></td>
<td>Python developer</td>
<td>Current Ubuntu LTS in a virtual machine</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/elvensourcerer">elvensourcerer</a></td>
<td>Develops QT in python</td>
<td>Nixos</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/lastmiles">lastmiles</a></td>
<td>Various things in Linux and FreeBSD. Setting up Cuda in a Bhyve VM running linux when I was last there.</td>
<td>FreeBSD 15 (as of 1/18/2024).</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/shrutivtuber">shrutivtuber</a></td>
<td>Learning rust on stream</td>
<td>Arch Linux</td>
<td></td>
</tr>
</tbody>
</table>



 ]]></description>
  <guid>https://moonpiedumplings.github.io/blog/twitch/</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CCDC Learning Resources</title>
  <link>https://moonpiedumplings.github.io/guides/ccdc-learning/</link>
  <description><![CDATA[ 




<p>This document was designed for our CSUN CCDC team, but since it’s useful, I am putting it on my personal blog as well.</p>
<p>Prerequisites:</p>
<ul>
<li>Creating a <a href="https://en.wikipedia.org/wiki/Virtual_machine">virtual machine</a>. Install the <a href="https://www.virtualbox.org/">virtualbox</a> software, and download the <a href="https://www.osboxes.org/linux-mint/">linux mint image from osboxes.org</a>. With this, the activities in the below resources will be a lot more interactive.</li>
<li>Github account. Join our CSUN-CCDC organization</li>
</ul>
<section id="linux" class="level1">
<h1>Linux</h1>
<section id="guided" class="level2">
<h2 class="anchored" data-anchor-id="guided">Guided</h2>
<p>Some resources to get started on your linux journey.</p>
<p><a href="https://linuxjourney.com/" class="uri">https://linuxjourney.com/</a></p>
<p>Linuxjourney is a very good guide, but it has some stuff not relevant to what we are doing.</p>
<p>You don’t need to networking nomad, but you do need to do grasshopper and journeyman.</p>
<p>Out of the stuff on those two programs, skip:</p>
<ul>
<li>Text-fu</li>
<li>Text-fu advanced</li>
</ul>
<p>We will probably either be using nano or automation/scripting to edit files.</p>
<ul>
<li><p>Boot processes</p></li>
<li><p>From init, skip anything not relevant to systemd. No one uses upstart or systemv anymore.</p></li>
</ul>
</section>
</section>
<section id="ansible" class="level1">
<h1>Ansible:</h1>
<p><a href="https://www.youtube.com/playlist?list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70">this video series</a> by learnlinuxtv.</p>
<p>Follow along using your virtual machine. You can setup ssh, or you can have an inventory of <code>localhost</code> to run playbooks on the same machine as you are currently on.</p>
<p>Once you have experimented with ansible enough, you can also experiment with running our ansible playbooks.</p>
</section>
<section id="windows" class="level1">
<h1>Windows</h1>
<section id="active-directory" class="level2">
<h2 class="anchored" data-anchor-id="active-directory">Active Directory</h2>
<p><a href="https://www.youtube.com/watch?v=zyud11pz40s">A cat explains active directory</a></p>
<p>High level overview, covering some of the history and many of the concepts behind active directory.</p>
<p><a href="https://www.youtube.com/watch?v=7kWdCzswPIc">A cat explains kerberos</a></p>
<p>I have not watched yet, but based on the above video, which mentions how active directory includes kerberos, it is probably relevant.</p>
<p><a href="https://learn.microsoft.com/en-us/training/modules/introduction-to-ad-ds/">Microsoft’s Intro to AD</a></p>
<p><a href="https://github.com/Orange-Cyberdefense/GOAD">GOAD - Game of Active Direcotyr</a></p>
<p>This is a highly insecure active directory which can be auto deployed to hyperv, proxmox, virtualbox, or azure. It uses a mix of ansible, terraform, and packer to provision and deploy.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/guides/ccdc-learning/</guid>
  <pubDate>Sat, 28 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Containers (that run on linux)</title>
  <link>https://moonpiedumplings.github.io/talks/containers/</link>
  <description><![CDATA[ 




<p>The layer8 Cybersecurity club as Cal State Northridge asked me to do a talk on linux containers (not to be confused with <a href="https://en.wikipedia.org/wiki/LXC">LXC</a>).</p>
<p>In this presentation, I talk a bit about the history of containers, types, and the various ways you can run a container on a system.</p>
<p>I recorded it, although the recording isn’t very good. In addition to that, the slides are also public, and they can be found <a href="../../talks/containers/revealjs.html">here</a></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/w2vRWGVOs1E" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/talks/containers/</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Being an internet helper</title>
  <link>https://moonpiedumplings.github.io/blog/helping/</link>
  <description><![CDATA[ 




<p><em>The below is my “literacy narrative essay”, for an english class</em></p>
<p>I was so close to hacking this system. Using a USB thumb drive as a boot device, I booted a different operating system on the computer, which originally ran windows. I then used some digital tools to enable the local administrator account, in a passwordless mode. When I removed the USB thumb drive, and restarted the machine, it returned to the innocuous login prompt, asking me to sign in with my school credentials. I ignored that, and signed into the admin account instead. I’m in.</p>
<p>It was a different kind of puzzle. But just like any other puzzle, I solved it for the gratification, rather than there being some end goal. Eventually, the computer’s were reset, and all my hard work was lost.</p>
<p>Later, when my computer was becoming too slow, I felt an itch in the back of my mind again. A new puzzle.</p>
<p>How do I make my computer faster?</p>
<p>I was tinkering already, and I had some ideas of how to make it faster, but I needed reassurance. Unfortunately, not all puzzles can be solved alone. I ended up asking for help on the internet.</p>
<p>Although 4 years ago, and the post has since been deleted, although not by me, I still remember what I asked for. I wanted to know how to replace the lowest level of software on my computer, the operating system, going from the slower Windows that is available on most devices by default, to the more difficult to use, but faster, Linux. However, I did not want to break the existing Windows install, and I also wanted to have “save points” of my linux installation, so that I could tinker and then restore my system to a previous state, giving my system some resilience.</p>
<p>The users were patient, and kind, and although they didn’t hold my hand for the entire process, they pointed me in the right directions, teaching me terminology and pointing me to resources that I could use to help myself. Eventually, I managed to solve that puzzle, and some variations of the changes I made, I do on all computers I own today.</p>
<p>After I ran out of puzzles to solve, I began solving other people’s puzzles. I would watch the forums religiously, viewing the newest posts first, so I could contribute before someone else. Sometimes, things were easy, and it was simply a case of a newer user not knowing what to search for, and I could point them in the right direction. For example, people would often ask if their hardware is compatible with Linux, so I would point them to a site that extensively documents hardware compatibility. With every reply thanking me, I felt immense gratification.</p>
<p>Of course, things wouldn’t always be as simple as that. Often, users weren’t simply seeking to do something, but to understand something as well. In this case where existing resources weren’t enough, I had to explain step by step.</p>
<p>One user was curious about how Linux software distribution works. What makes it different from Windows, or Mac, they asked? As painful as it was to type from my phone, I presented the unbiased reality of how Linux software management is objectively superior. Because some things, you have to explain personally, and you can’t point people to external resources.</p>
<p>Very often, new users don’t know how to ask for help, and you have to request for more information from them. For some reason, people often have trouble running games on Linux, but they won’t mention what game they are trying to play? I don’t understand how people understand how to get help if they don’t give enough information, but asking for help isn’t really something that comes intuitively to people.</p>
<p>Of course, once I know what game they play, I can give more detailed help. One time, there was a user who had nothing but a chromebook, but desired to get more performance out of it so that they could play one of my favorite games. Over the course of several days via purely discord text chats, I helped this person with installing Linux and installing the game on an unsupported device and operating system. But despite all that, their efforts didn’t bear much fruit, and they ended up giving up.</p>
<p>Although frustrating to see someone give up, it happens sometimes. On the other end, I’ve had to give up on cases as well. In one online community I followed, there was a constant influx of users asking similar or even the same questions. Although many people, including me, first started out by answering them, eventually the community got tired and sometimes even hostile to such users.</p>
<p>On the internet, “Help Vampires” are one type of person that appears in forums. This term refers to people who are unwilling to do the bare minimum of research, or put any effort into any problem. An infrequent occurrence on the internet, It’s difficult to help someone if they don’t help themselves. In many cases, it’s impossible.</p>
<p>A similar thing happened when a user was attempting to play a video game on Linux, and got an error about the kernel (the lowest lowest level of software, part of, but also under the operating system) not supporting a feature. Because of this, they were attempting to install a new kernel. However, what I found strange was the error message was requesting a feature that normally is not needed. The actual issue this user was encountering was that they enabled a non-necessary feature in their game launcher.</p>
<p>This is a common occurrence, common enough that there is actually a term for it: the XY problem where a user attempts to get help with their attempted solution, rather than their actual problem. Rather than explaining the whole XY problem, I would usually refer people to this website: https://xyproblem.info/.</p>
<p>In another post, a user asked if anyone has experience with the integration of two pieces of technology, one being a VPN, and the other being a management platform. They gave no other information. What this user was actually asking was: “Is there anybody around with experience with these techs that is willing to look into my problem, including extracting what my actual problem is me because I can’t be bothered to explain it?”</p>
<p>This is another occurrence on the internet that happens frequently enough that there is a term to refer to it, and a website which I refer people to: https://dontasktoask.com. Don’t ask your question, simply ask it to save everybody’s time.</p>
<p>As long as you have technical literacy, giving help to people troubleshooting on the internet is easy. Doing it nearly daily, for 4 years, without being burned out, is not. Many user’s helped out for a short period of time, to give back to the community, before becoming burned out and stopping. There were very few constants, people you could recognize just by their username, because they were that consistent.</p>
<p>I was one of them. Linux gave me a lot. Rather than gaming, I was tinkering. Working with Linux is likely what my job will be. But I didn’t, and still don’t, have the particular skill set to contribute to the Linux community through programming. I do intend to learn, but at the same time, I’ve come to love being a “helper” on the internet. The pleasure I get is threefold, one part for solving a problem, another for helping a stranger, and yet another for giving to this community that was willing to invest in me, back when I was barely a teen and didn’t know much.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/helping/</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A notes format that I can automatically convert to flashcards?</title>
  <link>https://moonpiedumplings.github.io/playground/flashcards/</link>
  <description><![CDATA[ 




<p>My goal is to have a notes format that I can automatically convert to flashcards, for studying.</p>
<p>So quarto has support for a format called <a href="https://quarto.org/docs/presentations/revealjs/">revealjs</a>.</p>
<p>Revealjs is basically presentations, like powerpoint or google slides, but in your browser. Although you can also print them to pdf.</p>
<p>Anyway, I was in need of some flashcards for my class and I wanted to see if I could use revealjs for this.</p>
<p>to create slides, just use a second level header:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Getting up</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Turn off alarm</span>
<span id="cb1-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Get out of bed</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Going to sleep</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Get in bed</span>
<span id="cb1-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Count sheep</span></code></pre></div>
<p>However, I don’t really want a title, so I can simply have the second level header (<code>##</code>), without a title, and it still creates another slide.</p>
<p>By default, lists are revealed all at once. To change this, in your quarto heading options:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revealjs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">incremental</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Actually, I like content pauses better.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Slide with a pause</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">content before the pause</span>
<span id="cb3-4"></span>
<span id="cb3-5">. . .</span>
<span id="cb3-6"></span>
<span id="cb3-7">content after the pause</span></code></pre></div>
<p>Now, how can I randomize slide orders?</p>
<p>According to the <a href="https://github.com/hakimel/reveal.js/pull/1506">revealjs pull where this feature was implemented</a>:</p>
<p>I can have a range of slides, something like:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// for everything</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Reveal.configure({ random: true });</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">Reveal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">configure</span>({</span>
<span id="cb4-5">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb4-6">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">rangeStart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">rangeEnd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb4-8">                }</span>
<span id="cb4-9">            })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>No wait, quarto has an option to shuffle the slides.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffle</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Now, is there a way to randomize the the list? I want the list options to sometimes have the name, and sometimes have the content, and you have to match which with which.</p>
<p>chatgpt gave me this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb6-1"></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE</span> html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">html</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Randomized List on Page Load<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">h1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Randomized List<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">h1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ul</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"randomList"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-12">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Item 1<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-13">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Item 2<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-14">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Item 3<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Item 4<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-16">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Item 5<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">li</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ul</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-18"></span>
<span id="cb6-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOMContentLoaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb6-21">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"randomList"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>) {</span>
<span id="cb6-23">                list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appendChild</span>(list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-24">            }</span>
<span id="cb6-25">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-26">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">html</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>But does it work? :</p>



    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Randomized List on Page Load</title>


    <h1>Randomized List</h1>
    <ul id="randomList">
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
        <li>Item 4</li>
        <li>Item 5</li>
    </ul>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const list = document.getElementById("randomList");
            for (let i = list.children.length; i >= 0; i--) {
                list.appendChild(list.children[Math.random() * i | 0]);
            }
        });
    </script>


<p>But it doesn’t work in revealjs, as revealjs won’t run show thing incrementally.</p>
<p>Rather than lists, can I just have javascript manipulate classes and divs created by pandoc?</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">::: {#myCustomBlock .custom-class}</span>
<span id="cb7-2">This is a custom block that can be manipulated by JavaScript.</span>
<span id="cb7-3">:::</span></code></pre></div>
<p>This should be able to be changed by pandoc.</p>
<p>And then I can shuffle them with something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb8-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffleBlocks</span>() {</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> container <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blocksContainer"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>(container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>) {</span>
<span id="cb8-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-6">        [blocks[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> blocks[j]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [blocks[j]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> blocks[i]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">    }</span>
<span id="cb8-8">    container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-9">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appendChild</span>(block))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-10">}</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Shuffle the blocks when the page loads</span></span>
<span id="cb8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">window</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOMContentLoaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> shuffleBlocks)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>So to test:</p>
<p>Shuffle blocks:</p>
<div id="blockContainer">
<div class="block">
<p>This is Block 1.</p>
</div>
<div class="block">
<p>This is Block 2.</p>
</div>
<div class="block">
<p>This is Block 3.</p>
</div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffleBlocks</span>() {</span>
<span id="cb9-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> container <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#blockContainer"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> blockDivs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>(container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".block"</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5">        </span>
<span id="cb9-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Shuffle the order of the block divs</span></span>
<span id="cb9-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockDivs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>) {</span>
<span id="cb9-8">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockDivs[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">            blockDivs[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockDivs[j]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-11">            blockDivs[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-12">        }</span>
<span id="cb9-13">        </span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append shuffled block divs back to the container</span></span>
<span id="cb9-15">        blockDivs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(blockDiv <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb9-16">            container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appendChild</span>(blockDiv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-17">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-18">    }</span>
<span id="cb9-19"></span>
<span id="cb9-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Shuffle the blocks when the page loads</span></span>
<span id="cb9-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">window</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOMContentLoaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> shuffleBlocks)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<script>
    function shuffleBlocks() {
        const container = document.querySelector("#blockContainer");
        const blockDivs = Array.from(container.querySelectorAll(".block"));
        
        // Shuffle the order of the block divs
        for (let i = blockDivs.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const temp = blockDivs[i];
            blockDivs[i] = blockDivs[j];
            blockDivs[j] = temp;
        }
        
        // Append shuffled block divs back to the container
        blockDivs.forEach(blockDiv => {
            container.appendChild(blockDiv);
        });
    }

    // Shuffle the blocks when the page loads
    window.addEventListener("DOMContentLoaded", shuffleBlocks);
</script>
<p>After many iterations with chatgpt, I finally got it to shuffle content.</p>
<p>Now is there a way to scale this across multiple slides? I don’t want to have to copy and paste this for the every single block. In fact, can I just make a custom html element that shuffles them?</p>
<p>So chatgpt gave me a custom html element class. It gave me a lot, actually, and none of them worked. So I’m giving up on that for now.</p>
<p>However, revealjs does support a grid slide layout, and it groups vertical slides together while randomizing their order, but it also randomizes the horizontal slides as well.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revealjs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">incremental</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dark</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffle</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navigation-mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> grid</span></span></code></pre></div>
<p>Eventually, I gave up on the revealjs format, after I found out that this flashcards app, <a href="https://apps.ankiweb.net/">anki</a></p>
<p>In my research, I found some tools which can convert other formats to anki:</p>
<table class="table">
<thead>
<tr class="header">
<th>Software</th>
<th>Last update?</th>
<th>Packaged?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/nx10/md2anki">md2anki</a></td>
<td>4 years ago</td>
<td>pypi</td>
</tr>
<tr class="even">
<td><a href="https://github.com/Mochitto/Markdown2Anki">markdown2anki</a></td>
<td>2 weeks ago</td>
<td>pypi</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/lukesmurray/markdown-anki-decks">markdown-anki-decks</a></td>
<td>1 year ago</td>
<td>pypi, but also in nixpkgs</td>
</tr>
</tbody>
</table>
<p>I did some testing. markdown-anki-decks is exceedingly simply, with something like:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Deck title</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## card front</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">card back</span></code></pre></div>
<p>to create a deck.</p>
<p>I also experimented with markdown2anki. It’s way, way more complex. Unlike the previous option, it has many, many options.</p>
<p>To create a simple flashcard:</p>
<p>```{.markdown}</p>



 ]]></description>
  <guid>https://moonpiedumplings.github.io/playground/flashcards/</guid>
  <pubDate>Wed, 04 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Podman vs Docker</title>
  <link>https://moonpiedumplings.github.io/playground/podman-docker/</link>
  <description><![CDATA[ 




<p>So I’ve been having some trouble, not with docker itself, but the way it interacts with the rest of the system. The big thing is that docker overwrites iptables rules, meaning any other bridges won’t work properly unless you set up iptables rules with the -I DOCKER-USER, which specifically sits in front of docker.</p>
<p>I encountered <a href="https://discuss.linuxcontainers.org/t/lxd-4-12-container-networking-failure-with-docker/10487/9">this issue</a> with linux containers, where the lxc containers did not have networking when docker was installed.</p>
<p>I also encoutered a similar issue when trying to setup NAT, the instructions on the <a href="https://wiki.archlinux.org/title/Internet_sharing#Enable_NAT">arch wiki</a> stated that the steps for machines that had docker installed were different but I did not realize this in my previous research.</p>
<p>The hope is that podman will have no such issue. But does podman have every feature of docker?</p>
<p>The first thing to consider is that podman has a docker-compat setup, where it gives you a compatibility command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">[moonpie@cachyos-x8664 containers]$ docker ps</span>
<span id="cb1-2">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span>
<span id="cb1-3">CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES</span></code></pre></div>
<p>It’s pretty good. Except:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">[moonpie@cachyos-x8664 registries.conf.d]$ docker pull jc21/nginx-proxy-manager:latest</span>
<span id="cb2-2">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span>
<span id="cb2-3">Error: short-name "jc21/nginx-proxy-manager:latest" did not resolve to an alias and no unqualified-search registries are defined in "/etc/containers/registries.conf"</span></code></pre></div>
<p>Unlike docker, podman does not have the &lt;docker.io&gt; as a default registry. You can still pull with <code>docker.io/jc21/nginx-proxy-manager</code>, but it’s inconvinient to change every script and whatnot to be like that.</p>
<p>The Red Hat Enable Sysadmin has a <a href="https://www.redhat.com/sysadmin/manage-container-registries">blog on this</a>. In the “pulling by shortnames” section they changed some podman settings:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/containers/registries.conf</strong></pre>
</div>
<pre class="init" data-filename="/etc/containers/registries.conf"><code>...
...
unqualified-search-registries = ['registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.centos.org', 'docker.io']
...
...</code></pre>
</div>
<p>This makes it so that podman will search for these images when not specificially told a registry.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">[moonpie@cachyos-x8664 containers]$ docker pull jc21/nginx-proxy-manager</span>
<span id="cb4-2">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span>
<span id="cb4-3">? Please select an image: </span>
<span id="cb4-4">  ▸ registry.fedoraproject.org/jc21/nginx-proxy-manager:latest</span>
<span id="cb4-5">    registry.access.redhat.com/jc21/nginx-proxy-manager:latest</span>
<span id="cb4-6">    registry.centos.org/jc21/nginx-proxy-manager:latest</span>
<span id="cb4-7">    docker.io/jc21/nginx-proxy-manager:latest</span></code></pre></div>
<p>Wow, this is pretty cool. It gives you an option to select when you have multiple default registries. If you only have one, then it just immediately defaults to that.</p>
<p>Podman also has <a href="https://www.redhat.com/sysadmin/podman-docker-compose">support for docker-compose</a></p>
<p>Once you have the docker compatibility package installed, simply start the podman service/socket, and docker-compose will work.</p>
<p>Except, I am wondering, will docker networks work? Podman seems to do something different, with podman pods, which don’t behave the same way as docker networks.</p>
<p>To test, I have created a simple docker-compose.yml, which has two contianers on the same network:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alpine_container_1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> alpine:latest</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tail"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/null"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Keeps the container running</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my_network</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alpine_container_2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> alpine:latest</span></span>
<span id="cb5-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tail"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/null"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Keeps the container running</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my_network</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span></code></pre></div>
<p>It seems to work, but….</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">[moonpie@cachyos-x8664 podman-docker]$ sudo podman network inspect podman-docker_my_network</span>
<span id="cb6-2">[</span>
<span id="cb6-3">     {</span>
<span id="cb6-4">          "name": "podman-docker_my_network",</span>
<span id="cb6-5">          "id": "0b11ee2d93ccd3427374b667b55dd7c42f12d68d296f6dca2ccad12a491b7e7d",</span>
<span id="cb6-6">          "driver": "bridge",</span>
<span id="cb6-7">          "network_interface": "podman1",</span>
<span id="cb6-8">          "created": "2023-09-03T06:21:14.350164238-07:00",</span>
<span id="cb6-9">          "subnets": [</span>
<span id="cb6-10">               {</span>
<span id="cb6-11">                    "subnet": "10.89.0.0/24",</span>
<span id="cb6-12">                    "gateway": "10.89.0.1"</span>
<span id="cb6-13">               }</span>
<span id="cb6-14">          ],</span>
<span id="cb6-15">          "ipv6_enabled": false,</span>
<span id="cb6-16">          "internal": false,</span>
<span id="cb6-17">          "dns_enabled": true,</span>
<span id="cb6-18">          "labels": {</span>
<span id="cb6-19">               "com.docker.compose.network": "my_network",</span>
<span id="cb6-20">               "com.docker.compose.project": "podman-docker",</span>
<span id="cb6-21">               "com.docker.compose.version": "2.20.3"</span>
<span id="cb6-22">          },</span>
<span id="cb6-23">          "options": {</span>
<span id="cb6-24">               "isolate": "true"</span>
<span id="cb6-25">          },</span>
<span id="cb6-26">          "ipam_options": {</span>
<span id="cb6-27">               "driver": "host-local"</span>
<span id="cb6-28">          }</span>
<span id="cb6-29">     }</span>
<span id="cb6-30">]</span>
<span id="cb6-31">[moonpie@cachyos-x8664 podman-docker]$ </span></code></pre></div>
<p>Whereas, when using <code>docker network inspect</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">moonpie@office:~$ docker network inspect mine</span>
<span id="cb7-2">[</span>
<span id="cb7-3">    {</span>
<span id="cb7-4">        "Name": "mine",</span>
<span id="cb7-5">        "Id": "73125f7a201062e8561f6d34110c2fdca2a3e21c423998e58da9ded56222a954",</span>
<span id="cb7-6">        "Created": "2023-02-23T03:57:12.249530356Z",</span>
<span id="cb7-7">        "Scope": "local",</span>
<span id="cb7-8">        "Driver": "bridge",</span>
<span id="cb7-9">        "EnableIPv6": false,</span>
<span id="cb7-10">        "IPAM": {</span>
<span id="cb7-11">            "Driver": "default",</span>
<span id="cb7-12">            "Options": {},</span>
<span id="cb7-13">            "Config": [</span>
<span id="cb7-14">                {</span>
<span id="cb7-15">                    "Subnet": "172.18.0.0/16",</span>
<span id="cb7-16">                    "Gateway": "172.18.0.1"</span>
<span id="cb7-17">                }</span>
<span id="cb7-18">            ]</span>
<span id="cb7-19">        },</span>
<span id="cb7-20">        "Internal": false,</span>
<span id="cb7-21">        "Attachable": false,</span>
<span id="cb7-22">        "Ingress": false,</span>
<span id="cb7-23">        "ConfigFrom": {</span>
<span id="cb7-24">            "Network": ""</span>
<span id="cb7-25">        },</span>
<span id="cb7-26">        "ConfigOnly": false,</span>
<span id="cb7-27">        "Containers": {</span>
<span id="cb7-28">            "01af5e2990ba9c4cee41de65500f72bd2a3c8e373bce373be251cf5a7a4549dd": {</span>
<span id="cb7-29">                "Name": "meshcentral",</span>
<span id="cb7-30">                "EndpointID": "c8b101d499a88d7c9ed0d476fa09915018e58fea0e83b24093b2d8768c12c464",</span>
<span id="cb7-31">                "MacAddress": "02:42:ac:12:00:07",</span>
<span id="cb7-32">                "IPv4Address": "172.18.0.7/16",</span>
<span id="cb7-33">                "IPv6Address": ""</span>
<span id="cb7-34">            },</span>
<span id="cb7-35">            "329b7fd59807573522a92c0e006f9cf92d44133a1f4e197d25f666a66bc5241e": {</span>
<span id="cb7-36">                "Name": "v2ray_proxy_1",</span>
<span id="cb7-37">                "EndpointID": "01ff85e55d6f1c9dee40ec09dbc258a1a5d5ad2728d35e3020d52211c076ebb1",</span>
<span id="cb7-38">                "MacAddress": "02:42:ac:12:00:03",</span>
<span id="cb7-39">                "IPv4Address": "172.18.0.3/16",</span>
<span id="cb7-40">                "IPv6Address": ""</span>
<span id="cb7-41">            },</span>
<span id="cb7-42">        },</span>
<span id="cb7-43">        "Options": {},</span>
<span id="cb7-44">        "Labels": {}</span>
<span id="cb7-45">    }</span>
<span id="cb7-46">]</span></code></pre></div>
<p>When using docker to to create networks, it tells you the ip addressed fo the containers in a network. Podman doesn’t do this.</p>
<p>But can the containers interact with eachother?</p>
<p>Yes, they can. While in one container, I could ping the other container. However, I had to get the container ip addresses by creating a shell in the containers, and then running <code>ip a</code> to view the ip addresses first.</p>
<p>Is there any way to view the container ip addresses from outside the container? Not all containers come with a shell builtin, some don’t have it for size purposes, and solely contain what is needed to run whatever application the container is packaging.</p>
<details>
<summary>
Podman inspect
</summary>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">[root@cachyos-x8664 podman-docker]# podman inspect podman-docker-alpine_container_1-1 </span>
<span id="cb8-2">[</span>
<span id="cb8-3">     {</span>
<span id="cb8-4">          "Id": "eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7",</span>
<span id="cb8-5">          "Created": "2023-09-03T06:21:14.357752403-07:00",</span>
<span id="cb8-6">          "Path": "tail",</span>
<span id="cb8-7">          "Args": [</span>
<span id="cb8-8">               "-f",</span>
<span id="cb8-9">               "/dev/null"</span>
<span id="cb8-10">          ],</span>
<span id="cb8-11">          "State": {</span>
<span id="cb8-12">               "OciVersion": "1.1.0-rc.3",</span>
<span id="cb8-13">               "Status": "running",</span>
<span id="cb8-14">               "Running": true,</span>
<span id="cb8-15">               "Paused": false,</span>
<span id="cb8-16">               "Restarting": false,</span>
<span id="cb8-17">               "OOMKilled": false,</span>
<span id="cb8-18">               "Dead": false,</span>
<span id="cb8-19">               "Pid": 37035,</span>
<span id="cb8-20">               "ConmonPid": 37033,</span>
<span id="cb8-21">               "ExitCode": 0,</span>
<span id="cb8-22">               "Error": "",</span>
<span id="cb8-23">               "StartedAt": "2023-09-03T06:21:14.742250101-07:00",</span>
<span id="cb8-24">               "FinishedAt": "0001-01-01T00:00:00Z",</span>
<span id="cb8-25">               "Health": {</span>
<span id="cb8-26">                    "Status": "",</span>
<span id="cb8-27">                    "FailingStreak": 0,</span>
<span id="cb8-28">                    "Log": null</span>
<span id="cb8-29">               },</span>
<span id="cb8-30">               "CgroupPath": "/machine.slice/libpod-eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7.scope",</span>
<span id="cb8-31">               "CheckpointedAt": "0001-01-01T00:00:00Z",</span>
<span id="cb8-32">               "RestoredAt": "0001-01-01T00:00:00Z"</span>
<span id="cb8-33">          },</span>
<span id="cb8-34">          "Image": "7e01a0d0a1dcd9e539f8e9bbd80106d59efbdf97293b3d38f5d7a34501526cdb",</span>
<span id="cb8-35">          "ImageDigest": "sha256:7144f7bab3d4c2648d7e59409f15ec52a18006a128c733fcff20d3a4a54ba44a",</span>
<span id="cb8-36">          "ImageName": "docker.io/library/alpine:latest",</span>
<span id="cb8-37">          "Rootfs": "",</span>
<span id="cb8-38">          "Pod": "",</span>
<span id="cb8-39">          "ResolvConfPath": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/resolv.conf",</span>
<span id="cb8-40">          "HostnamePath": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/hostname",</span>
<span id="cb8-41">          "HostsPath": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/hosts",</span>
<span id="cb8-42">          "StaticDir": "/var/lib/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata",</span>
<span id="cb8-43">          "OCIConfigPath": "/var/lib/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/config.json",</span>
<span id="cb8-44">          "OCIRuntime": "crun",</span>
<span id="cb8-45">          "ConmonPidFile": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/conmon.pid",</span>
<span id="cb8-46">          "PidFile": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/pidfile",</span>
<span id="cb8-47">          "Name": "podman-docker-alpine_container_1-1",</span>
<span id="cb8-48">          "RestartCount": 0,</span>
<span id="cb8-49">          "Driver": "overlay",</span>
<span id="cb8-50">          "MountLabel": "",</span>
<span id="cb8-51">          "ProcessLabel": "",</span>
<span id="cb8-52">          "AppArmorProfile": "",</span>
<span id="cb8-53">          "EffectiveCaps": [</span>
<span id="cb8-54">               "CAP_CHOWN",</span>
<span id="cb8-55">               "CAP_DAC_OVERRIDE",</span>
<span id="cb8-56">               "CAP_FOWNER",</span>
<span id="cb8-57">               "CAP_FSETID",</span>
<span id="cb8-58">               "CAP_KILL",</span>
<span id="cb8-59">               "CAP_NET_BIND_SERVICE",</span>
<span id="cb8-60">               "CAP_SETFCAP",</span>
<span id="cb8-61">               "CAP_SETGID",</span>
<span id="cb8-62">               "CAP_SETPCAP",</span>
<span id="cb8-63">               "CAP_SETUID",</span>
<span id="cb8-64">               "CAP_SYS_CHROOT"</span>
<span id="cb8-65">          ],</span>
<span id="cb8-66">          "BoundingCaps": [</span>
<span id="cb8-67">               "CAP_CHOWN",</span>
<span id="cb8-68">               "CAP_DAC_OVERRIDE",</span>
<span id="cb8-69">               "CAP_FOWNER",</span>
<span id="cb8-70">               "CAP_FSETID",</span>
<span id="cb8-71">               "CAP_KILL",</span>
<span id="cb8-72">               "CAP_NET_BIND_SERVICE",</span>
<span id="cb8-73">               "CAP_SETFCAP",</span>
<span id="cb8-74">               "CAP_SETGID",</span>
<span id="cb8-75">               "CAP_SETPCAP",</span>
<span id="cb8-76">               "CAP_SETUID",</span>
<span id="cb8-77">               "CAP_SYS_CHROOT"</span>
<span id="cb8-78">          ],</span>
<span id="cb8-79">          "ExecIDs": [</span>
<span id="cb8-80">               "8354949b4e0bf728dafa7b3e7b857ccce18e953b0f20473dbb06fe6442bf1d12"</span>
<span id="cb8-81">          ],</span>
<span id="cb8-82">          "GraphDriver": {</span>
<span id="cb8-83">               "Name": "overlay",</span>
<span id="cb8-84">               "Data": {</span>
<span id="cb8-85">                    "LowerDir": "/var/lib/containers/storage/overlay/4693057ce2364720d39e57e85a5b8e0bd9ac3573716237736d6470ec5b7b7230/diff",</span>
<span id="cb8-86">                    "MergedDir": "/var/lib/containers/storage/overlay/bbadcba900462960315aa406866164bd58a12573e76140093563525f595b1732/merged",</span>
<span id="cb8-87">                    "UpperDir": "/var/lib/containers/storage/overlay/bbadcba900462960315aa406866164bd58a12573e76140093563525f595b1732/diff",</span>
<span id="cb8-88">                    "WorkDir": "/var/lib/containers/storage/overlay/bbadcba900462960315aa406866164bd58a12573e76140093563525f595b1732/work"</span>
<span id="cb8-89">               }</span>
<span id="cb8-90">          },</span>
<span id="cb8-91">          "Mounts": [],</span>
<span id="cb8-92">          "Dependencies": [],</span>
<span id="cb8-93">          "NetworkSettings": {</span>
<span id="cb8-94">               "EndpointID": "",</span>
<span id="cb8-95">               "Gateway": "",</span>
<span id="cb8-96">               "IPAddress": "",</span>
<span id="cb8-97">               "IPPrefixLen": 0,</span>
<span id="cb8-98">               "IPv6Gateway": "",</span>
<span id="cb8-99">               "GlobalIPv6Address": "",</span>
<span id="cb8-100">               "GlobalIPv6PrefixLen": 0,</span>
<span id="cb8-101">               "MacAddress": "",</span>
<span id="cb8-102">               "Bridge": "",</span>
<span id="cb8-103">               "SandboxID": "",</span>
<span id="cb8-104">               "HairpinMode": false,</span>
<span id="cb8-105">               "LinkLocalIPv6Address": "",</span>
<span id="cb8-106">               "LinkLocalIPv6PrefixLen": 0,</span>
<span id="cb8-107">               "Ports": {},</span>
<span id="cb8-108">               "SandboxKey": "/run/netns/netns-4a204211-d01a-6d0f-bfd3-bfc34e73885e",</span>
<span id="cb8-109">               "Networks": {</span>
<span id="cb8-110">                    "podman-docker_my_network": {</span>
<span id="cb8-111">                         "EndpointID": "",</span>
<span id="cb8-112">                         "Gateway": "10.89.0.1",</span>
<span id="cb8-113">                         "IPAddress": "10.89.0.2",</span>
<span id="cb8-114">                         "IPPrefixLen": 24,</span>
<span id="cb8-115">                         "IPv6Gateway": "",</span>
<span id="cb8-116">                         "GlobalIPv6Address": "",</span>
<span id="cb8-117">                         "GlobalIPv6PrefixLen": 0,</span>
<span id="cb8-118">                         "MacAddress": "b2:af:b4:78:28:1b",</span>
<span id="cb8-119">                         "NetworkID": "podman-docker_my_network",</span>
<span id="cb8-120">                         "DriverOpts": null,</span>
<span id="cb8-121">                         "IPAMConfig": null,</span>
<span id="cb8-122">                         "Links": null,</span>
<span id="cb8-123">                         "Aliases": [</span>
<span id="cb8-124">                              "podman-docker-alpine_container_1-1",</span>
<span id="cb8-125">                              "alpine_container_1",</span>
<span id="cb8-126">                              "eae4cc793f5f"</span>
<span id="cb8-127">                         ]</span>
<span id="cb8-128">                    }</span>
<span id="cb8-129">               }</span>
<span id="cb8-130">          },</span>
<span id="cb8-131">          "Namespace": "",</span>
<span id="cb8-132">          "IsInfra": false,</span>
<span id="cb8-133">          "IsService": false,</span>
<span id="cb8-134">          "KubeExitCodePropagation": "invalid",</span>
<span id="cb8-135">          "lockNumber": 0,</span>
<span id="cb8-136">          "Config": {</span>
<span id="cb8-137">               "Hostname": "eae4cc793f5f",</span>
<span id="cb8-138">               "Domainname": "",</span>
<span id="cb8-139">               "User": "",</span>
<span id="cb8-140">               "AttachStdin": false,</span>
<span id="cb8-141">               "AttachStdout": false,</span>
<span id="cb8-142">               "AttachStderr": false,</span>
<span id="cb8-143">               "Tty": false,</span>
<span id="cb8-144">               "OpenStdin": false,</span>
<span id="cb8-145">               "StdinOnce": false,</span>
<span id="cb8-146">               "Env": [</span>
<span id="cb8-147">                    "TERM=xterm",</span>
<span id="cb8-148">                    "container=podman",</span>
<span id="cb8-149">                    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span>
<span id="cb8-150">                    "HOME=/root",</span>
<span id="cb8-151">                    "HOSTNAME=eae4cc793f5f"</span>
<span id="cb8-152">               ],</span>
<span id="cb8-153">               "Cmd": [</span>
<span id="cb8-154">                    "tail",</span>
<span id="cb8-155">                    "-f",</span>
<span id="cb8-156">                    "/dev/null"</span>
<span id="cb8-157">               ],</span>
<span id="cb8-158">               "Image": "docker.io/library/alpine:latest",</span>
<span id="cb8-159">               "Volumes": null,</span>
<span id="cb8-160">               "WorkingDir": "/",</span>
<span id="cb8-161">               "Entrypoint": "",</span>
<span id="cb8-162">               "OnBuild": null,</span>
<span id="cb8-163">               "Labels": {</span>
<span id="cb8-164">                    "com.docker.compose.config-hash": "6418caee2d42d6859badadf595f62af5fc514baebd949edbc3b925c9dd53ecc3",</span>
<span id="cb8-165">                    "com.docker.compose.container-number": "1",</span>
<span id="cb8-166">                    "com.docker.compose.depends_on": "",</span>
<span id="cb8-167">                    "com.docker.compose.image": "sha256:7e01a0d0a1dcd9e539f8e9bbd80106d59efbdf97293b3d38f5d7a34501526cdb",</span>
<span id="cb8-168">                    "com.docker.compose.oneoff": "False",</span>
<span id="cb8-169">                    "com.docker.compose.project": "podman-docker",</span>
<span id="cb8-170">                    "com.docker.compose.project.config_files": "/home/moonpie/vscode/moonpiedumplings.github.io/playground/podman-docker/docker-compose.yml",</span>
<span id="cb8-171">                    "com.docker.compose.project.working_dir": "/home/moonpie/vscode/moonpiedumplings.github.io/playground/podman-docker",</span>
<span id="cb8-172">                    "com.docker.compose.service": "alpine_container_1",</span>
<span id="cb8-173">                    "com.docker.compose.version": "2.20.3"</span>
<span id="cb8-174">               },</span>
<span id="cb8-175">               "Annotations": {</span>
<span id="cb8-176">                    "io.container.manager": "libpod",</span>
<span id="cb8-177">                    "org.opencontainers.image.stopSignal": "15"</span>
<span id="cb8-178">               },</span>
<span id="cb8-179">               "StopSignal": 15,</span>
<span id="cb8-180">               "HealthcheckOnFailureAction": "none",</span>
<span id="cb8-181">               "CreateCommand": [</span>
<span id="cb8-182">                    "/usr/bin/podman",</span>
<span id="cb8-183">                    "--log-level=info",</span>
<span id="cb8-184">                    "system",</span>
<span id="cb8-185">                    "service"</span>
<span id="cb8-186">               ],</span>
<span id="cb8-187">               "Umask": "0000",</span>
<span id="cb8-188">               "Timeout": 0,</span>
<span id="cb8-189">               "StopTimeout": 0,</span>
<span id="cb8-190">               "Passwd": true</span>
<span id="cb8-191">          },</span>
<span id="cb8-192">          "HostConfig": {</span>
<span id="cb8-193">               "Binds": [],</span>
<span id="cb8-194">               "CgroupManager": "systemd",</span>
<span id="cb8-195">               "CgroupMode": "private",</span>
<span id="cb8-196">               "ContainerIDFile": "",</span>
<span id="cb8-197">               "LogConfig": {</span>
<span id="cb8-198">                    "Type": "journald",</span>
<span id="cb8-199">                    "Config": null,</span>
<span id="cb8-200">                    "Path": "",</span>
<span id="cb8-201">                    "Tag": "",</span>
<span id="cb8-202">                    "Size": "0B"</span>
<span id="cb8-203">               },</span>
<span id="cb8-204">               "NetworkMode": "bridge",</span>
<span id="cb8-205">               "PortBindings": {},</span>
<span id="cb8-206">               "RestartPolicy": {</span>
<span id="cb8-207">                    "Name": "",</span>
<span id="cb8-208">                    "MaximumRetryCount": 0</span>
<span id="cb8-209">               },</span>
<span id="cb8-210">               "AutoRemove": false,</span>
<span id="cb8-211">               "VolumeDriver": "",</span>
<span id="cb8-212">               "VolumesFrom": null,</span>
<span id="cb8-213">               "CapAdd": [],</span>
<span id="cb8-214">               "CapDrop": [],</span>
<span id="cb8-215">               "Dns": [],</span>
<span id="cb8-216">               "DnsOptions": [],</span>
<span id="cb8-217">               "DnsSearch": [],</span>
<span id="cb8-218">               "ExtraHosts": [],</span>
<span id="cb8-219">               "GroupAdd": [],</span>
<span id="cb8-220">               "IpcMode": "shareable",</span>
<span id="cb8-221">               "Cgroup": "",</span>
<span id="cb8-222">               "Cgroups": "default",</span>
<span id="cb8-223">               "Links": null,</span>
<span id="cb8-224">               "OomScoreAdj": 0,</span>
<span id="cb8-225">               "PidMode": "private",</span>
<span id="cb8-226">               "Privileged": false,</span>
<span id="cb8-227">               "PublishAllPorts": false,</span>
<span id="cb8-228">               "ReadonlyRootfs": false,</span>
<span id="cb8-229">               "SecurityOpt": [],</span>
<span id="cb8-230">               "Tmpfs": {},</span>
<span id="cb8-231">               "UTSMode": "private",</span>
<span id="cb8-232">               "UsernsMode": "",</span>
<span id="cb8-233">               "ShmSize": 65536000,</span>
<span id="cb8-234">               "Runtime": "oci",</span>
<span id="cb8-235">               "ConsoleSize": [</span>
<span id="cb8-236">                    0,</span>
<span id="cb8-237">                    0</span>
<span id="cb8-238">               ],</span>
<span id="cb8-239">               "Isolation": "",</span>
<span id="cb8-240">               "CpuShares": 0,</span>
<span id="cb8-241">               "Memory": 0,</span>
<span id="cb8-242">               "NanoCpus": 0,</span>
<span id="cb8-243">               "CgroupParent": "",</span>
<span id="cb8-244">               "BlkioWeight": 0,</span>
<span id="cb8-245">               "BlkioWeightDevice": null,</span>
<span id="cb8-246">               "BlkioDeviceReadBps": null,</span>
<span id="cb8-247">               "BlkioDeviceWriteBps": null,</span>
<span id="cb8-248">               "BlkioDeviceReadIOps": null,</span>
<span id="cb8-249">               "BlkioDeviceWriteIOps": null,</span>
<span id="cb8-250">               "CpuPeriod": 0,</span>
<span id="cb8-251">               "CpuQuota": 0,</span>
<span id="cb8-252">               "CpuRealtimePeriod": 0,</span>
<span id="cb8-253">               "CpuRealtimeRuntime": 0,</span>
<span id="cb8-254">               "CpusetCpus": "",</span>
<span id="cb8-255">               "CpusetMems": "",</span>
<span id="cb8-256">               "Devices": [],</span>
<span id="cb8-257">               "DiskQuota": 0,</span>
<span id="cb8-258">               "KernelMemory": 0,</span>
<span id="cb8-259">               "MemoryReservation": 0,</span>
<span id="cb8-260">               "MemorySwap": 0,</span>
<span id="cb8-261">               "MemorySwappiness": 0,</span>
<span id="cb8-262">               "OomKillDisable": false,</span>
<span id="cb8-263">               "PidsLimit": 2048,</span>
<span id="cb8-264">               "Ulimits": [</span>
<span id="cb8-265">                    {</span>
<span id="cb8-266">                         "Name": "RLIMIT_NPROC",</span>
<span id="cb8-267">                         "Soft": 4194304,</span>
<span id="cb8-268">                         "Hard": 4194304</span>
<span id="cb8-269">                    }</span>
<span id="cb8-270">               ],</span>
<span id="cb8-271">               "CpuCount": 0,</span>
<span id="cb8-272">               "CpuPercent": 0,</span>
<span id="cb8-273">               "IOMaximumIOps": 0,</span>
<span id="cb8-274">               "IOMaximumBandwidth": 0,</span>
<span id="cb8-275">               "CgroupConf": null</span>
<span id="cb8-276">          }</span>
<span id="cb8-277">     }</span>
<span id="cb8-278">]</span></code></pre></div>
</details>
<p>I found something, but the output is massive and not easy to read.</p>
<p>The relevant part:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">"Networks": {</span>
<span id="cb9-2">                    "podman-docker_my_network": {</span>
<span id="cb9-3">                         "EndpointID": "",</span>
<span id="cb9-4">                         "Gateway": "10.89.0.1",</span>
<span id="cb9-5">                         "IPAddress": "10.89.0.2",</span></code></pre></div>
<p>What about rootless? Using the podman-compose I can launch rootless containers. However, according to the <a href="https://wiki.archlinux.org/title/Podman#Additional_dependencies">arch wiki</a> some extra dependencies are required for dns to work.</p>
<p>After installaling:</p>
<p>Rootless test (podman-compose):</p>
<pre class="defualt"><code>/ # ping podman-docker_alpine_container_2_1
PING podman-docker_alpine_container_2_1 (10.89.1.5): 56 data bytes
64 bytes from 10.89.1.5: seq=0 ttl=42 time=0.039 ms</code></pre>
<p>Rootfull test (docker-compose with podman backend):</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">/ # ping podman-docker-alpine_container_1-1</span>
<span id="cb11-2">PING podman-docker-alpine_container_1-1 (10.89.0.2): 56 data bytes</span>
<span id="cb11-3">64 bytes from 10.89.0.2: seq=0 ttl=42 time=0.044 ms</span></code></pre></div>
<p>So I can’t get the ip, but because dns in the container works, they can find eachother that way. Nice.</p>
<p>Since rootful podman containers using docker-compose work nicely, podman seems more and more appealing to me.</p>
<p>Another feature of podman that appeals to me is the <a href="https://www.howtogeek.com/devops/how-to-enable-podmans-automatic-container-updates/">auto updates</a></p>
<p>And another feature that makes podman appeal to me is the integration podman has with the cockpit web ui for managing linux systems. Because cockpit is made by Red Hat, who also develops podman, they deprecated docker support and now it only supports podman.</p>



 ]]></description>
  <category>linux</category>
  <category>docker</category>
  <guid>https://moonpiedumplings.github.io/playground/podman-docker/</guid>
  <pubDate>Sun, 03 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Attempting to get secure boot and bootable BTRFS snapshots</title>
  <link>https://moonpiedumplings.github.io/playground/arch-secureboot/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
If these steps are followed blindly, you risk compromising your security
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Do not do what I did unless you have a similar setup to what I have, which is full disk encryption, with /boot/efi being the efi system partition, and the only unencrypted part of the system. This means that everything in /boot, including things like kernels, or grub configurations and supportive files.</p>
</div>
</div>
</div>
<p>I’ve been at this for some time now, so I will document what I have done, and further steps. Essentially, I am trying to do what <a href="https://wejn.org/2021/09/fixing-grub-verification-requested-nobody-cares/">this person</a> <a href="https://web.archive.org/web/20230609152526/https://wejn.org/2021/09/fixing-grub-verification-requested-nobody-cares/">archive</a> has done.</p>
<p>They go more into depth on the setup that we are both using, but essentially, I the only unencrypted part of my system is the grub efi binary. Normally, the kernels and kernel modules are also left unencrypted, and because of that, they must be signed in order to prevent an attacker from modifying them on the hard drive, either by removing the hard drive, or booting another operating system, like by a USB drive. Signing is a process that uses complex math to ensure that the computer can verify the authenticity of a file.</p>
<p>Normally, since the kernels are left unencrypted (and to cut off another avenue of attack on running systems), the kernels are signed in order to ensure that they haven’t been modified. However, in my setup, since only grub is left unencrypted, it’s the only thing that can be signed.</p>
<p>But for some reason, grub still attempts to verify the kernels even when it doesn’t need to. This is my struggle of getting it to <em>not</em> do that.</p>
<p>The first thing I did sign grub. I followed the insturctions on the <a href="https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Assisted_process_with_sbctl">Arch Wiki</a>. Except, rather than signing the kernels, I only signed grub.</p>
<p>I enabled secure boot, and reboted. Grub loaded up, and asked me for my password, but then gave me an error and put me into a rescue shell.</p>
<pre><code>error: prohibited by secure boot policy</code></pre>
<p>So I did some searching around. I found someone with the same issue on the <a href="https://bbs.archlinux.org/viewtopic.php?id=282076">Arch Linux BBS</a>. On that page, someone (reply #4) said that an update of grub (grub version 2.06, to be specific) had a change in policy where grub would refuse to load unsigned font files when in secure mode. This is good. There have been CVE’s (security vulnerabilities/issues) in the past where grub loading a malicious grub.cfg or font file can be exploited to make grub do things it’s not supposed to.</p>
<p>Except one tiny problem: Grub stores all configuration and font files in /boot/grub, which is encrypted in my setup. An attacker would not be able to modify it, so therefore I have no need to verify it. It’s actually a hassle to verify all this stuff, because they are tracked by BTRFS, and will be restored.</p>
<p>After some more research, I decided to install grub with the shim-lock option.</p>
<p>But I got another error:</p>
<pre><code>error: verification requested, but nobody cares: (cryptouid:uidhere/boot/grub/x86_64-efi/normal.mod)</code></pre>
<p>Normal mod was not signed.</p>
<p>Apparently, as long as secure boot it enabled, grub still attempts to verify the files. I did some searching around, before finding <a href="https://wejn.org/2021/09/fixing-grub-verification-requested-nobody-cares/">this article</a>, which I also linked above. They used sed (text finder and replacer) to replace some things in the grub <em>binary</em>.</p>
<pre><code>sed 's/SecureBoot/SecureB00t' grubx64.efi</code></pre>
<p>Except, after I ran this command:</p>
<pre><code>[root@lizard boot]# sbctl verify
Verifying file database and EFI images in /boot/efi...
✓ /boot/efi/EFI/cachyos/grubx64.efi is signed</code></pre>
<p>The grub binary <em>stayed</em> signed. Even after modification. What? Shouldn’t the grub binary being modified, break the signatures? Unless it does (I haven’t rebooted yet), and it’s just that the the sbctl tool doesn’t check whether or not the signatures are valid.</p>
<p>Regardless, I can’t know until I test, and I didn’t bother. I simmply resigned the the grub binary, but it still didn’t work.</p>
<p>I forgot to install grub with the <code>--disable-shim-lock</code> option.</p>
<p>Before this, I nuked the /boot/efi directory to ensure that nothing extraneous was left. For some reason, cachyos (arch based distro I am using), installs grub twice, once at /boot/efi/EFI/boot and another at /boot/efi/EFI/cachyos. Having only one grub binary further simplifies this process.</p>
<p>So my full steps would be (requires root):</p>
<pre><code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --disable-shim-lock
sed -i 's/boot/efi/EFI/cachyos/' grubx64.efi</code></pre>
<p>An unorthodox grub hack, but it works.</p>
<p>If a grub update ever breaks this, or maybe just to futureproof this, then I’ll probably just use Arch’s PKGBUILD, makepkg, and patch tools to patch the <a href="https://github.com/rhboot/grub2/blob/205b7b44bb2a7911f1e8c1ce22d66c111a4b429e/grub-core/kern/efi/sb.c#L42">grub_efi_get_secureboot function of sb.c</a> so that grub always thinks it’s not in secure boot. I think I would only need to change one line, <code>return secureboot</code>, or maybe reset the variable to what I want at the end of the function, but I’m not too familier with C code at the moment. I can read it, given context, but I’ve not written it yet.</p>



 ]]></description>
  <category>linux</category>
  <category>cybersecurity</category>
  <guid>https://moonpiedumplings.github.io/playground/arch-secureboot/</guid>
  <pubDate>Tue, 29 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The CSUN game room has pretty locked down computers…</title>
  <link>https://moonpiedumplings.github.io/playground/csun-computers/</link>
  <description><![CDATA[ 




<p>My first class at Cal State Northridge (CSUN) happened today.</p>
<p>It was pretty exciting, but after class, I wandered around to stave off boredom. I ended up finding the <a href="https://www.csun.edu/src/games-room">CSUN game room</a>, which was a pretty sick setup. Although one side was a game room with a few pool tables and other table games, and beyond that, couches and game consoles, the other side was setup similar to the <a href="https://en.wikipedia.org/wiki/PC_bang">computer cafe’s</a> which are still popular in South Korea.</p>
<p>Obviously I needed to asses their security. Because of my <a href="../cruise-ship-computers/">experience with the cruise ship computers</a>, I somewhat knew what I needed to do. The windows UI on the machines in the CSUN game room, is locked down.</p>
<p>Rather than the normal window’s interface, it was a proprietary interface specially dedicated to games. I could not even open a browser.</p>
<p>In addition to that, none of the keyboard shortcuts worked. Windows + R (run dialog). Or Windows + E (explorer).</p>
<p>So similar to the cruise ships, my initial goal was to restart the windows UI. For some strange reason, the windows UI is located under the program explorer.exe, which is the same program as the filebrowser. On the cruise ship, finding and launching this program is how I restarted the windows UI.</p>
<p>However, I quickly discovered something interesting. When launching discord through the locked down UI, the edge browser would launch for half a second, and then disappear, the tab closing itself. I launched a new tab before it closed, and edge stayed open…</p>
<p>Once edge was open, the first thing I tried was chromium’s Control + O open file dialog.</p>
<p>However, I couldn’t open things, and more interestingly, the right click, and any other methods of accessing the context menu I tried, were blocked.</p>
<p><img src="https://media.discordapp.net/attachments/1145897518270517291/1145898301032501358/AIL4fc_t_UdiZErKWvs9V5pkh38GP9rMPKZJBQzB5IpeA4UQVR6Z95iY2rHtGl8YSu7HEEZZt9b8QqIRVY7eEKAnf6VWHHIeu07hCVfE1754XbNmZxzvHMXtc6udDudz5cmfwN08MI45gWd7_mVi9a6SonX4nUYGjF9wE8edCBkT8R9z73vjZC9SZIRgCaHMe1WgKMe4Zybsu3YO0Nx5WTN4ucjQTVEfGSkWkt1utbVhTrI2yto6uBkFMKL42nqjJYSAIYR4hROEtefRTo_6M3q9Dihfh1KKIaRHfXnVWaYwwqpV3tITMNDccFO7GO_qAoSAvCEDeizkUS1N82sfN9qhODzPoVrKKO_DUAoU1I9VNaBK0g9dgGzggLFuwx7PGGpIVBoSSxVZpgXOcBsEiOFUYC5nwFD90WLFin8Bhcni-Qh9RrpUt_AthR4zOrgoL1eiDY-uU30VO0cyyBmroNOKbO9ca45N9SoiZWX09H3MKp89tZN4I5vh78JY..png" class="img-fluid"></p>
<p>So I tried to download another file browser. Blocked:</p>
<p><img src="https://media.discordapp.net/attachments/1145897518270517291/1145898644642484284/AIL4fc_O5NomLeCXnydmTtLdmezKLzP75FuMdYnHSuD31jjZcnYb-DqOOD5apK7FdJhWY36cZm7H1nmIP8UalRPjKOoP8hHULeWlJnVL3Hw_XjpewJnT1RDpE7t5Ytu1RoPuj3tAQi5ULoYOg9DGeU52hUYpX7RSHj5GRzK9oLftc7DUYYJKYWjQ12M5ccFTjcH41DOBMgH_oDOoWkxj2nvdIkKooNfnvI-unpIKTEIGED-KCDtEr8EkGFmPuZy4Cod0OsgJdrSAMJTjOguYqznoP10dRBcTnZpYeeXGai6PfiRzzzkaZFCVDe0Rx9LX6PzBjpgAEaNjMsFbcMafVp_ShGwVEeosrsMgNbJBjA426q_6UWAflJdSohLQV28oypsnaHQngst4pwayaPR6oRMVAdYhqlo8Tx2qAEPUk4ZMqeog5yEVX1NTfwLTR_6Zy5qlBzaMF5JVNkUFCO7tKtHifBqFyBQc8s5QYjxgl4txGhDbyP3lJ6HvS79b..png" class="img-fluid"></p>
<p>But interesting, I could click the “open downloads folder” and get the proper windows file browser open. In this file browser, I could simply single click on applications to open them.</p>
<p>I located explorer.exe, the program which launched the windows UI on the cruise ship computers, and…</p>
<p><img src="https://media.discordapp.net/attachments/1145897518270517291/1145904889935962304/AIL4fc9ofWb0xdlHoF1s2IjUWf95XdaFI6k3TBqNgbySg-w0coa1eqFnADRrR0d-9m9NPruhi1CLplD2rSyBfIoVFcuM_NEdzmJ9_TZ7SbnUqCUfDjiEA6ut5MER7x4Pa2PzdadRhSs-1gDRvUXmDae347OfPFavXATHIZMyvObc16wvoEX2cPXL0wz5sA6nptI3I8pbDIPxP0hifIKzU3LMUvu9rsRMnPHRJspyrEGiKrG-FMU9za4JYJ2yQvGSWt9mNzTtxh8gXDcNKqKjj2zADnJDB-nFij3NAhhsUF-HjoTAvRPoBigKhjypkjaH8Id7NgbmTV4UHMMCm8ANOIXmi6a30IZOVhZQnHvwZmy9yOUhlJKyQTnBKkiszGZVZ1C23u8x-9bfPcfrCNm929S8_PHtmIKpb7F0lVk8F9TpKy4RLFRYGSMCHQzxcP8xBgHCNVUkluryZIubG75a9_jVbS6PisinkMl80iargQOsNhHDgsmNqGe2oSWv..png" class="img-fluid"></p>
<p>For whatever reason, launching the explorer.exe program simply results in another instance of the filebrowser launching, rather than the windows UI launching. So I decided to try some other stuff.</p>
<p><img src="https://media.discordapp.net/attachments/1145897518270517291/1145899637899808798/AIL4fc98jpQGgHr4PP0h4xyHlIpMUhFTqbFKr3-hiek0hMcgCGC763GgqUM7g3mI0EVquELg6fP7Gt9dlZc_XGQ5SdOWo1NDt9iio5jMu92lx3Ss1IKI47JBKWG9jhVLqumIyhBB4lOpYE0eq7fLpT9GZLsyP4whc8ZOnPgL40CnthFdhHqgHzlnknJ7iUB8aGIpJZu3CAHFQO4IqMKZw7n9BE4-wBmHdGKZ1gJWoQ5qqSt26vKfeFb6Ts7yljShZ66V_silB5fCV-c3gns7B-I8oV9Gv14nhQA146jHaq4JGsCNAq5TmcMd84GSdYjYFBN8gK0YHJZfvFFCF-2wUkapbiYxOzFn_W59bPqM6wz1tn3IT_E-ZBJwO_-t5mJzMPdw_oIc16DMs9LfpkEYIA1Ixh-uiYb15c4Q5PiuJwJbzqoo1hXFyu4la9bgTAXWQlB6GUhUtbs9M3835ZhN_BSHmU8X3k4zw5JBf44lDVuLN_ZjKS9-jDFw4pwH..png" class="img-fluid"></p>
<p><img src="https://media.discordapp.net/attachments/1145897518270517291/1145900260837822525/AIL4fc-RJj9KtnYLIHmBdE8xVpPPd8oDBTO-oUXgnMcVpuukkMcJmWeEtQqg0rytLC_VC0wdO8Q0VhwXtg5QxKX9F53zEETn7U4VKefN0_yuOjzwT01tZ9FHJUes5gpnVPJtWa5iPDduQK82qMbaiduAIbrM0uy9XJd7czRszFGOKlJbVJyaIa83CIINV436BRfY7EQux5UGdRv8HhwzD-8bbWJE01fGh5dErEPf2IK4EswYq1SjadiZjK4-Wc6fmDyqkwRKO9FFwD-YAp0BEe7N9Cqa8E_cddFuA-57BYVVRQP3JReDk1aaMqRpyBp1whZcypxPd8HEX4LDTF1lKv8rsK24BWjAkYJHrmJA3A2TWRO4qTTzfi84ZLNxVij93M72o5LfAnT2yw_ZMLoMsJnzhBY0bxqpmysRl8jH4e0DF8HazP3CzyMN92YhndibUY2O-LmuW1vEBzRRZq8v1OOntxrb-Myjm-35XUEc2lXgV1onUHd_MgI7nZvz..png" class="img-fluid"></p>
<p>I tried a few things. Powershell, command prompt, registry editor, no dice.</p>
<p>I went down the list of apps in <code>C:\Windows</code>, checking things out, when I found something interesting unblocked:</p>
<p><img src="https://media.discordapp.net/attachments/1145897518270517291/1145900496746451024/AIL4fc9MTmcuuc7a0BIO1_mnefpdZEXsGl23HkEUX2nS3eWkWaQ7ZBL09OlI8KeA6x0KFvPpMB31tN7OrkhSPbp84gUX-1RHUIY2soxA0dIhuM3DwZFVkeMhOc77ZoLFr6zYPQgbFeTPykSYoGFhLuuZtIww7Dyx_rEfzEAVRcpbwx0DkRnECbd-qV5pHzjpRIUQ2Ov_twyLcOzzKu7uWeye2Ie3GeKk2-Rn9X2-rddfvaAKSBNUFK5513XmUx7adbFpdw8pulwlsB-C8mvJXk0P6lC6w0ZyOu8y_d7eCxk3TaX18f2wnku98V71rvnzNCccdvy79ctVvvCnpCXCaHJKuOEUw2qtxskRjcW-LNM92G00SWA6mLdebjTNmWz8ys4Kh1ULrIFVSuFd8Qhy97VyhfxpY_1S4JdI-7nQutGG6pAtp1cSpkD0y86Jc9ogCnpmCmAFeyoev20tevGFWTfF6Mi4ckcSmLVototyjN08l5LJ95HXHaJC-19i..png" class="img-fluid"></p>
<p>The strangest thing about being able to launch this application, window’s “Computer Management” app, located at compmgmt.msc is that it requies administrative privileges to simply launch.</p>
<p>When first bootup, the computer autologins to a default user called “User”. Apparently, the default user was an administrator.</p>
<p>From here, I can get to “task scheduler”. Because I am already an administrator for some reason, I am able to schedule tasks, which can be any abitrary thing.</p>
<p>However, this isn’t really a big deal when it comes to access of this machine itself. All these computers at this pc cafe use image based deployments, and I am presuming these images are immutable so any system changes I make would be reset the moment I log out.</p>
<p>However, with administrative access within the network, I could do things like a Denial-of-Service attack, by eating up bandwidth, or I could seek lateral movement through the network, if the machines aren’t isolated properly.</p>
<p>There were multiple ways this kind of access could have been prevented. Why do the users logged in need administrative access? All they are doing is using discord and playing games, they don’t need administrative access.</p>
<p>Another thing that could have been done is simply preventing me from launching compmgmt.msc, the same way powershell or cmd are prevented.</p>
<p>And finally, they could have used a browser other than edge. The browser on that system is not intended for normal browsing, but rather it’s intended for logging into your online accounts, like Discord or the video game providers. Since that’s the case, why use a fully featured browser that lets you open a file browser? There exist browsers that are far more locked down, and cannot do things like browse files, only open a single webpage — perfect for this usecase.</p>



 ]]></description>
  <category>windows</category>
  <category>cybersecurity</category>
  <guid>https://moonpiedumplings.github.io/playground/csun-computers/</guid>
  <pubDate>Mon, 28 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting situated in my dorms</title>
  <link>https://moonpiedumplings.github.io/blog/dorm/</link>
  <description><![CDATA[ 




<p>For my college, I am going to California State University, Northridge (CSUN). In addition to bringing along normal supplies, I also brought my homelab along.</p>
<p><img src="https://media.discordapp.net/attachments/1084930216314556476/1145222722616578148/IMG_20230826_220529.jpg" class="img-fluid"></p>
<p>On the right, is a desktop comuputer, which would be the server I am using for my homelab things.</p>
<p>On top of that, is my router, which I have configured to wireguard vpn into a VPS I am renting. In addition to that, the router will connect via ethernet to campus internet, and then give me internet, which I have found to be suprisingly faster than accessing campus wifi via internet.</p>
<p>To the left, is my laptop, which I have “docked” there. It connects up to my monitor and keyboard:</p>
<p><img src="https://media.discordapp.net/attachments/1084930216314556476/1145222722922745896/IMG_20230826_220522.jpg" class="img-fluid"></p>
<p>However, the ethernet isn’t currently activated. Apparently, you have to submit a maintenence request for them to turn it on. And since the maintenence workers don’t work on weekends, I have to wait until monday.</p>
<p>One thing that would really suck is if it wasn’t just the wifi that used eduroam to authenticate, but also the ethernet.</p>
<p>Eduroam wifi requires special tools to authenticate, and it’s possible that my router may not have these tools installed.</p>
<p>I visited <a href="https://test-ipv6.com" class="uri">https://test-ipv6.com</a> in order to test ipv6 networking:</p>
<p><img src="https://media.discordapp.net/attachments/749116247245062164/1145420511581573210/image.png" class="img-fluid"></p>
<p>I did some futher testing. Both my phone, my laptop, and my other laptop had different public ip addresses. Except they weren’t truly public:</p>
<pre><code>[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ nmap -sV 130.166.192.250
Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-27 11:10 PDT
Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn
Nmap done: 1 IP address (0 hosts up) scanned in 3.07 seconds
[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ nmap -Pn 130.166.192.250
Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-27 11:10 PDT
sits here forever</code></pre>
<p>It seems that, despite the machines having public ip addresses, there is a a firewall in place to prevent any access from the external world. So it isn’t truly a “public” ip address.</p>
<p>The output of <code>ip a</code> agrees with this.</p>
<pre><code>[moonpie@cachyos-x8664 ~]$ ip a
... extraneous stuff omitted for brevity
...
3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 4c:d5:77:2d:b2:6d brd ff:ff:ff:ff:ff:ff
    inet 10.40.66.133/20 brd 10.40.79.255 scope global dynamic noprefixroute wlan0
       valid_lft 26229sec preferred_lft 26229sec
    inet6 fe80::e25c:14be:fd65:8944/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever</code></pre>
<p>So despite having private ip addresses, each and every ip address maps to a public ip address.</p>
<p>Apparently the whole of <a href="https://www.whois.com/whois/130.166.0.0">130.166.0.0/16</a> is owned by CSUN.</p>
<p>This is honestly a tragedy. Entire countries don’t have ipv4, only v6 because the US hoards v4 addresses, like in this case, what could be one or a few NAT’s is instead an ip address for every device.</p>
<p>As for speed:</p>
<p><img src="https://media.discordapp.net/attachments/749116247245062164/1145419395548598433/image.png" class="img-fluid"></p>
<p>Pretty good, but it’s 11 AM when I did this. That’s more than double the speeds I was seeing last night, something around 110 down and 20 up. I may rerun the test again at a more congested time just to make sure.</p>
<p>Overall, the setup is niceish, but not having ethernet working immediately is frustrating.</p>
<p>Alright, a week later I got ethernet working. My router is set up and when I test the speeds on my router internet:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/images/routerspeedtest.jpg" class="img-fluid"></p>
<p>Vs the campus wifi:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/images/eduroamspeedtest.jpg" class="img-fluid"></p>
<p>I’m seeing around double the speeds, as opposed to normal campus wifi.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/dorm/</guid>
  <pubDate>Sun, 27 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Firefox Setup</title>
  <link>https://moonpiedumplings.github.io/blog/firefox/</link>
  <description><![CDATA[ 




<section id="multiple-profiles" class="level1">
<h1>Multiple Profiles</h1>
<p>So Mozilla, the company behind the Firefox web browser, offers a feature called Firefox sync. It enables you to sync your firefox browser, with your mozilla account, to any device.</p>
<p>However, it has a caveat: it can only sync one firefox profile. Firefox profiles, are basically completely different instances on firefox, capable of having every single thing be seperate, down to things like advanced settings.</p>
<p>Generally, what is recommended to do to seperate accounts, is to use <a href="https://support.mozilla.org/en-US/kb/containers">firefox multi account containers</a>. These seperates cookies and logins between sites. This lets people protect their privacy, because sites like Facebook can no longer snoop to see what other sites have also given you a facebook cookie.</p>
<p>However, I found multi account containers very frustrating to use. If you are trying to manage multiple accounts on the same site, on a site that doesn’t let you do that natively (google/gmail do, but microsoft doesn’t), it constantly asks you if you are sure that you want to open this site in this container. In addition to that, it does that for other sites as well, like google search, which makes it very frustrating.</p>
<p>Firefox profiles, don’t have that annoyance, but I also enjoy the greater degree of seperation they give. Because each firefox profile can have completely differenct settings, this means that I can do things like configure one firefox profile for performance, but at the cost of stability. However, my schoolwork profile is configured never to crash, because it needs to be reliable. Multi account containers can’t do that.</p>
<section id="default-applications" class="level2">
<h2 class="anchored" data-anchor-id="default-applications">Default Applications</h2>
<p>Because I use multiple profiles, I would like the option to chose what link each firefox profile opens in.</p>
<p>So far, I’ve tried this command <code>xdg-settings set default-web-browser none.desktop</code>, with the goal of a “choose application” screen appearing that then lets me run <code>firefox -p profilename</code> to open a websit ein a specific profile, but it didn’t work.</p>
<p>I would like to try some further stuff, but if it doesn’t work out, I can just default to the “play” profile which is my profile for personal use and the like</p>
</section>
</section>
<section id="syncthing" class="level1">
<h1>Syncthing</h1>
<p>Because I can’t use the native firefox profiles to sync, I had to find other solutions. Originally, I used the graphical frontend for <a href="https://en.wikipedia.org/wiki/Rsync">rsync</a>, <a href="https://en.wikipedia.org/wiki/Grsync">Grsync</a>, syncing into a usb drive, into the computer, and vice versa, to sync between computers. However, this was extremely slow, because apparently usb flash drive’s suck at transferring many small files.</p>
<p>I later switched to another solution, syncthing. Syncthing can keep folders of two computers synchronized, from anywhere in the world.</p>
<p>But it wasn’t perfect at first. In order to get it to work properly, I had to add the proper <a href="https://docs.syncthing.net/users/firewall.html">firewall rules</a>. Onlydid after this did syncing work.</p>
<p>Another issue I had with it was that it synced the cookies file of firefox. Cookies, are where most sites store the session tokens, a common way of knowing that you are logged in on this device. However, session tokens also present a security risk. All an attacker needs to get access to the login of a site is a session token (stored in the cookies.sqlite file for firefox), which is often stored unencrypted, in areas the currently logged in user can read and write to. (see <a href="https://en.wikipedia.org/wiki/Session_hijacking">session hijacking</a>)</p>
<p>Because my session tokens were being transfered to another machine, google and some other services thought I was getting hacked, and forced me to do lot’s of confirmations, and “yes it’s me.” Annoying, but a reasonable security measure.</p>
<p>So I had to configure syncthing to not sync certain files.</p>
<p><code>*cookies.sqlite*</code>.</p>
<p>This partical <a href="https://en.wikipedia.org/wiki/Glob_(programming)">glob match</a> will exclude firefox’s cookies.sqlite file, and the cookies.sqlite-wal file, which is a journaling file. In computer filesystems, journals record changes that are going to be made to other files or the filesystem before they are made, in order to make data recovery from an abrupt stop, like a crash possible. If the journal is complete, then the computer can simply finish the changes by reading the journal. If the journal is incomplete, then the computer can simply not make the changes, as having an intact cookies.sqlite file is more important than a cookie or two.</p>
<p>Finally, you cannot have both firefox instances running at once. This will cause syncthing to get confused, as it is attempting to make the most recent version of the file propogate, but both computers have the most recent version.</p>
<p>This let to the creation of lots of .sync-conflict files, and firefox giving me a warning: <a href="https://support.mozilla.org/en-US/kb/fix-bookmarks-and-history-will-not-be-functional">The bookmarks and history system will not be functional</a>. I tried deleting the sync conflict files, but nothing changed.</p>
<p>I ended up having to manually repair that firefox profile, by creating a new one and <a href="https://support.mozilla.org/en-US/kb/recovering-important-data-from-an-old-profile#w_copying-files-between-profile-folders">copying the important data over</a></p>
<p>One more thing, made later: You can’t quit firefox with cntrl+q, as this will sometimes leave an unsyncable file. You have to close firefox from the desktop UI, I usually just use KDE Plasma to close everything at once.</p>


</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/firefox/</guid>
  <pubDate>Wed, 09 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tmux</title>
  <link>https://moonpiedumplings.github.io/guides/tmux/</link>
  <description><![CDATA[ 




<section id="what-is-tmux" class="level1">
<h1>What is tmux?</h1>
<p>Tmux is what’s called a terminal multiplexer. Essentially, it lets you split one terminal window, into multiple similar to how a your desktop interface lets you use multiple windows at once. It has more features than that, but the multiplexing is what this article is going to focus on.</p>
</section>
<section id="how-to-use-tmux" class="level1">
<h1>How to use tmux</h1>
<p>You can launch tmux with the <code>tmux</code> command.</p>
<p>Tmux works by using a prefix key, which you enter first, before entering another key to enter a command. By default, this prefix key is Cntrl + B.</p>
<section id="window-control" class="level2">
<h2 class="anchored" data-anchor-id="window-control">Window control</h2>
<p>Tmux’s most basic and essential feature is creating more windows. First, input the prefix key (default is control + b), and then another key to tell tmux to do something:</p>
<table class="table">
<thead>
<tr class="header">
<th>key</th>
<th>action</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>c</td>
<td>create new window</td>
</tr>
<tr class="even">
<td>p</td>
<td>previous window</td>
</tr>
<tr class="odd">
<td>n</td>
<td>next window</td>
</tr>
<tr class="even">
<td>0, 1, 2, …</td>
<td>go to specific numbered window</td>
</tr>
<tr class="odd">
<td>&amp;</td>
<td>kill window</td>
</tr>
</tbody>
</table>
</section>
<section id="copyscroll-mode" class="level2">
<h2 class="anchored" data-anchor-id="copyscroll-mode">Copy/Scroll mode</h2>
<p>Because you can’t scroll normally in tmux, you have to enter a special scroll mode with prefix + [. In this scroll mode, you can use q to quit, Control S to search down, and Control R to search upwards. After searching, n goes to the next item, and Shift+n goes to the previous one. q exits search.</p>
</section>
<section id="attatchdetatch" class="level2">
<h2 class="anchored" data-anchor-id="attatchdetatch">Attatch/Detatch</h2>
<p><code>D</code> detaches.</p>
<p>You can list active sessions with <code>tmux ls</code></p>
<p><code>tmux attach -t [sessionnumber]</code> to reattach. Or <code>tmux a</code> for a shorter verb.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/guides/tmux/</guid>
  <pubDate>Mon, 07 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Switching to opensuse tumbleweed, research into nixos</title>
  <link>https://moonpiedumplings.github.io/blog/switch-tumbleweed/</link>
  <description><![CDATA[ 




<p>I recently switched from opensuse leap to opensuse tumbleweed. The upgrade process was almost completely seamless. I simply followed the <a href="https://en.opensuse.org/openSUSE:Tumbleweed_upgrade">official documentation</a> from opensuse.</p>
<p>However, after I upgraded to tumbleweed, secure boot wasn’t working. I decided to do a fresh reinstall of tumbleweed… and secure boot still didnt’ work.</p>
<p>However, other than that, I a very happy with opensuse tumbleweed. The repositories are large and kept up do date, and some packages which weren’t available or were more dated on opensuse leap such as gocryptfs, syncthing, or firefox, where available in the repositories. I did not have to use nix to install them.</p>
<p>In addition to that, the <a href="https://en.opensuse.org/SDB:OBS_Package_Installer">opi</a> command line helper, lets you easily install third party packages from the open build service, or repositories like microsoft’s, so that you can get packages like microsoft edge or vscode, without having to use nix.</p>
<p>However, secure boot not working is detrimental for me. I did a little bit of asking around, and another user complained about a similar struggle, claiming that they have never gotten opensuse tumbleweed secure boot working, and my struggle was futile.</p>
<p>Hmm, in my research, I found an open issue: https://bugzilla.opensuse.org/show_bug.cgi?id=1209985. It appears to be a bug in opensuse tumbleweed. That sucks.</p>
<p>It should be automatic, except it isn’t working. I am considering switching to nixos, so that I can have secure boot working, although I don’t really like the most popular implementatio of secure boot on nixos, <a href="https://github.com/nix-community/lanzaboote">lanzaboote</a>, because it stores kernels in the esp system partition, which may run out of space because it is usually very small, and nixos often stores many older kernels.</p>
<p>Relevant links:</p>
<p>https://nixos.wiki/wiki/Secure_Boot</p>
<p>https://nixos.wiki/wiki/Security#Filesystem_encryption</p>
<p><a href="https://old.reddit.com/r/NixOS/comments/xrgszw/nixos_full_disk_encryption_with_tpm_and_secure/">reddit post where a commmenter posted instructions</a></p>
<p>https://github.com/DeterminateSystems/bootspec-secureboot</p>
<p>This looks very appealing. Rather than using it with systemd-boot, I might be able to set up grub.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/switch-tumbleweed/</guid>
  <pubDate>Thu, 03 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building my own Server Part 2 — Software</title>
  <link>https://moonpiedumplings.github.io/projects/build-server-2/</link>
  <description><![CDATA[ 




<p>STATUS: see <a href="../build-server-3/">part 3</a>, where I don’t start with openstack.</p>
<p>I have other stuff to do that needs my server working, and since I already have remote libvirt setup, I will just stick to that for now.</p>
<p>But I don’t think I am giving up on openstack, since what I want seems to be possible, just very difficult.</p>
<section id="software" class="level1">
<h1>Software</h1>
<section id="software-suite" class="level2">
<h2 class="anchored" data-anchor-id="software-suite">Software Suite</h2>
<p>I want an easy install, but I also want lots of features. Here are some things I have looked at:</p>
<ul>
<li>Proxmox VE</li>
<li>Xen Orchestra</li>
<li>Openstack</li>
<li><a href="https://github.com/canonical/lxd-ui">Canonicals LXD UI</a></li>
<li>Ovirt</li>
<li>Harvester</li>
<li>OpenVZ</li>
</ul>
</section>
<section id="openstack" class="level2">
<h2 class="anchored" data-anchor-id="openstack">Openstack</h2>
<p>Currently, openstack appeals to me a lot. Although I originally wanted to do a bare metal install, I now realize that that is too time consuming and not realistic, so I am most likely going to use one of the automated methods of installation.</p>
<p><a href="https://docs.openstack.org/kolla-ansible/latest/">Kolla ansible</a></p>
<p>They have an easy <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">deployment guide</a> for an all in one node, perfect for my single server.</p>
<p>I will definitely not use every service, but I do want to use openstack because of the sheer number of services it offers. Openstack offers every single feature of other virtualization platforms, at the cost of complexity. Here are the features that made me decide I needed that complexity.</p>
<section id="skylinehorizon" class="level3">
<h3 class="anchored" data-anchor-id="skylinehorizon">Skyline/Horizon</h3>
<p>Openstack has a previous generation web ui, horizon, and a newer generation web ui, skyline. These web ui’s offer all the features of other web based virtualization platforms like proxmox, but they also let you configure the other things of openstack.</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fwww.itzgeek.com%2Fwp-content%2Fuploads%2F2015%2F07%2FOpenStack-Configure-Horizon-Instance-Console.jpg&amp;f=1&amp;nofb=1&amp;ipt=c31c95fcc86ecd2a334a098fddcf51cbdad6b8c3b3d1bd1257b28dbc4b7cb17e&amp;ipo=images" class="img-fluid"></p>
<p>And they have some special features, like giving you a visual layout of network topology.</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fz6ftW7fUdp4%2Fmaxresdefault.jpg&amp;f=1&amp;nofb=1&amp;ipt=4e02ee4eb9751d8f6d2ae8693ca223d0626deef5779ec2fe01e614be210a4c5e&amp;ipo=images" class="img-fluid"></p>
</section>
<section id="multi-tenancy." class="level3">
<h3 class="anchored" data-anchor-id="multi-tenancy.">Multi tenancy.</h3>
<p>The most important feature of openstack, in my opinion, is it’s multi tenant architechture. Unliek proxmox, which is designed for a single organization, openstack is designed in such a way that you can create extra users, which get their own allocation of resources.</p>
<p>So when I go to college, if anyone wants a VPS to play around in, I can just allocate them a few resources, and then they get their own web ui for playing with servers and networking.</p>
<p>Many public cloud services are actually using openstack in the background for it’s public tenant architecture. Openstack’s dashboards can be rebranded to be your own company:</p>
<p><img src="https://www.scalecloud.co.uk/wp-content/uploads/2017/02/vnc-console.png" class="img-fluid"></p>
</section>
<section id="bare-metal-nodes" class="level3">
<h3 class="anchored" data-anchor-id="bare-metal-nodes">Bare metal nodes</h3>
<p>Openstack saves a lot of trouble by immensely abstracting almost all the manual work that goes into putting together a modern cloud.</p>
<p>It takes it a step further, with it’s ability to treat physical, bare metal machines, as virtual machines, even automating the provisioning the same way you can do so for a virtual machine.</p>
<p><a href="https://docs.openstack.org/newton/admin-guide/baremetal.html">The docs</a> make it sound complex, but it really isn’t all that. By leveraging the <a href="">nova</a> component of openstack, which abstracts the backend drivers of virtual machines (qemu-kvm, xen, or even <a href="https://docs.openstack.org/ocata/config-reference/compute/hypervisor-hyper-v.html">hyper-v</a>) can be used as backend drivers for nova.</p>
<p>However, when combined with <a href="https://docs.openstack.org/ironic/latest/">ironic</a> openstack’s service to configure bare metal nodes, nova can also use bare metal as a driver for compute nodes. This integrates further with services like magnum…</p>
</section>
<section id="magnum" class="level3">
<h3 class="anchored" data-anchor-id="magnum">Magnum</h3>
<p>Magnum is openstack’s kubernetes-as-as-service. It provisions nodes using nova, with kubernetes clusters.</p>
<p>Now here is where I get greedy. Do I need kubernetes? No.&nbsp;Will kubernetes even be useful on a single server setup? No.&nbsp;Do I want kubernetes? Yes.</p>
<p>Here is a video demonstration, where someone uses the web ui to create a cluster using magnum.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/QvS4nDYE2r0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>In addition to that, because openstack magnum uses openstack heat, which provisions nodes from templates, it can be used to do things like auto install nvidia drivers and container runtime.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/P4z2Hdh0l4g?start=262" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>This video is a bit outdated, so heat and magnum are much more mature since then, and have only gained more features.</p>
</section>
<section id="api-and-automation" class="level3">
<h3 class="anchored" data-anchor-id="api-and-automation">Api and Automation</h3>
<p>Openstack is designed from the ground up to be a cloud. It has first class support for their api, and everything that can be done from the UI can also be done from either the command line, or the <a href="https://docs.openstack.org/api-quick-start/">api</a>.</p>
<p>This advanced api makes it easier for other software to interact with openstack. For example, the rancher kubernetes cluster manager supports <a href="https://rke.docs.rancher.com/config-options/cloud-providers/openstack">openstack</a> as a cloud provider. It is capable of requesting nodes, provisioning them, and then setting up a kubernetes cluster entirely from the rancher web gui.</p>
</section>
<section id="zun" class="level3">
<h3 class="anchored" data-anchor-id="zun">Zun</h3>
<p>Openstack zun is the container service for openstack. It doesn’t run them in virtual machines, but instead directly on metal. It’s likely that when I want to run containerized services for actual usage, this is what I will be using instead of kubernetes since I will be using a single server, and thus won’t be able to get the benefits of kubernetes. The benefit I see form using containers is that because I have an nvidia desktop gpu, I won’t be able to use vgpu, a feature that lets you divide the gpu between virtual machines. However, containers have no such limitation.</p>
</section>
</section>
<section id="installing-openstack" class="level2">
<h2 class="anchored" data-anchor-id="installing-openstack">Installing Openstack</h2>
<p>I’ve decided to use the kolla-ansible project to install openstack. It works by using ansible to deploy docker containers, which the openstack services run in.</p>
<p>They have a quickstart guide:</p>
<p><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a></p>
<p>And the ansible playbook can be found here:</p>
<p><a href="https://opendev.org/openstack/kolla-ansible" class="uri">https://opendev.org/openstack/kolla-ansible</a></p>
<p>And they provide a <a href="https://opendev.org/openstack/kolla-ansible/src/branch/master/ansible/inventory/multinode">sample ansible inventory</a> for the all in one node.</p>
<p>I do not need all of those features. I pretty much just want virtualized compute, networking, containers, and kubernetes. I don’t need things like an S3 compatible block storage, a relational database, or an app store. Okay, but maybe I want them.</p>
<p>I will do more research into what I want and what I don’t want, and edit the ansible playbook accordingly.</p>
<p>However, this method of deployment seems to require two NIC’s (network interface cards). I think I have both, but just in case, I noted another method of deployment, <a href="https://docs.openstack.org/openstack-ansible/latest/">openstack ansible</a> (yeah the naming isn’t the greatest), which deploys openstack without using containers, it actaully installs and configures the services on the host operating system.</p>
<p>The openstack ansible <a href="https://docs.openstack.org/openstack-ansible/latest/user/aio/quickstart.html">All in one</a> deployment, doesn’t seem to have the same requirement of two NIC’s, which I do have.</p>
<section id="operating-system" class="level3">
<h3 class="anchored" data-anchor-id="operating-system">Operating system</h3>
<p>But first, I do need to select on an operating system. Openstack is flexible and versatile, and it can be installed on multiple operating systems.</p>
<p>I was originally going to choose a RHEL compatible distro, but then RHEL made changes put the status of those in limbo.</p>
<p>I am currently deciding between:</p>
<ul>
<li>Ubuntu</li>
<li>Debian</li>
<li>RHEL (via a developer subscription)</li>
<li>A RHEL rebuild
<ul>
<li>Rocky Linux</li>
<li>Alma Linux</li>
<li>One of the academic distros, like scientific linux</li>
</ul></li>
<li>Centos Stream</li>
</ul>
<p>The important thing is that it’s a stable release distro with automatic updates. I don’t want to have to do too much manual maintainence. Ideally, I also want this distro to have newerish packages, in case I want to do some tinkering with the underlying OS, and I also want the distro to have a stable release that goes on for longer than my college years. From what I’ve heard, upgrading from one release of an OS to another can be a frustrating process, and I don’t want to have to do this while I’m in the middle of school.</p>
<p>The RHEL rebuilds do appeal to me, but they also come with extra complications, like selinux that I don’t really want to have to deal with.</p>
<p>But after much deliberation, I’ve decided on Rocky Linux. Rocky Linux 9 is officially supported by <a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix.html">kolla ansible</a>. In addition to that, Rock Linux 9 will be <a href="https://endoflife.date/rocky-linux">supported for a good deal of time</a>, with the release being officially supported for 3 years and a bit, and that release will continue to receive security updates for 5 more years after that. More than enough to last me through college.</p>
<p>The install was very simple. I thought I would experience issues because of the Nvidia GPU, as I had been having issues with graphical monitor output with other distros, but I didn’t. A GUI appeared for me, and the install process was exceedingly simple, even simpler than debian or other distros I’ve tried. Of course, the disadvantage was that I couldn’t configure everything, like there was no option to set up users other than root, but it was very quick.</p>
<p>Now, I have RHEL installed.</p>
<p>To make management easier, I will install my favorite web administration system, <a href="../../guides/cockpit-setup/">cockpit</a>. This will also enable me to do remote management operations with a gui, things like partitioning the disks.</p>
<p>Now that I have rocky linux installed, I can install openstack using kolla-ansible.</p>
</section>
<section id="kolla-ansible" class="level3">
<h3 class="anchored" data-anchor-id="kolla-ansible">Kolla-ansible</h3>
<p>I will be following the <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">quick start guide</a></p>
<p>I will briefly go over what I am doing here, edited for my usecase. The first few steps are copy and pasted from the guide linked above.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">sudo dnf install git python3-devel libffi-devel gcc openssl-devel python3-libselinux</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">pip install 'ansible&gt;=6,&lt;8'</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">pip install git+https://opendev.org/openstack/kolla-ansible@master</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">sudo mkdir -p /etc/kolla</span>
<span id="cb4-2">sudo chown $USER:$USER /etc/kolla</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">cp -r /home/moonpie/.local/share/kolla-ansible/etc_examples/kolla/* /etc/kolla</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">cp /home/moonpie/.local/share/kolla-ansible/ansible/inventory/all-in-one /home/moonpie/</span></code></pre></div>
<p>Now, this is the initial setup. I need to customize these things to my liking.</p>
<p>Usernames and passwords a are easy, but I need to make sure the networking is right, especially since my setup will be so unorthodox. Because I am setting this up on my home network, I won’t have public internet access, as my router using <a href="https://en.wikipedia.org/wiki/Network_address_translation">NAT</a></p>
</section>
<section id="router-networking" class="level3">
<h3 class="anchored" data-anchor-id="router-networking">Router Networking</h3>
<p>It requires that I set my two network interfaces to two things: default network interface for everything else, and the neutron external interface.</p>
<p>The neutron external interface can be any physical interface, but internally, it is referred to as br-ex. This interface is responsible for letting the virtual machines interact with the internet.</p>
<p>Anyway, I had a spare router lying around, and I flashed it with <a href="https://www.freshtomato.org/">freshtomato</a> for some more advanced features. I hooked it up to my existing router, so it would be behind NAT, but now I have extra ethernet ports, so I can have a private subnet with my laptop, and the openstack stuff.</p>
<p>I was curious if tomato offered an easy way to expose services to the internet, from behind NAT, something like integration with Cloudfare’s tunnels, but they didn’t.</p>
<p>However, another idea has occured upon me: Why not just host the public parts of openstack… on the public. I could rent a VPS, and host openstack neutron, and maybe the openstack dashboards on the public.</p>
<p>For example, my current vps provdider <a href="https://webdock.io/en/docs/general-information/billing-and-pricing/additional-products#additional-/-reserved-ip-addresses">webdock</a>, gives out a range (/124) of ipv6 addresses, 16 total. Based on the pricing on that page, 1.75 Euros for an additional ipv4 address, I think I can safely assume that ipv4 addresses are more expensive, out of what I am wiling to spend, because of their scarcity.</p>
<p>However, if I can install openstack neutron on a cheap vps, thenH I will be able to give public ipv6 access to the virtual machines, which sounds like a very neat setup.</p>
<p>Since my home server won’t have public internet access I am guessing I have to start by creating a virtual network that links the two machines together, that way they can see eachother and cluster.</p>
<p>Openstack has some interesting diagrams: <a href="https://docs.openstack.org/install-guide/environment-networking.html" class="uri">https://docs.openstack.org/install-guide/environment-networking.html</a>. But I can’t find anything conclusive.</p>
<p>Since I have a router running tomato, I am thinking that I can vpn the entire router into the other machine, so that the vps I am accessing can access everything in the tomato subnet, meaning I won’t have to configure the server itself. The downside is that everything will be vpn’ed, but with a 4 TB upload limit, I’m not too concerned about that right now.</p>
<p>But sadly, webdock seems to be sold out of kvm vps’s, which have better compatibility with docker, so I will probably go looking for another platform.</p>
<p>Anyway, tomato seems to have a wireguard client installed, so I will use that, since wireguard is the fastest vpn client/server available. I found a <a href="https://golb.hplar.ch/2019/01/expose-server-vpn.html">nice guide</a> on setting up pure wireguard. However, it doesn’t discuss connecting the subnet of a router to the vps. I did find another <a href="https://gist.github.com/insdavm/b1034635ab23b8839bf957aa406b5e39">guide</a> that did. Now this guide is older, and some people criticized it for various reasons. However, it does tell me the name of what I am looking for: Site to site.</p>
<p>I found a much simpler guide on <a href="https://ubuntu.com/server/docs/wireguard-vpn-site2site">ubuntu’s website</a>. Rather than A-B-C, I only need the A-B which this offers. In addition to that, there are no iptables rules on this guide.</p>
<p>The minimum specs required for openstack neutron are: ???. The docs suck.</p>
<p>VPS provider overview:</p>
<table class="table">
<thead>
<tr class="header">
<th>Name</th>
<th>CPU</th>
<th>Ram (GB)</th>
<th>Price (/month)</th>
<th>Ipv6</th>
<th>OS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Contabo</td>
<td>4</td>
<td>8</td>
<td>$10.29</td>
<td><a href="https://contabo.com/en/customer-support/faq/#how-can-i-use-ipv6-on-my-server-at-contabo">18 quintillion</a></td>
<td>Rocky</td>
</tr>
</tbody>
</table>
<p>Okay, contabo wins. I was gonna do an actual comparison between multiple vps providers, but contabo has great specs, and it is trusted by people when I have asked around.</p>
<p>I don’t want to spend money, but this is a nice deal.</p>
<p>Also, contabo offers 32 TB out, and unlimiited in. This is definitely a very good choice.</p>
<p>After visiting <a href="https://test-ipv6.com/" class="uri">https://test-ipv6.com/</a> and realizing that my home residential wifi does not have ipv6 enabled by default (although there is an option in the router settings), I realize that the college dorms may not have ipv6 support. In that case, vpning into the remote server, which does have ipv6 support, would give me ipv6 support.</p>
<p>Now that I have a vps, I am trying to get wireguard working, by testing with my laptop I started out with the guide from ubuntu, but that doesn’t work. In addition to not having access to subnets I can only access on my laptop from my server, not even the vpn is working correctly:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">moonpie@lizard:~&gt; curl --interface wgA ifconfig.me</span>
<span id="cb7-2">curl: (7) Failed to connect to ifconfig.me port 80 after 1 ms: Couldn't connect to server</span></code></pre></div>
<p>I found another <a href="https://www.laroberto.com/remote-lan-access-with-wireguard/">guide</a> but yet again, it’s another A-B-C guide.</p>
<p>I found a promising <a href="https://unix.stackexchange.com/questions/602267/wireguard-connection-between-two-lans-with-wireguard-boxes-behind-routers">stackexchange answer</a> with an interesting commmand I have tried:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">ip route add 192.168.122.0/24 via 10.10.9.0 dev wgB</span></code></pre></div>
<p>Where the 192.168.122.0/24 is the subnet I am trying to expose.</p>
<p>Okay, at this piont, I understand what I want to do pretty well. I think I will use the A-B-C guides as a template, except I only need A-B, and the router needs to eb the device that is configured not to have a permanent, static ip address, like the clients are.</p>
<p>I got lucky when I was browsing lemmy, and I found <a href="https://programming.dev/comment/1943135">forum comment</a> related to my exact issue, which then links to a <a href="https://unix.stackexchange.com/questions/638889/make-local-resources-available-when-connected-to-wireguard-vpn">stackexchange question</a>, in which the top answer uses information they sourced from this <a href="https://www.procustodibus.com/blog/2020/11/wireguard-point-to-site-config/">guide</a></p>
<p>I attempted to follow the latter guide, using a simple setup. My laptop, would be my “router”, and I was attempting to expose the vlan subnet created by the libvirt virtual machine manager to my remote server, a vps hosted on contabo.</p>
<p>Ironically, I got the connection to work, but in the wrong direction. My vps could ping my remote server, but my remote server could not ping the virtual machines on my laptop. Interestingl, it could ping my laptop using the ip of the virbr0 virtual network adapter that libvirt creates for a vlan.</p>
<p>I’m guessing that this didn’t work because I’m doing this somewhat backwards, with the device that the</p>
<p>I am guessing because I am doing this somewhat backwards, where the device exposing the lan is behind nat, whereas it is the other way around in the guides that I have seen.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">root@vmi1403809 ~]# ping 192.168.122.1</span>
<span id="cb9-2">PING 192.168.122.1 (192.168.122.1) 56(84) bytes of data.</span>
<span id="cb9-3">64 bytes from 192.168.122.1: icmp_seq=1 ttl=64 time=46.5 ms</span>
<span id="cb9-4">[root@vmi1403809 ~]# ping 192.168.122.201</span>
<span id="cb9-5">PING 192.168.122.201 (192.168.122.201) 56(84) bytes of data.</span>
<span id="cb9-6">From 10.10.9.0 icmp_seq=1 Destination Port Unreachable</span></code></pre></div>
<p>The first is the ip address of my laptop, and the second is the ip address of my debian virtual machine, which is running on my laptop.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">moonpie@lizard:~/vscode/moonpiedumplings.github.io&gt; curl --insecure  http://192.168.122.201:9090</span>
<span id="cb10-2">&lt;html&gt;&lt;head&gt;&lt;title&gt;Moved&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Please use TLS&lt;/body&gt;&lt;/html&gt;</span>
<span id="cb10-3">moonpie@lizard:~/vscode/moonpiedumplings.github.io&gt; curl --insecure  http://192.168.122.201:9090 --interface wgA</span>
<span id="cb10-4">curl: (7) Failed to connect to 192.168.122.201 port 9090 after 0 ms: Couldn't connect to server</span></code></pre></div>
<p>Curl has a feature to bind to a specific interface, and when I try to test a connection using the wgA interface, it can’t connect. At first, I’m annoyed, but in hindsight, this makes sense. Only through the virbr0 interface, can I access the virtual machiens. And the virtual machines, are actually behind their own NAT. They are not public, so why would I be able to ping them?</p>
<p>Libvirt offers <a href="https://jamielinux.com/docs/libvirt-networking-handbook/">several networking options</a>. Bridged is where all virtual machines get public ip addresses. Routed is similar, but they don’t get their own interface, and it works on wirelessly connected devices. And finally, NAT, what I am using does not give virtual machines publicly accessible ip addresses.</p>
<p>Instead of running it on my actual laptop, I will try to run the vpn on the debian virtual machine instead.</p>
<p>I set up wireguard again, one side on the vps I am renting:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wgB.conf</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="/etc/wireguard/wgB.conf" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.1/31</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha site</span></span>
<span id="cb11-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> e763iTZmmMcx7HufUOi5vzmQJ5ZhYBuuqnXh/2ViBjA=</span></span>
<span id="cb11-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.10.0/24,10.10.9.0/31,192.168.122.0/24</span></span></code></pre></div>
</div>
<p>And another side on my virtual machine:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wgA.conf</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="/etc/wireguard/wgA.conf" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.1/31</span></span>
<span id="cb12-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb12-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha site</span></span>
<span id="cb12-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> e763iTZmmMcx7HufUOi5vzmQJ5ZhYBuuqnXh/2ViBjA=</span></span>
<span id="cb12-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.10.0/24,10.10.9.0/31,192.168.122.0/24</span></span></code></pre></div>
</div>
<p>And the wireguard default route didn’t work, so I removed it, and then added the route manually using the ip route tool.</p>
<p>When everything was done, my VPS could ping the ip address of my virtual machine, but not my laptop.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">[root@vmi1403809 ~]# ping 192.168.122.201 # virtual machine ip</span>
<span id="cb13-2">PING 192.168.122.201 (192.168.122.201) 56(84) bytes of data.</span>
<span id="cb13-3">[root@vmi1403809 ~]# ping 192.168.122.1 # laptop ip</span>
<span id="cb13-4">PING 192.168.122.1 (192.168.122.1) 56(84) bytes of data.</span>
<span id="cb13-5"># it just sits here forever.</span></code></pre></div>
<p>Well, this is better than a strange error. However, I don’t know where to go next from here.</p>
<p>Alright, I figured it out. I’ve sourced my information from two different links:</p>
<p>The instructions for wg-quick I used are in the <a href="https://wiki.archlinux.org/title/WireGuard">arch wiki’s wireguard article</a>.</p>
<p>However, I also needed to look at the arch wiki’s <a href="https://wiki.archlinux.org/title/Internet_sharing#Enable_packet_forwarding">NAT article</a>. From that article, if you have docker enabled, you must take some extra steps that make thigns more complex. So I disabled docker, followed the instructions for NAT there.</p>
<p>And on my remote server, I ran <code>ip route add xx.xx.xx.xx/yy via zz.zz.zz.zz</code> where xx is the subnet you want to access remotely, and zz is the ip address of the remote device with access to that subnet.</p>
<p>Anyway, I find this deeply ironic. I originally wanted to deploy wireguard to my router to avoid any kind of complex networking, but because I didn’t have physical access to my router, I was testing on machines with more complex networking, which caused things to not work. This affirms my decision to set up wireguard on my router, rather than on my server, especially since kolla-ansible uses docker to deploy.</p>
<p>Anyway, I will have to look into split tunneling or whatnot, because I may not want to vpn everything.</p>
<p>The <a href="https://wiki.freshtomato.org/doku.php/wireguard_on_freshtomato">freshtomato</a> wiki contains info on how to configure wireguard, including doing things like having it start on boot.</p>
<p>Sadly, the wg-quick command doesn’t seem to be available on the router, but that’s not really a big deal. I can just write a small script which sets this up, using the instructions from the arch wiki article, or even just using wg-quick, because it tells you what steps it is taking to up the wireguard interface.</p>
<p>Here is the wg-quick file on my server:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb14-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.1/31</span></span>
<span id="cb14-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb14-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha site</span></span>
<span id="cb14-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> e763iTZmmMcx7HufUOi5vzmQJ5ZhYBuuqnXh/2ViBjA=</span></span>
<span id="cb14-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.10.0/24,10.10.9.0/31,192.168.122.0/24</span></span></code></pre></div>
<p>Interestingly, I didn’t have to add a specific route using <code>ip</code>. Once nat is set up correctly on one device, the, it somehow knows where to go. I only need to add allowed ips.</p>
<p>Here is configuration file for my “router” (still just testing with virtual machines).</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wgA.conf</strong></pre>
</div>
<div class="sourceCode" id="cb15" data-filename="/etc/wireguard/wgA.conf" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb15-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PreUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> sysctl net.ipv4.ip_forward=1</span></span>
<span id="cb15-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PreUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> iptables -t nat -A POSTROUTING -o enp1s0 -j MASQUERADE</span></span>
<span id="cb15-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PreUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span></span>
<span id="cb15-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb15-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> iptables -A FORWARD -i %i -o enp1s0 -j ACCEPT</span></span>
<span id="cb15-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.0/31</span></span>
<span id="cb15-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remote Server</span></span>
<span id="cb15-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> pxCx+cEs6hoI4EE+XdE4lQiLkJRbG4JGQwXz6d/hZDM=</span></span>
<span id="cb15-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.0/31</span></span>
<span id="cb15-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Endpoint </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;VPS IP&gt;:51000</span></span>
<span id="cb15-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PersistentKeepalive </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span></code></pre></div>
</div>
<p>Here are the steps my “router” takes when I use <code>wg-quick up wgA</code></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">root@debian:/home/moonpie# wg-quick up wgA</span>
<span id="cb16-2">[#] sysctl net.ipv4.ip_forward=1</span>
<span id="cb16-3">net.ipv4.ip_forward = 1</span>
<span id="cb16-4">[#] iptables -t nat -A POSTROUTING -o enp1s0 -j MASQUERADE</span>
<span id="cb16-5">[#] iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span>
<span id="cb16-6">[#] ip link add wgA type wireguard</span>
<span id="cb16-7">[#] wg setconf wgA /dev/fd/63</span>
<span id="cb16-8">[#] ip -4 address add 10.10.9.0/31 dev wgA</span>
<span id="cb16-9">[#] ip link set mtu 1420 up dev wgA</span>
<span id="cb16-10">[#] wg set wgA private-key /etc/wireguard/wgA.key</span>
<span id="cb16-11">[#] iptables -A FORWARD -i wgA -o enp1s0 -j ACCEPT</span></code></pre></div>
<p>In this case, wgA is the wireguard interface, and enp1s0 is the interface I want to configure NAT on, so that I can access the subnet behind it.</p>
<p>Actually, wg-quick appears to just be a bash script, and I might be able to transfer that over to freshtomato.</p>
<p>The best feature of this wireguard setup is that, since it doesn’t route everything through the vpn tunnel like I was initially expecting, meaning I won’t have to worry about bandwidth or speed, since I won’t be routing all traffic through my router to a remote router.</p>
<p>In addition to all this, I can use nmap to make sure that my remote server can actually see the other services, as they are behind a kind of NAT.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">root@vmi1403809 wireguard]# nmap -sV 192.168.122.1</span>
<span id="cb17-2">Starting Nmap 7.91 ( https://nmap.org ) at 2023-08-18 11:29 PDT</span>
<span id="cb17-3">Nmap scan report for 192.168.122.1</span>
<span id="cb17-4">Host is up (0.068s latency).</span>
<span id="cb17-5">Not shown: 997 closed ports</span>
<span id="cb17-6">PORT     STATE SERVICE         VERSION</span>
<span id="cb17-7">53/tcp   open  domain          dnsmasq 2.89</span>
<span id="cb17-8">8000/tcp open  http            SimpleHTTPServer 0.6 (Python 3.11.4)</span>
<span id="cb17-9">9090/tcp open  ssl/zeus-admin?</span>
<span id="cb17-10">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span>
<span id="cb17-11">SF-Port9090-TCP:V=7.91%T=SSL%I=7%D=8/18%Time=64DFB8E1%P=x86_64-redhat-linu</span>
<span id="cb17-12">...</span>
<span id="cb17-13">... For some reason nmap can't detect cockpit so it's just 20 lines of this nonsense.</span>
<span id="cb17-14">...</span>
<span id="cb17-15">20\x20\x20\x20\x20\x20}\n</span>
<span id="cb17-16">SF:\x20\x20\x20\x20\x20\x20\x20\x20p\x20");</span>
<span id="cb17-17"></span>
<span id="cb17-18">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span>
<span id="cb17-19">Nmap done: 1 IP address (1 host up) scanned in 186.81 seconds</span></code></pre></div>
<p>Nmap detects my python http server, and cockpit.</p>
<p>Alright, next I want to configure firewall usage. I don’t want the remote wireguard server to have access to everything on my “home” network. I am likely going to do this by creating vlan’s, which can be <a href="https://hobo.house/2016/03/10/build-secure-vlan-networks-with-shibby-tomato-router-firmware/">wifi</a>, by creating virtual wireless, or <a href="https://wiki.freshtomato.org/doku.php/advanced-vlan">ethernet</a>, by making it so that certain ethernet ports are trapped in a vlan. With this setup, I can ensure that my server is kept isolated from the rest of my devices, in case it gets compromised. (Although doing it this way is kinda pointless since I may be using a VPN on my devices, running through that same server to get around college wifi restrictions, if they exist).</p>
<p>So I setup wireguard on my server:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wg-stack.conf</strong></pre>
</div>
<div class="sourceCode" id="cb18" data-filename="/etc/wireguard/wg-stack.conf" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb18-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.11.1/24</span></span>
<span id="cb18-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb18-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># My router</span></span>
<span id="cb18-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> mFyQQk8/w7AhLSEtJKkcNhMNLPcyBMFHu02TI+OUj2Y=</span></span>
<span id="cb18-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.11.0/24,192.168.17.0/24</span></span></code></pre></div>
</div>
<p>And here is the wg-stack.sh script that will be run on my router:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>wg-stack.sh</strong></pre>
</div>
<div class="sourceCode" id="cb19" data-filename="wg-stack.sh" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1"># enabled by default</span>
<span id="cb19-2">#echo 1 &gt; /proc/sys/net/ipv4/conf/br2/forwarding</span>
<span id="cb19-3"></span>
<span id="cb19-4">#iptables -t nat -A POSTROUTING -o br2 -j MASQUERADE</span>
<span id="cb19-5">#iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span>
<span id="cb19-6">modprobe wireguard</span>
<span id="cb19-7">ip link add wg-stack type wireguard</span>
<span id="cb19-8">wg setconf wg-stack /jffs/wg-stack-setconf</span>
<span id="cb19-9">ip -4 address add 10.10.11.0/24 dev wg-stack</span>
<span id="cb19-10">ip link set mtu 1420 up dev wg-stack</span>
<span id="cb19-11">iptables -A FORWARD -i wg-stack -o br2 -j ACCEPT</span></code></pre></div>
</div>
<p>Some of the rules were enabled by default, so I commented them out.</p>
<p>And here is the wg-stack-setconf file that the above script calls upon:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/jffs/wg-stack-setconf</strong></pre>
</div>
<div class="sourceCode" id="cb20" data-filename="/jffs/wg-stack-setconf" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb20-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PrivateKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NO</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Address = 10.10.0.0/24</span></span>
<span id="cb20-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Contabo VPS</span></span>
<span id="cb20-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> xO2fVY8uh4SDx5VH+24Mxx+WIXSnfY3Vw9CDBW7cMnY=</span></span>
<span id="cb20-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.11.0/24</span></span>
<span id="cb20-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Endpoint </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;VPS IP&gt;:51000</span></span>
<span id="cb20-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PersistentKeepalive </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span></code></pre></div>
</div>
<p>I have to manually specify the private key, because the <code>wg setconf</code> can’t run abitrary commands.</p>
<p>This works… one way.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">root@unknown:/jffs# ping 10.10.11.1</span>
<span id="cb21-2">PING 10.10.11.1 (10.10.11.1): 56 data bytes</span>
<span id="cb21-3">64 bytes from 10.10.11.1: seq=0 ttl=64 time=43.491 ms</span>
<span id="cb21-4">root@unknown:/jffs# curl 10.10.11.1:8000</span>
<span id="cb21-5">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span id="cb21-6">&lt;html&gt;</span>
<span id="cb21-7">....</span>
<span id="cb21-8">.... I ran a simple http server to test if my router could see ports of my server.</span>
<span id="cb21-9">....</span>
<span id="cb21-10">&lt;/html&gt;</span></code></pre></div>
<p>However, when my server attempts to ping or curl my router, it simply waits forever. I think this may have something to do with firewalll rules, where the router is refusing to respond to even ping connections.</p>
<p>After doing some more research, it appears my iptables rules deny all connections to my router, and I can attempt to access subnets other than my router itself, but they just redirect to my router:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">[root@vmi1403809 ~]# ping 192.168.17.152</span>
<span id="cb22-2">PING 192.168.17.152 (192.168.17.152) 56(84) bytes of data.</span>
<span id="cb22-3">64 bytes from 192.168.17.152: icmp_seq=1 ttl=63 time=41.9 ms</span>
<span id="cb22-4">[root@vmi1403809 ~]# curl 192.168.17.152:8000</span>
<span id="cb22-5">curl: (7) Failed to connect to 192.168.17.152 port 8000: No route to host</span>
<span id="cb22-6">[root@vmi1403809 ~]# nmap -sV 192.168.17.152</span>
<span id="cb22-7">Starting Nmap 7.91 ( https://nmap.org ) at 2023-08-19 20:18 PDT</span>
<span id="cb22-8">Nmap scan report for 192.168.17.152</span>
<span id="cb22-9">Host is up (0.043s latency).</span>
<span id="cb22-10">Not shown: 999 filtered ports</span>
<span id="cb22-11">PORT   STATE  SERVICE VERSION</span>
<span id="cb22-12">22/tcp closed ssh</span>
<span id="cb22-13"></span>
<span id="cb22-14">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span>
<span id="cb22-15">Nmap done: 1 IP address (1 host up) scanned in 5.53 seconds</span></code></pre></div>
<p>The nmap scan is especially strange, considering I am using my laptop to test, which doesn’t have an ssh server running. My router however, does, but it also has an http server running (the web management interface), which nmap doesn’t seem to see. I am guessing my router is not playing the role of NAT properly.</p>
<p>Nope, I was wrong. The problem was not my router firewall, but rather my computer firewall. I forgot that unlike Arch Linux, the Arch Linux based linux distribution I was using, CachyOS did come with a firewall enabled.</p>
<p>After disabling the firewall:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">[root@vmi1403809 ~]# nmap -sV 192.168.17.152</span>
<span id="cb23-2">Starting Nmap 7.91 ( https://nmap.org ) at 2023-08-20 03:21 PDT</span>
<span id="cb23-3">Nmap scan report for 192.168.17.152</span>
<span id="cb23-4">Host is up (0.042s latency).</span>
<span id="cb23-5">Not shown: 999 closed ports</span>
<span id="cb23-6">PORT     STATE SERVICE VERSION</span>
<span id="cb23-7">8000/tcp open  http    SimpleHTTPServer 0.6 (Python 3.11.4)</span>
<span id="cb23-8"></span>
<span id="cb23-9">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span>
<span id="cb23-10">Nmap done: 1 IP address (1 host up) scanned in 7.78 seconds</span></code></pre></div>
<p>For testing purposes, I run a simple http server using <code>python -m http.server</code> which launches this service in port 8000.</p>
<p>Alright, upon later investigation, it appears I was both right and wrong.</p>
<p>The <code>iptables -A FORWARD -i wg-stack -o br2 -j ACCEPT</code> only accepts <em>forwarded</em> packets, giving it access to devices in the br2 vlan, whereas input in the one that makes it respond to ping probes or show servcies. This is actually good, because my router won’t be exposed to my rented server, only the subnet behind it will. Without a policy to accept input packets, the router won’t even respond to ping probes.</p>
<p>However, I do have one final thing to handle:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">root@unknown:/jffs# ./wg-stack.sh </span>
<span id="cb24-2">RTNETLINK answers: Network is unreachable</span></code></pre></div>
<p>However, when I run all the steps individually, this error doesn’t occur. This error occurs when I run the <code>ip link set mtu 1420 up dev wg-stack</code>, before the previous step in the script, assigning the ip address to the interface, isn’t done. I am guessing that the script runs too quickly, and some steps are run before the previous step is complete. I simply need to add a <code>sleep</code> command, which inserts an artificial wait in the process.</p>
<p>With all said and done, here is the script I have placed on my router:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/jffs/wg-stack.sh</strong></pre>
</div>
<div class="sourceCode" id="cb25" data-filename="/jffs/wg-stack.sh" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">modprobe wireguard</span>
<span id="cb25-2">sleep 2s</span>
<span id="cb25-3">ip link add wg-stack type wireguard</span>
<span id="cb25-4">sleep 2s</span>
<span id="cb25-5">wg setconf wg-stack /jffs/wg-stack-setconf</span>
<span id="cb25-6">sleep 2s</span>
<span id="cb25-7">ip -4 address add 10.10.11.0/24 dev wg-stack</span>
<span id="cb25-8">sleep 3s</span>
<span id="cb25-9">ip link set mtu 1420 up dev wg-stack</span>
<span id="cb25-10">sleep 2s</span>
<span id="cb25-11">iptables -A FORWARD -i wg-stack -o br2 -j ACCEPT</span></code></pre></div>
</div>
<p>And following the advice of the <a href="https://wiki.freshtomato.org/doku.php/wireguard_on_freshtomato#running_wireguard_at_boot">freshtomato wiki</a>, I have placed this script in the firewall section:</p>
<p><code>until [ $(ping -c 1 -A -W 5 -q google.com &amp;&gt;/dev/null &amp;&amp; echo 1 || echo 0) -eq 1 ]; do sleep 5; done; /jffs/wg-stack.sh</code></p>
<p>On my remote server, I can simply enable the wg-quick service</p>
<p><code>systemctl enable wg-quick@wg-stack</code></p>
<p>And now wireguard will be started automatically on both my router and the server.</p>
<p>Because my home server, is not accessible to the internet, I must proxy the connection through the contabo vps before I can get in. My ssh config uses the <code>ProxyJump</code> feature to proxy the connection from one vps into another.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>~/.ssh/config</strong></pre>
</div>
<div class="sourceCode" id="cb26" data-filename="~/.ssh/config" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb26-1">Host moontron</span>
<span id="cb26-2">                HostName VPS IP</span>
<span id="cb26-3">                port 22</span>
<span id="cb26-4">                user root</span>
<span id="cb26-5">                IdentityFile /home/moonpie/.ssh/moontron</span>
<span id="cb26-6">Host moonstack</span>
<span id="cb26-7">                Hostname 192.168.17.197</span>
<span id="cb26-8">                port 22</span>
<span id="cb26-9">                user root</span>
<span id="cb26-10">                IdentityFile /home/moonpie/.ssh/moonstack</span>
<span id="cb26-11">                ProxyJump moontron</span></code></pre></div>
</div>
<p>With this, I can ssh into my <code>moonstack</code> machine from anywhere in the world.</p>
<p>And because ansible can read the ssh config, I can simply plug the host nicknames into my ansible inventory, and my ansible can configure them, from anywhere in the world.</p>
</section>
<section id="vps-networking" class="level3">
<h3 class="anchored" data-anchor-id="vps-networking">VPS Networking</h3>
<p>Of course, this now makes my kolla-ansible installation more complex. Because I have now have two servers, to distribute to, and I also to deal with having to wireguard into my servers in order to be able to ssh into them.</p>
<p>Beyond that, I have switched from a single node installation, to a multi node installation.</p>
<p>Now that I have ssh and networking set up, I need to select the features and functions of my nodes.</p>
<p>Kolla-ansible sorts nodes into 4 types.</p>
<ul>
<li>Control: These run the dashboards, api and the like.</li>
<li>Networking: This runs the loadbalancers, virtual networking, and the like</li>
<li>Compute: VM’s and containers are hosted here</li>
<li>Storage: Various types of storage are on this node.</li>
</ul>
<p>From the the <a href="https://opendev.org/openstack/kolla-ansible/src/branch/master/etc/kolla/globals.yml">kolla-ansible globals</a>:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb27-1"># This is the raw interface given to neutron as its external network port. Even</span>
<span id="cb27-2">    # though an IP address can exist on this interface, it will be unusable in most</span>
<span id="cb27-3">    # configurations. It is recommended this interface not be configured with any IP</span>
<span id="cb27-4">    # addresses for that reason.</span>
<span id="cb27-5">    #neutron_external_interface: "eth1"</span></code></pre></div>
<p>Based on this, it appears that if I attempt to use the singlular ethernet interface on my vps, then I will end up breaking my setup, as that ethernet interface will stop working normally.</p>
<p>I found something interesting on the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html#example-shared-interface">openstack docs</a>. Apparently, this setup is possible, but “non trivial” to set up persistently, however, it is automated by Kayobe.</p>
<p>I went through <a href="https://docs.openstack.org/kayobe/latest/deployment.html">kayobe’s documentation</a>, and found a <a href="https://www.youtube.com/watch?v=teWgCm6Aq1c">youtube tutorial</a>, and the deployment looks to be much more complex than kolla-ansible, which is frustrating to discover.</p>
<p>Despite Kolla-ansible’s claims of creating a bridge interface and virtual ethernet’s persistently being “non-trivial”, I think they are easier to set up than the alternative options available me.</p>
<p>Both <a href="https://docs.openstack.org/project-deploy-guide/openstack-ansible/latest/">openstack-ansible</a>, and kayobe, simply aren’t as well documented. So it’s back to networking.</p>
<p>I found a <a href="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking">useful article from Red Hat</a>, which is a very good overview of what virtual network interfaces I have available to me on a modern linux sysytem.</p>
<p>The two that it looks like I need to pick, are either macvlan, or bridge mode. Both of those modes allow you to create virtual ethernet interfaces</p>
<section id="macvtap" class="level4">
<h4 class="anchored" data-anchor-id="macvtap">Macvtap</h4>
<p>Because Rocky Linux uses networkmanager, I will use the nmcli tool to do stuff.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1">nmcli connection add type macvlan dev enp1s0 mode bridge tap yes ifname macvtap0</span>
<span id="cb28-2">....</span>
<span id="cb28-3"></span>
<span id="cb28-4"></span>
<span id="cb28-5">ip a</span>
<span id="cb28-6">....</span>
<span id="cb28-7">4: macvtap0@enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 500</span>
<span id="cb28-8">    link/ether 56:19:3c:7a:b7:e5 brd ff:ff:ff:ff:ff:ff</span>
<span id="cb28-9">    inet 192.168.122.78/24 brd 192.168.122.255 scope global dynamic noprefixroute macvtap0</span>
<span id="cb28-10">       valid_lft 3344sec preferred_lft 3344sec</span>
<span id="cb28-11">    inet6 fe80::2c2:9892:c942:1fec/64 scope link noprefixroute </span>
<span id="cb28-12">       valid_lft forever preferred_lft forever</span></code></pre></div>
<p>This simply creates a device and all, which is able to get ip’s from the external world, and in this case, the parent ethernet interface can still be used normally.</p>
<p>You can disable automatic configuration of ipv4/v6 with</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb29-1">nmcli connection modify macvlan-macvtap0 ipv6.method "disabled"</span>
<span id="cb29-2">nmcli connection modify macvlan-macvtap0 ipv4.method "disabled"</span></code></pre></div>
<p>Which I will probably need, as I won’t be paying for another ipv4 address.</p>
<p>The nice thing about using NetworkManager is that configuration using NetworkManager is persistent across reboots. Although I don’t want to jump to conclusions, it’s possible that “non-trivial to set up in a persistent manner” is based on older information.</p>
<p>I further expermimented with macvlan. Since openstack will probably be doing more advanced networking, I attempted to create another macvtap device with the parent being the already existing macvtap device. It got created, but it didn’t get internet access, nor did it automatically get it’s own ip address. I don’t know what this means when it comes to how openstack neutron will interact with it, as neutron may want to do something like that.</p>
<p>I found a <a href="https://desertislandit.wordpress.com/2016/02/08/neutron-a-flat-network-in-a-single-node-single-nic-openstack-environment-kilo-on-ubuntu-14-0-4/">wordpress blogpost</a> <a href="https://web.archive.org/web/20230824205310/https://desertislandit.wordpress.com/2016/02/08/neutron-a-flat-network-in-a-single-node-single-nic-openstack-environment-kilo-on-ubuntu-14-0-4/">archive</a>. In this blog, someone uses the openvswitch to create a bridge, in the necessary setup for neutron to be able to do stuff.</p>
<p>Based on what that setup looks like, it doesn’t look like neutron is given an interface that is a slave to the bridge, but it looks like an interface which is under the bridge is created for my machine to use normally, while neutron consumes the bridge itself for usage and creation of more virtual interfaces. However, this guide is for deploying openstack neutron on bare metal, and kolla-ansible works by deploying in docker containers.</p>
<p>I found <a href="https://docs.openstack.org/project-deploy-guide/openstack-ansible/newton/app-config-test.html">another relevant doc</a> on the openstack website, about using creating an all in one node using vlan’s, bridge interfaces. If I can figure out how do do this in networkmanager, I think it will actually work</p>
<p>The eth0.10 format creates a tagged vlan interface.</p>
<p>I found a relevant document <a href="https://docs.openstack.org/devstack/latest/guides/neutron.html">devstack with a single NIC</a>. Devstack is a way of testing openstack for development purposes and it seems that they’ve anticipated that people deploy openstack from devices like a laptop, which only have one NIC. Their method involves using Open vSwitch to create a bridge, making the main ethernet interface a slave to the bridge, and then configuring the bridge accordingly, giving the new slave an ip address, and using that.</p>
<p>However, I am still confused. The docs make it unclear: Do I give neutron a veth to use for it’s purposes, and use the bridge for network access, or do I give it the bridge, and use the veth created on the bridge to get internet connectivity for myself?</p>
<p>Based on the earlier linked devstack article, it looks like it’s not a linux bridge that’s created, but a openvswitch bridge that’s created, and then something akin to a veth is given to the host device to use for normal networking. However, kolla-ansible doesn’t seem to make this kind of setup too easy…</p>
<p>I did some testing, and I was able to add a macvtap interface on a veth interface.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">nmcli connection add type macvlan dev veth1 mode bridge tap yes ifname macvtap0 </span>
<span id="cb30-2">Connection 'macvlan-macvtap0' (d2ea3d24-f831-4508-b2cf-c448e64afe2a) successfully added.</span>
<span id="cb30-3">[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ ip a</span>
<span id="cb30-4">... irrelevant stuff omitted. </span>
<span id="cb30-5">7: macvtap0@veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 500</span>
<span id="cb30-6">    link/ether 66:4b:2e:a7:22:f2 brd ff:ff:ff:ff:ff:ff</span>
<span id="cb30-7">    inet 192.168.17.251/24 brd 192.168.17.255 scope global dynamic noprefixroute macvtap0</span>
<span id="cb30-8">       valid_lft 86395sec preferred_lft 86395sec</span>
<span id="cb30-9">    inet6 fe80::5541:1541:5340:ebbc/64 scope link noprefixroute </span>
<span id="cb30-10">       valid_lft forever preferred_lft forever</span>
<span id="cb30-11">[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ curl google.com --interface macvtap0</span>
<span id="cb30-12">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;</span>
<span id="cb30-13">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span>
<span id="cb30-14">&lt;H1&gt;301 Moved&lt;/H1&gt;</span>
<span id="cb30-15">The document has moved</span>
<span id="cb30-16">&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.</span>
<span id="cb30-17">&lt;/BODY&gt;&lt;/HTML&gt;</span>
<span id="cb30-18">[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ </span></code></pre></div>
<p>Putting a macvtap interface on a veth interface shows that veth interfaces are more versatile than macvtap interfaces, able to do things like allocate more ip address to sub interfaces.</p>
<p>So the next test is to see if I can put a bridge interface on a veth interface. If I can put a bridge interface on a veth interface, than openstack neutron can put a bridge interface on a veth interface, meaning I can simply give neutron a veth to consume.</p>
<p>I attempted to add a bridge with the veth1 interface as a port, but the bridge sits forever on “configuring ip”.</p>
<p>So based on this experimentation, it seems as if that linux bridge is used as the main one.</p>
<p>There doesn’t appear to be a way to use an existing linux bridge as neutron’s interface, at least not with kolla-ansible. But this does give me a funny idea: what if I install kolla-ansible, lose network connectivity, and then use VNC access to the VPS to finish the configuration manually?</p>
<p>I don’t think this would work though. I can’t guarantee that network connectivity will be maintained for the entirity of the setup, and if the connection was broken halfway through, then the entire thing could shatter.</p>
<p>Based on the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html#openvswitch-ml2-ovs">kolla docs</a> and the <a href="https://github.com/openstack/kolla-ansible/blob/master/etc/kolla/globals.yml#L161">git repo</a>, it seems like kolla-ansible does support linuxbridge.</p>
<p>So I have two options: nested bridges, or setting up the main bridge and giving it to openstack, or somehow configuring the main openstack bridge in the middle of the install. I could modify the ansible playbooks to add the necessary veth interfaces in the middle of the install, but the issue is that kolla-ansible deploys everything in docker, and from a cursory look through, I can’t immediately figure out how to configure stuff outside the docker containers.</p>
<p>The next thing I will try is having a macvtap interface be a port of a bridge, as I haven’t tried that yet. If it works, I can play with the bridge, and see if I can do the veth interface trick, but rather than on a normal bridge, on a bridge that’s on a macvtap interface.</p>
<p>I did further testing with macvtap. On a debian libvirt virtual machine, using the NAT networking in order to make testing easy, I created a a macvtap interface and then plugged it into a bridge. However, it sat at “configuring ip” forever. But, if I manually assigned it an ip, then I could access it remotely, like from the host machine, from the bridges new ip, but I couldn’t do the reverse. Ping and curl, when asked to use that interface, didn’t work.</p>
<p>I am wondering if this is a firewall issue. Maybe packet forwarding by sysctl or iptables isn’t enabled?</p>
<p>I attempted to add a veth interface to the bridge that has macvtap as a port. Same as the bridge, dhcp and auto configuring ip didn’t work, but I could give it what I believed to be a static ip — except I couldn’t access this static ip, or send stuff through it.</p>
<p>A bridge under macvtap doesn’t appear to work fully.</p>
<p>What about a bridge under a bridge? I created a bridge, plugged a veth into it, and made the veth on the other end a port of a new bridge. Rather than let it sit on “configuring ip”, I gave it a static ip. Same issue… until I ran:</p>
<pre><code>root@debian:/home/moonpie# iptables -I DOCKER-USER -j ACCEPT
root@debian:/home/moonpie# curl google.com --interface bridge1
&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;
&lt;H1&gt;301 Moved&lt;/H1&gt;
The document has moved
&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;&lt;/HTML&gt;
root@debian:/home/moonpie# </code></pre>
<p>In this case, bridge0 is my primary bridge, and bridge1 is the “bridge under the bridge”. I added an iptables rule to accept EVERYTHING, and it worked, making me think that the firewall is the issue for macvtap/lan as well.</p>
<p>I attempted to create a veth interface attached to the bridge interface, and I was suprised to see that it already got it’s own public ip. So apparently, it was iptables getting in the way. However, an iptables policy of “literally accept everything” isn’t very secure, so I need to isolate the necessary rules to have a nested bridge work.</p>
<p>I am guessing that it’s probably something related to packet forwarding, and I need to configure iptables to happily send the packets from a difference ip through the main bridge without touching them.</p>
<p>Alright, so after creating a macvtap interface, I realize something: it can send requests out, but I can’t actually access it.</p>
</section>
<section id="bridge-veth" class="level4">
<h4 class="anchored" data-anchor-id="bridge-veth">Bridge + Veth</h4>
<p>I experimented with bridges. Using cockpit’s networkmanager configuration allows you to seamlessly create a bridge which you can still use as a normal ethernet interface for some reason. It even preserves existing ip configuration. But gives me an unanswered question: If bridges are more featureful by default, and can also be used for normal connectivity, why not <em>always</em> use a bridge? More features are better, right?</p>
<p>Anyway, I was able to create a veth pair, enslave one to the bridge, and then the nonenslaved veth interface could be used as a normal ethernet interface.</p>
<p>Steps:</p>
<p>Use cockpit-networkmanager to create a bridge, and add the ethernet interface as a port.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">sudo ip link add veth0 type veth peer name veth1</span>
<span id="cb32-2">sudo ip link set veth0 master br0</span>
<span id="cb32-3">sudo ip link set veth0 up</span>
<span id="cb32-4">sudo ip link set veth1 up</span>
<span id="cb32-5">sudo nmcli connection add type ethernet ifname veth1 con-name veth1</span>
<span id="cb32-6">sudo nmcli connection up veth1</span></code></pre></div>
<p>And then that interface can be used normally. It got it’s own ip via dhcp from my router, and now my computer’s ethernet interface has two ip’s.</p>
<p>But this isn’t good enough for me. <code>ip</code> is not persistent (although it is scriptable, and I can rerun every boot), unlike NetworkManager configurations.</p>
<p>How can I create a veth interface using networkmanager?</p>
<p>I did some searching around, and it seems like at some point, <a href="https://networkmanager.dev/blog/networkmanager-1-30/">networkmanager added this option</a>. To create a veth interface, you must set the property, veth.peer when you create an interface.</p>
<p>So like so (tested and working)</p>
<p><code>nmcli con add type veth ifname veth0 con-name veth0 veth.peer veth1</code></p>
<p>And to add a veth interface to a bridge using nmcli:</p>
<p><code>nmcli connection add type bridge-slave ifname veth1 master bridge0</code></p>
<p>Nope, this doesn’t seem to work.</p>
<p>That creates a new connection, and breaks a lot. Now trying:</p>
<p><code>nmcli connection modify veth1 master bridge0</code></p>
<p>It didn’t work, because veth1 seems not to be managed by networkmanager.</p>
<p>Or alternatively, maybe I can create a veth already enslaved to a bridge.</p>
<p>I tried this <code>nmcli con add type veth ifname veth0 con-name veth0 peer veth1 master bridge0</code>, but it didn’t work because the wrong veth was added to the bridge. veth0 is added to the bridge, but veth1 is not managed by networkmanager. How can I create a veth interface with the unmanaged veth peer added to the bridge?</p>
<p>Or maybe I am going about this the wrong way. It appears I can force NetworkManager to manage interfaces by using (from <a href="https://old.reddit.com/r/linuxquestions/comments/jemh39/how_can_i_force_networkmanager_to_manage_a_veth/">this reddit post</a>):</p>
<p><code>nmcli device set $IFNAME managed yes</code></p>
<p>Once I do this, I can simply use cockpit to add the device to the bridge as a bridge member. And a reboot… and my veth1 device gets nuked.</p>
<p>So it seems I need to edit NetworkManager configurations to make it that the change is permanent.</p>
<p>But there might be an easier method. Looking at the udev rules:</p>
<div class="sourceCode" id="cb33" data-filenmae="/usr/lib/udev/rules.d/85-nm-unmanaged-rules" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">... (shorted for brevity)</span>
<span id="cb33-2">...</span>
<span id="cb33-3"># Virtual Ethernet device pair. Often used to communicate with a peer interface</span>
<span id="cb33-4"># in another net namespace and managed by libvirt, Docker or the like.</span>
<span id="cb33-5"># Generally we don't want to mess with those. One exception would be the</span>
<span id="cb33-6"># full system containers, like LXC or LXD. LXC containers run via libvirt</span>
<span id="cb33-7"># don't use udev, so this doesn't apply. LXD does, though. To deal with the</span>
<span id="cb33-8"># LXD situation, let's treat the devices called eth* as regular ethernet.</span>
<span id="cb33-9">ENV{ID_NET_DRIVER}=="veth", ENV{INTERFACE}!="eth[0-9]*", ENV{NM_UNMANAGED}="1"</span></code></pre></div>
<p>These udev rules are set up in a way that veth devices named <code>eth*</code> will end up being managed by NetworkManager. This definitely seems exploitable.</p>
<p>So I do: <code>nmcli con add type veth ifname veth0 con-name veth0 veth.peer eth1</code></p>
<p>and sure enough, both interfaces are managed by NetworkManager. Using the web ui, I can add the “veth0” interface to the bridge, and it gets it’s own ip and everything. So what’s happening here?</p>
<p>By default, NetworkManager does not manage veth interfaces. But it does manage any interface it does create. When creating a veth interface using NetworkManager, it ends up being a weird scenario where only the main interface is managed, but the peer created is not, and I couldn’t do anything with it. But now I can.</p>
<p>I created a macvtap interface on top of the eth0 interface and it automatically get’s it’s own ipv4 address. I can curl using the –interface macvtap0 option, and I can access services hosting on this machine via the ip address this interface has.</p>
<p>In addition to all this, it persists past a reboot.</p>
<p>Now for the ultimate test: Nested bridging.</p>
<p>Steps (assuming <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/consistent-network-interface-device-naming_configuring-and-managing-networking">predictable network interface names</a> are enabled, because then the names eth0 and eth1 are unused):</p>
<ol type="1">
<li><p>Create eth0 via cockpit and enslave the singular “physical” interface to it using the ui.</p></li>
<li><p><code>nmcli con add type veth ifname veth1 con-name veth1 veth.peer eth1</code></p></li>
<li><p>add veth1 as a port to eth0 via cockpit.</p></li>
<li><p>Use cockpit to disable automatic ip addresses for your bridge, while keeping it enabled.</p></li>
</ol>
<p>And now you have two network interfaces. Now I will attempt to do this again, creating a bridge on another bridge.</p>
<p>And it works. <code>eth1</code>, gets internet access. I can also create a macvtap interface on the nested bridge, which works as I’d expect there as well.</p>
<p>This setup even persists a reboot.</p>
<p>Now?</p>
<p>To do it all again but with a naming scheme that doesn’t suck.</p>
<p>To do it all again, but with docker ipables rules getting in the way at the same time.</p>
<p>Or maybe I can use podman to deploy instead of docker?</p>
<p>I went through the docs and they say nothing. But the <a href="https://github.com/openstack/kolla-ansible/blob/375ecdde07e2bae25179b2454560389097f0573b/tools/validate-docker-execute.sh#L4">source code</a> does say something. In the <a href="https://github.com/openstack/kolla-ansible/blob/375ecdde07e2bae25179b2454560389097f0573b/tools/validate-docker-execute.sh#L4">container engine</a> part of the ansible configuration, there is an option to set what container engine is being used. This means I can set podman instead of docker.</p>
<p>However, this feels… A bit too far from standard practice. I will first see if I can get docker working.</p>
<p>Here is the iptables chains with docker installed:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb34-1">root@debian:/home/moonpie# iptables -L</span>
<span id="cb34-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb34-3">target     prot opt source               destination         </span>
<span id="cb34-4"></span>
<span id="cb34-5">Chain FORWARD (policy DROP)</span>
<span id="cb34-6">target     prot opt source               destination         </span>
<span id="cb34-7">DOCKER-USER  all  --  anywhere             anywhere            </span>
<span id="cb34-8">DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere            </span>
<span id="cb34-9">ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</span>
<span id="cb34-10">DOCKER     all  --  anywhere             anywhere            </span>
<span id="cb34-11">ACCEPT     all  --  anywhere             anywhere            </span>
<span id="cb34-12">ACCEPT     all  --  anywhere             anywhere            </span>
<span id="cb34-13"></span>
<span id="cb34-14">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb34-15">target     prot opt source               destination         </span>
<span id="cb34-16"></span>
<span id="cb34-17">Chain DOCKER (1 references)</span>
<span id="cb34-18">target     prot opt source               destination         </span>
<span id="cb34-19"></span>
<span id="cb34-20">Chain DOCKER-ISOLATION-STAGE-1 (1 references)</span>
<span id="cb34-21">target     prot opt source               destination         </span>
<span id="cb34-22">DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere            </span>
<span id="cb34-23">RETURN     all  --  anywhere             anywhere            </span>
<span id="cb34-24"></span>
<span id="cb34-25">Chain DOCKER-ISOLATION-STAGE-2 (1 references)</span>
<span id="cb34-26">target     prot opt source               destination         </span>
<span id="cb34-27">DROP       all  --  anywhere             anywhere            </span>
<span id="cb34-28">RETURN     all  --  anywhere             anywhere            </span>
<span id="cb34-29"></span>
<span id="cb34-30">Chain DOCKER-USER (1 references)</span>
<span id="cb34-31">target     prot opt source               destination         </span>
<span id="cb34-32">RETURN     all  --  anywhere             anywhere            </span></code></pre></div>
<p>And here is the iptables rules without docker installed:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb35-1">root@debian:/home/moonpie# iptables -L</span>
<span id="cb35-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb35-3">target     prot opt source               destination         </span>
<span id="cb35-4"></span>
<span id="cb35-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb35-6">target     prot opt source               destination         </span>
<span id="cb35-7"></span>
<span id="cb35-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb35-9">target     prot opt source               destination         </span></code></pre></div>
<p>Oh. That’s interesting. For whatever reason, docker takes the default forward policy of accept and throws it out the window. Why?</p>
<p>Since I will be using firewalld as my firewall while it is running, here are the iptables rules with firewall-cmd activated, but no docker:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">root@debian:/home/moonpie# iptables -L</span>
<span id="cb36-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb36-3">target     prot opt source               destination         </span>
<span id="cb36-4"></span>
<span id="cb36-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb36-6">target     prot opt source               destination         </span>
<span id="cb36-7"></span>
<span id="cb36-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb36-9">target     prot opt source               destination         </span></code></pre></div>
<p>Uh oh. Shouldn’t firewall-cmd change the iptables default input and forward policy to drop? What’s going on here?</p>
<p>Okay, I’m going to forget the firewall for now. This is a bit too complex of an install.</p>
<p>I did more research, and kolla-ansible has a <a href="https://github.com/openstack/kolla-ansible/blob/df44a7fb16249e2e04b661aac82fb5b6b9f4dac9/doc/source/reference/deployment-and-bootstrapping/bootstrap-servers.rst">bootrstap</a> which happens before deploying openstack itself. This bootstrap phase does stuff like install docker. So my idea is to run the bootstrap phase before I configure the ethernet interfaces, so that everything is set up properly without docker interfering.</p>
<p>I attempted to do this, by creating a rocky linux virtual machine, and running the kolla all in one installation on it. Interestingly:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb37-1">ASK [openstack.kolla.baremetal : Set firewall default policy] *************************************************************************************************************************</span>
<span id="cb37-2">skipping: [localhost]</span>
<span id="cb37-3"></span>
<span id="cb37-4">TASK [openstack.kolla.baremetal : Check if firewalld is installed] *********************************************************************************************************************</span>
<span id="cb37-5">ok: [localhost]</span>
<span id="cb37-6"></span>
<span id="cb37-7">TASK [openstack.kolla.baremetal : Disable firewalld] ***********************************************************************************************************************************</span>
<span id="cb37-8">changed: [localhost] =&gt; (item=firewalld)</span></code></pre></div>
<p>Kolla disables firewalld. I guess I don’t have to worry about that.</p>
<p>It gets most of the way through, but then fails at:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">ASK [openstack.kolla.docker : Write docker config] ************************************************************************************************************************************</span>
<span id="cb38-2"> Blah blah blah, lots of python errors, they are always messy</span>
<span id="cb38-3"> </span>
<span id="cb38-4"> original message: Interface 'eth0' not present on host 'localhost'"}</span>
<span id="cb38-5">``</span>
<span id="cb38-6"></span>
<span id="cb38-7">So apparently, the bootstrap step of this does more than just install docker and disable firewall. Apparently it tries to actually configure the network interfaces. </span>
<span id="cb38-8"></span>
<span id="cb38-9">So I am going to switch to set up "two" interfaces, make kolla believe that I have two, and then give them to docker. </span>
<span id="cb38-10"></span>
<span id="cb38-11">I created a bridge, called "eth0" and a veth attached to it called "eth1". </span>
<span id="cb38-12"></span>
<span id="cb38-13">By default, eth0 is the main interface, and eth1 is the neutron external interface. </span>
<span id="cb38-14"></span>
<span id="cb38-15">I run the bootstrap steps again, and it works without complaining. The prechecks don't complain as well. Now, it's time for the deployment. </span>
<span id="cb38-16"></span>
<span id="cb38-17">It goes all the way until:</span>
<span id="cb38-18"></span>
<span id="cb38-19">```{.default}</span>
<span id="cb38-20">RUNNING HANDLER [loadbalancer : Wait for haproxy to listen on VIP] *********************************************************************************************************************</span>
<span id="cb38-21">fatal: [localhost]: FAILED! =&gt; {"changed": false, "elapsed": 300, "msg": "Timeout when waiting for :61313"}</span>
<span id="cb38-22"></span>
<span id="cb38-23">PLAY RECAP *****************************************************************************************************************************************************************************</span>
<span id="cb38-24">localhost                  : ok=61   changed=38   unreachable=0    failed=1    skipped=106  rescued=0    ignored=0   </span></code></pre></div>
<p>Why did this fail? I’m guessing because I did not set the vip address in globals.yml, for high availability.</p>
<p>But I’m not creating a cluster rigth now, and my two node cluster won’t be able to use high availability either.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/kolla/globals.yml</strong></pre>
</div>
<div class="sourceCode" id="cb39" data-filename="/etc/kolla/globals.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This should be a VIP, an unused IP on your network that will float between</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the hosts running keepalived for high-availability. If you want to run an</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All-In-One without haproxy and keepalived, you can set enable_haproxy to no</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in "OpenStack options" section, and set this value to the IP of your</span></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'network_interface' as set in the Networking section below.</span></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#kolla_internal_vip_address: "10.10.10.254"</span></span></code></pre></div>
</div>
<p>So I can disable high availibility, which I will do and try again.</p>
<p>Except I’ve encountered an issue when attempt to get this setup. Although eth1 works normally, eth0 (the bridge) will not send any requests. Curl or ping simply time out. However, even more strangely, I can still access cockpit via the ip address that it has setup.</p>
<p>For whatever reason, this bridge setup behaves different on debian vs on rocky linux. Even after a reboot, it still doesn’t work.</p>
<p>Change of plans. Rather than attempting to get away with the bridge also being able to act as a normal interface, I think I will just create two veths attatch them to a singular bridge which does not get an ip address.</p>
<p>So I create one bridge, create two veth pairs (eth1-veth1, and eth0-veth0), and attempt to curl using eth0. Nothing. I reboot. Same result.</p>
<p>What?</p>
<p>ip route:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb40-1">root@debian:/home/moonpie# ip route</span>
<span id="cb40-2">default via 192.168.122.1 dev eth1 proto dhcp src 192.168.122.97 metric 101 </span>
<span id="cb40-3">default via 192.168.122.1 dev eth0 proto static metric 425 </span>
<span id="cb40-4">192.168.122.0/24 dev eth1 proto kernel scope link src 192.168.122.97 metric 101 </span>
<span id="cb40-5">192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.4 metric 425 </span></code></pre></div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">[moonpie@rocky ~]$ ip route</span>
<span id="cb41-2">default via 192.168.122.1 dev eth1 proto dhcp src 192.168.122.228 metric 101 </span>
<span id="cb41-3">default via 192.168.122.1 dev eth0 proto static metric 425 </span>
<span id="cb41-4">192.168.122.0/24 dev eth1 proto kernel scope link src 192.168.122.228 metric 101 </span>
<span id="cb41-5">192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.111 metric 425 </span></code></pre></div>
<p>iptables:</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">[moonpie@rocky ~]$ sudo iptables -L</span>
<span id="cb42-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb42-3">target     prot opt source               destination         </span>
<span id="cb42-4"></span>
<span id="cb42-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb42-6">target     prot opt source               destination         </span>
<span id="cb42-7"></span>
<span id="cb42-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb42-9">target     prot opt source               destination       </span></code></pre></div>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb43-1">root@debian:/home/moonpie# sudo iptables -L</span>
<span id="cb43-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb43-3">target     prot opt source               destination         </span>
<span id="cb43-4"></span>
<span id="cb43-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb43-6">target     prot opt source               destination         </span>
<span id="cb43-7"></span>
<span id="cb43-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb43-9">target     prot opt source               destination         </span></code></pre></div>
<p>Both have firewalls disabled. The only noticable difference between the two is the version of the linux kernel in use. Debian is using <code>Linux debian 6.1.0-11-amd64</code>, whereas rocky is using <code>Linux rocky 5.14.0-284.25.1.el9_2.x86_64</code>.</p>
<p>There are several things to test. The first is to test a different kernel version, because this could be a kernel bug, relating to linux bridges.</p>
<p>Another thing to test is if this is a networkmanager bug, so I could attempt to not use networkmanager to create bridges, and instead use ip.</p>
<p>So the first thing I try is a newer kernel. The <a href="http://elrepo.org/tiki/HomePage">ELrepo</a> is an unofficial repo for Red Hat Enterprise Linux (RHEL, or EL), and clones, like my rocky linux. The steps to add it are on the linked page.</p>
<p>Then, I nabbed the <a href="http://elrepo.org/tiki/kernel-ml"><code>kernel-ml</code></a> package, which is the latest stable mainline linux kernel. Now, my rocky linux virtual machine is using <code>Linux rocky 6.5.1-1.el9.elrepo.x86_64</code>.</p>
<p>And same thing.</p>
<p>So it’s probably not a kernel bug. Probably. The possibility that the RHEL, or the ELRepo kernel has some difference that causes this bug, is very low.</p>
<p>When looking at the cockpit page for networking, I see that eth0 (my bridge) is receiving data, but the sending data stays at 0. Strange.</p>
<p>It probably would have to be a difference between the network configuration between the two distros. Either networkmanager is configured differently by default, or there is a bug in the networking stack.</p>
<p>For example, in debian:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/NetworkManager/NetworkManager.conf</strong></pre>
</div>
<div class="sourceCode" id="cb44" data-filename="/etc/NetworkManager/NetworkManager.conf" style="background: #f1f3f5;"><pre class="sourceCode ini code-overflow-wrap code-with-copy"><code class="sourceCode ini"><span id="cb44-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">root@debian:/etc/NetworkManager# cat NetworkManager.conf </span></span>
<span id="cb44-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[main]</span></span>
<span id="cb44-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plugins</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ifupdown,keyfile</span></span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ifupdown]</span></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I changed this from false to true to force NetworkManager to manage every single thing, including the ethernet interface which it didn't do by default. </span></span>
<span id="cb44-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">managed</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span></code></pre></div>
</div>
<p>On the other hand, rocky has everything in this file commented out.</p>
<p>And yup. When I change the relevant options in rocky’s NetworkManager.conf, it works now.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/NetworkManager/NetworkManager.conf</strong></pre>
</div>
<div class="sourceCode" id="cb45" data-filename="/etc/NetworkManager/NetworkManager.conf" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb45-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">.....</span></span>
<span id="cb45-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">.....</span></span>
<span id="cb45-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[main]</span></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default is: </span></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plugins=keyfile,ifcfg-rh</span></span>
<span id="cb45-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commented out, of course. I added ifupdown and didn't remove ifcfg-rh, just in case it's needed, but it shouldn't be. </span></span>
<span id="cb45-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plugins</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">keyfile,ifcfg-rh,ifupdown</span></span>
<span id="cb45-8"></span>
<span id="cb45-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ifupdown]</span></span>
<span id="cb45-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">managed</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb45-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">.....</span></span>
<span id="cb45-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">....</span></span></code></pre></div>
</div>
<p>And it works now:</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb46-1">[root@rocky moonpie]# ping google.com -I eth0 -c 1</span>
<span id="cb46-2">PING google.com (142.250.72.174) from 192.168.122.111 eth0: 56(84) bytes of data.</span>
<span id="cb46-3">64 bytes from lax17s50-in-f14.1e100.net (142.250.72.174): icmp_seq=1 ttl=113 time=4.81 ms</span>
<span id="cb46-4"></span>
<span id="cb46-5">--- google.com ping statistics ---</span>
<span id="cb46-6">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span id="cb46-7">rtt min/avg/max/mdev = 4.808/4.808/4.808/0.000 ms</span>
<span id="cb46-8">[root@rocky moonpie]# ping google.com -I eth1 -c 1</span>
<span id="cb46-9">PING google.com (142.250.72.174) from 192.168.122.150 eth1: 56(84) bytes of data.</span>
<span id="cb46-10">64 bytes from lax17s50-in-f14.1e100.net (142.250.72.174): icmp_seq=1 ttl=113 time=14.9 ms</span>
<span id="cb46-11"></span>
<span id="cb46-12">--- google.com ping statistics ---</span>
<span id="cb46-13">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span id="cb46-14">rtt min/avg/max/mdev = 14.887/14.887/14.887/0.000 ms</span></code></pre></div>
<p>Why does this work now?</p>
<p>Just kidding, this setup doesn’t survive a reboot. But it survives a reboot on debian?</p>
<p>Okay, I played around a little. The correct order is:</p>
<ol type="1">
<li>Edit NetworkManager.conf</li>
<li>Reboot</li>
<li>Then do bridge changes.</li>
<li>Reboot just to make sure they persist.</li>
</ol>
<p>And this persists beyond a reboot.</p>
<p>Now I will test an all in one installation on a virtual machine.</p>
<p>So I set it up… and same issue. I think I may need both a newer kernel, and the nmcli changes.</p>
<p>I install a newer kernel again, and it works. Wow. I think I may actually be encountering a bug. Fascinating.</p>
<p>But that’s besides the point. Now I will attempt to do an all in one installation of openstack using kolla ansible.</p>
<p>The main difficulty I am anticipating is the fact that installing docker changes the forward networking rules, from the default accept to a policy of drop.</p>
<p>But lucky me, that appears to be a debian thing. My network setup still works even after running the bootstrap step.</p>
<p>I even ran the pre run and the deploy steps, and they worked fine until I ran out of memory.</p>
<p>After adding more memory to the virtual machine, it worked:</p>
<p>After going to the <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html#using-openstack">“Using Openstack”</a>, and running the post deploy steps to create an admin password, I have an openstack system:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/horizonlogin.jpg" class="img-fluid"></p>
</section>
</section>
</section>
</section>
<section id="deploying-and-using-openstack" class="level1">
<h1>Deploying and Using Openstack</h1>
<p>Edit: I later found another <a href="https://www.keepcalmandrouteon.com/post/kolla-os-part-1/">blog post</a> about deploying openstack with a veth and it seems they did many of the same steps I did.</p>
<p>I have no idea how to use this thing. I thought it would work similarly to proxmox, where I can just upload an iso and then go through the installation process. It seems to be more complex than that.</p>
<p>The first thing I did was attempt to create a network. It asked me for the physical network name, so I attempted to put “eth1” in that box. Apparently, you don’t put the physical interface there. The default physical interface for neutron is called “physnet1”. I put physnet1 there, and attempted to create an “instance” or virtaul machine with that network in use…</p>
<p>But adding that network was not an option. What?</p>
<p>Now that I got openstack set up in a virtual machine, I did a lot of experimenation with openstack. The first thing I did was to use kolla-ansible’s <a href="https://github.com/openstack/kolla-ansible/blob/da2d8e8b83e696795f4b9c774fc7e6787a1d700e/tools/init-runonce">init-runonce</a> script which creates an image for use with the cloud, and some demo networks.</p>
<p>However, for some reason, this init-runonce script creates the “public” network with the completely wrong ip subnet. It creates the public subnet with a 10.0.1.0/24, when in actuality, my public subnet is the libvirt default NAT subnet, 192.168.122.0/24.</p>
<p>I played a bit more with the init-runonce script, but nothing worked.</p>
<p>Eventually, I decided to create a provider network on my own. I first sourced <code>/etc/kolla/admin-openrc.sh</code> because this was the only way I could get openstack to authenticate properly.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb47-1">openstack network create --external --share \</span>
<span id="cb47-2">  --provider-physical-network physnet1 --provider-network-type flat \</span>
<span id="cb47-3">  libvirtnat</span></code></pre></div>
<p>I then associated the correct subnet, and gateway in the ui. And voila, my virtual machine has internet access. One way. I can ping and curl google.com, but I can’t do the opposite.</p>
<p>The issue was security groups. By default, block all ingress traffic, but allow all egress traffic. By allowing icmp (ping packets) ingress traffic, I found that I could now ping the VPS I had created.</p>
<p>To allow all traffic, I can create a security group in the UI, with the “other protocol” selected, and the -1 wildcard on what protocol of traffic to accept. Now, I fully access my VPS.</p>
<p>On the other hand, I could also just disable firewall on all my VPS’s and use the security groups instead for granular control. Since you can have multiple security groups (what happens if they have conflicting rules?), maybe I could have security rules per service, and then just add an instance to security rules as needed.</p>
<p>Anyway, so now the other question I have: With provider networks, do I need to have the networking components and the compute components on the same node?</p>
<p>That would be the next thing to test. Thankfully, kolla-ansible has <a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">multinode</a> deployment instructions as well as single node.</p>
<p>The other thing I need to consider is how to set static ip’s for the virtual machines, from openstack itself. By default, <em>openstack</em> appears to take over the role of DHCP provider, meaning there is a chance that any ip’s it gets/sets for anything would conflict with my router.</p>
<p>To create an openstack subnet on my provider network, which uses the external dhcp server:</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb48-1">openstack network set --no-dhcp libvirt-nat</span></code></pre></div>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb49-1">openstack subnet create --network libvirtnat --subnet-range 192.168.122.0/24 --gateway 192.168.122.1 libvirt-subnet</span></code></pre></div>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb50-1">openstack port create --network libvirtnat --fixed-ip subnet=libvirt-subnet,ip-address=192.168.122.1 --disable-port-security dhcp-port</span></code></pre></div>
<p>But after I did this, I noticed something. Regardless of whether I had a port or a subnet used, the interface ip address did not match the actual ip address in use by the virtual machine. Openstack reporting the wrong ip address, but I could find the correct one by using nmap and scanning the entire libvirt nat subnet, or using <code>ip a</code> in the virtual machine.</p>
<p>Actually, I don’t even have internet acess when not using this port. For some reason, attempting to put a virtual machine on the public subnet, doesn’t give it any actual internet access.</p>
<p>I tried something else. In the cockpit networkmanager interface, I realized that I been simply leaving the eth1, the neutron external interface, still active, with an ip address, and everything. And other times, I had been disabling it entirely from networkmanager. Rather than disable it, I simply set just ipv4 and ipv6 addresses to disabled, while still keeping the little toggle in cockpit set to on.</p>
<p>With this setup, The ip adddress that openstack reported this instance getting, and the ip address on the instance itself matched.</p>
<p>Also, the subnet had dhcp enabled, using openstack’s dhcp to assign an ip address, from the reserved pool.</p>
<p>But this ip still isn’t static.</p>
<p>Except, maybe I don’t need to worry about that. I did some searching around, and on <a href="https://www.reddit.com/r/openstack/comments/10qcgq9/instance_gets_dhcp_from_external_source_neutron/j6psise/">reddit</a> someone mentioned how neutron port security rules prevent an openstack VM from gaining any ip other than the one it has been allocated.</p>
<p>So basically, each VM get’s a port on the subnet (and the port includes a mac address), and openstack’s dhcp server uses the mac address to give the same port the same ip address every time.</p>
<p>In order to avoid conflict between the</p>
<section id="monitoring" class="level2">
<h2 class="anchored" data-anchor-id="monitoring">Monitoring</h2>
<p>https://github.com/openstack-exporter/openstack-exporter</p>
</section>
<section id="cinder" class="level2">
<h2 class="anchored" data-anchor-id="cinder">Cinder</h2>
<p>Configuring cinder seems to require more than simply enabling the service, according to the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/storage/cinder-guide.html">kolla-ansible docs</a>. I’ve selected the nfs storage backend, so I followed the instructions, but there is no nfs service available.</p>
<p><code>sudo dnf install nfs-utils</code> makes the service available to me.</p>
<p>And the docs are wrong, the name of the nfs system service is not nfs or nfsd, but actually:</p>
<p><code>systemctl enable --now nfs-server</code>, at least on rocky linux.</p>
<p>Cinder seems to be the volume mount feature that a minimal openstack install is missing. With it, I can do things like the volume mounts that I expected openstack to have by default.</p>
</section>
<section id="nova" class="level2">
<h2 class="anchored" data-anchor-id="nova">Nova</h2>
<p><a href="https://docs.openstack.org/nova/latest/">Main openstack doc for nova</a></p>
<section id="lxc" class="level3">
<h3 class="anchored" data-anchor-id="lxc">LXC</h3>
<p>Nova is one of the default services. By default, it uses libvirt to configure qemu + kvm. This is not satisfactory for me, since I have an nvidia gpu and it is a bit easier to use with containers, such as docker or lxc. Because I don’t have a “server” gpu, I won’t be able to get access to vgpu, a feature which enables you to split a gpu between multiple virtual machines.</p>
<p>However, it is possible to split a gpu between multiple containers even without any special features.</p>
<p>One interesting thing is that lxc and docker are just a frontend for a bunch of linux kernel features, so all you need is a supported kernel. According to the <a href="https://wiki.archlinux.org/title/Libvirt#Server">arch wiki</a> article for libvirt, you don’t need to install any lxc related tools to actually use libvirt with lxc, you simply point libvirt at the <code>lxc:///</code> connection. Note Arch linux doesn’t split packages, so everything libvirt needs is probably in one package. On ubuntu, for example, the <a href="https://docs.openstack.org/nova/latest/admin/configuration/hypervisor-lxc.html">openstack nova-lxc</a> article mentions how on ubuntu, another package is needed to be installed.</p>
<p>But is it even possible to configure a multi hypervisor openstack cloud? One <a href="https://www.reddit.com/r/openstack/comments/8hr93t/is_openstack_multihypervisor_configuration_kvm/dym7dtj/">reddit commenter</a> says no. In addition to that, the <a href="https://docs.openstack.org/nova/latest/configuration/config.html#libvirt.virt_type">libvirt_virt_type</a> is of the type “string” rather than the type “list”. This means that I would only be able to put one item here, either kvm or lxc.</p>
<p>One thing I could consider doing is running a privileged container on the main compute node, and then make it another compute node which another virtualization type.</p>
<p>The main issue with such a setup is how I would handle networking devices. If I run another container on the main compute node, then running it in privileged mode gives it access to <em>all</em> devices, which means all networking devices.</p>
<p>No wait, this isn’t actually an issue because I can just configure it so that the container uses different network interfaces. It will still see them, which might cause issues, but it won’t be using them.</p>
<p>So how can I run a privileged container with systemd?</p>
<p>I found a <a href="https://developers.redhat.com/blog/2019/04/24/how-to-run-systemd-in-a-container">relevant article</a> from Red Hat.</p>
</section>
<section id="gpu-passthrough" class="level3">
<h3 class="anchored" data-anchor-id="gpu-passthrough">GPU passthrough</h3>
<p>However, even if I do that, then</p>
<p><a href="https://docs.openstack.org/nova/latest/admin/pci-passthrough.html">PCI device passthrough</a></p>
<p>Based on this doc, it looks like I need to create flavors for virtual machines, which have the allocated gpu’s set up.</p>
<p>I may also want <a href="https://docs.openstack.org/kolla-ansible/latest/reference/compute/libvirt-guide.html#host-vs-containerised-libvirt">an external libvirt</a> daemon, because that may be easier to set up pci device passthrough and whatnot.</p>
<p>I found a <a href="https://www.reddit.com/r/openstack/comments/16g7lmj/kolla_ansible_pci_passthrough/">reddit post</a> where someone was asking for help about PCI passthrough with kolla-ansible, but no one has replied as of yet.</p>
<p>A few days later, they replied to their own post.</p>
<blockquote class="blockquote">
<p>Just in case anyone searches for this in the future: the file in /etc/kolla/config/nova needs to be named nova-compute.conf (NOT nova.conf) and then it will be added to the configuration.</p>
</blockquote>
</section>
</section>
<section id="zun-1" class="level2">
<h2 class="anchored" data-anchor-id="zun-1">Zun</h2>
<p>Zun is the container service. <a href="https://docs.openstack.org/kolla-ansible/latest/reference/compute/zun-guide.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/reference/compute/zun-guide.html</a>.</p>
<p>Configuring this is pretty easy, but it should be noted that the user running kolla-ansible must be a member of the docker group, and I don’t know how to set that up before docker is installed, so you have to run bootstrap first, and then set up users and groups.</p>
<p>According to <a href="https://docs.openstack.org/zun/latest/configuration/policy.html">zun’s policy rules</a> it is not possible to create privileged containers by default. Also, <a href="https://blueprints.launchpad.net/zun/+spec/support-zun-create-privileged">Ubuntu’s launchpad</a> has something about this as well.</p>
<p>One thing I am thinking about is how to passthrough gpu’s and other things to containers. If I desire to do something like an AI trainig on docker containers (since a lot is done on kubernetes nvidia clusters), then I would end up using Zun for it.</p>
<p>I found an article in <a href="https://github.com/openstack/zun/blob/master/specs/pci-device-model.rst">zun’s git</a> saying that it was in the works, but that document is literally 5 years old…</p>
<p>I also found another <a href="https://blueprints.launchpad.net/zun/+spec/support-pcipassthroughfilter">6 year old document about zun</a>. In this doc, it says that pci passthrough has been implemented for zun.</p>
<p>Because the docs are unclear, I decided to go through the source code.</p>
<p>The source code for the <a href="https://github.com/openstack/zun/blob/master/zun/conf/pci.py">pci config options for zun</a></p>
<p>And here is the source code for the <a href="https://github.com/openstack/nova/blob/master/nova/conf/pci.py">pci config options for nova</a>.</p>
<p>Because they are the exact same thing, I am guessing I can use the configuration options <a href="https://docs.openstack.org/nova/latest/admin/pci-passthrough.html">here</a> and <a href="https://docs.openstack.org/nova/latest/configuration/config.html#pci.alias">here</a>.</p>
<p>Oh, I found something better. The <a href="https://docs.openstack.org/zun/latest/configuration/sample-config.html">sample zun configuration</a> has a pci passthrough options.</p>
<p>However, the zun step kept failing when I attempted to use kolla-ansible. Apparentlly the master’s release won’t be supporting zun for a while, because they have to update a lot of dependencies or something like that. Here is the <a href="https://github.com/openstack/kolla-ansible/commit/fdc3b122c1039d93190e68d925af21d459b4a4bf">git commit</a> with relevant changes.</p>
<p>Because of the above, I decided to switch to the 2023.1 release of kolla-ansible, rather than the master release, which it was probably a bad idea to be using.</p>
</section>
<section id="cyborg" class="level2">
<h2 class="anchored" data-anchor-id="cyborg">Cyborg</h2>
<p>Cyborg is management of “hardware acceletors”, like FGPA’s, or in my case, gpu’s.</p>
<p>The configuration is here:</p>
<p>However, given the ability to do PCI passthrough with zun and nova already, I don’t think I will need this service.</p>
</section>
<section id="skyline" class="level2">
<h2 class="anchored" data-anchor-id="skyline">Skyline</h2>
<p>Skyline is the next gen web ui for openstack. By default, only horizon, the older ui is installed.</p>
<p>According to this <a href="https://docs.openstack.org/skyline-console/latest/install/docker-install-ubuntu.html">doc</a> skyline serves on 9999 by default. But according to this <a href="https://docs.openstack.org/skyline-console/latest/configuration/skyline-console-settings.html">doc</a> skyline serves on port 8088 by default. But:</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb51-1">nmap scan report for 192.168.122.111</span>
<span id="cb51-2">Host is up (0.000092s latency).</span>
<span id="cb51-3">Not shown: 990 closed tcp ports (reset)</span>
<span id="cb51-4">PORT     STATE SERVICE         VERSION</span>
<span id="cb51-5">22/tcp   open  ssh             OpenSSH 8.7 (protocol 2.0)</span>
<span id="cb51-6">80/tcp   open  http            Apache httpd</span>
<span id="cb51-7">3306/tcp open  mysql           MySQL 5.5.5-10.11.5-MariaDB-log</span>
<span id="cb51-8">4567/tcp open  tram?</span>
<span id="cb51-9">5000/tcp open  http            Apache httpd</span>
<span id="cb51-10">8000/tcp open  http            Apache httpd</span>
<span id="cb51-11">8022/tcp open  ssh             OpenSSH 8.7 (protocol 2.0)</span>
<span id="cb51-12">9090/tcp open  ssl/zeus-admin?</span>
<span id="cb51-13">9998/tcp open  distinct32?</span>
<span id="cb51-14">9999/tcp open  http            nginx</span></code></pre></div>
<p>Since only 9999 is up, I decided to visit it, but it timed out.</p>
<p>I think the issue is that I’m running out of ram. It might also be CPU, but the monitoring reports that ram is full, although I have a lot of cpu leftover.</p>
</section>
<section id="magnum-1" class="level2">
<h2 class="anchored" data-anchor-id="magnum-1">Magnum</h2>
<p><a href="https://docs.openstack.org/kolla-ansible/latest/reference/containers/magnum-guide.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/reference/containers/magnum-guide.html</a></p>
<p>Seems to be pretty simple to deploy. Needs an insecure option for autoscaling though, which doesn’t look too good.</p>
</section>
<section id="neutron" class="level2">
<h2 class="anchored" data-anchor-id="neutron">Neutron</h2>
<p>The documentation for configuring neutron using kolla-ansible is <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html">here</a>.</p>
<p>I want to enable provider networks for speed for the ipv4 subnet of my router, but I still don’t understand how neutron external subnets, and neutron networking in general works. The main question is this: Can I put virtual machines on an external subnet that is only available to a different networking node?</p>
<p>It should be possible.</p>
<p>To list the openstack physical networks, you can run:</p>
<p><code>openstack network agent list --agent-type L2 agent</code></p>
<p>To list L3 agents:</p>
<p><code>openstack network agent list --agent-type L3 agent</code></p>
<p>I am guessing I can just list all the agents at once.</p>
<p><code>openstack network set --binding:host_id=&lt;hostname&gt; &lt;network-name-or-ID&gt;</code></p>
<p>And to verify: <code>openstack network show &lt;network-name-or-ID&gt; -c binding:host_id</code></p>
<p>Just kidding, those commands were given by chatgpt and they fail. Running them returns:</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb52-1">(venv) [root@thoth ~]# openstack network agent list --agent-type L2 agent</span>
<span id="cb52-2">usage: openstack network agent list [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent]</span>
<span id="cb52-3">                                    [--max-width &lt;integer&gt;] [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending]</span>
<span id="cb52-4">                                    [--agent-type &lt;agent-type&gt;] [--host &lt;host&gt;] [--network &lt;network&gt; | --router &lt;router&gt;] [--long]</span>
<span id="cb52-5">openstack network agent list: error: argument --agent-type: invalid choice: 'L2' (choose from 'bgp', 'dhcp', 'open-vswitch', 'linux-bridge', 'ofa', 'l3', 'loadbalancer', 'metering', 'metadata', 'macvtap', 'nic', 'baremetal')</span></code></pre></div>
<p>And just listing all agents (in my 2 node install with both with the same subnets):</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb53-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb53-2">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb53-3">| ID                                   | Agent Type         | Host         | Availability Zone | Alive | State | Binary                    |</span>
<span id="cb53-4">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb53-5">| 2fb24192-27bc-4d4b-8263-cadc1a73c3b0 | DHCP agent         | network-node | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb53-6">| 429b16e3-bd4f-4507-ae78-6336a12b6b87 | Open vSwitch agent | network-node | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb53-7">| f7e2987b-a6e6-4677-b627-9a32e0508dc9 | Metadata agent     | network-node | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb53-8">| fd2a566d-1d47-470d-b0f6-49972b02813a | Open vSwitch agent | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb53-9">| ffa989a0-42b4-4184-ba8d-72106ee32c89 | L3 agent           | network-node | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb53-10">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span></code></pre></div>
<p><a id="asking-for-help"></a></p>
<p>I did another install, an all in one node (including networking), and a network node. The all-in-one node has both interfaces on the libvirt NAT subnet, “default”, but the network node has it’s neutron external interface on a different libvirt NAT subnet.</p>
<p>Here is the networking agent list:</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb54-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb54-2">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb54-3">| ID                                   | Agent Type         | Host         | Availability Zone | Alive | State | Binary                    |</span>
<span id="cb54-4">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb54-5">| 07aa201f-08b6-4dc9-ac1c-98af105ad53e | L3 agent           | main-node    | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb54-6">| 1afb9cd1-d1d0-4d59-ba58-f291868222da | Metadata agent     | network-node | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb54-7">| 349bbed8-3526-4070-affe-a47c2bbe5985 | DHCP agent         | main-node    | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb54-8">| 69b660b0-1bbc-4474-8668-71308486f3a8 | DHCP agent         | network-node | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb54-9">| a62c5d36-8101-4ca3-8479-358657684273 | Metadata agent     | main-node    | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb54-10">| b6221a20-3543-43c7-9a99-ce143a699702 | Open vSwitch agent | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb54-11">| c0bb80a4-c9e7-48a9-a56a-5fa279bfcef0 | Open vSwitch agent | network-node | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb54-12">| d212772f-4996-413c-b8ef-c1e6b5442b22 | L3 agent           | network-node | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb54-13">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span></code></pre></div>
<p>How can I ensure that the truly external network I create is attatched to a specific L3 agent?</p>
<p>Chatgpt says to use <a href="https://docs.openstack.org/neutron/latest/admin/ovn/availability_zones.html">availibility zones</a>.</p>
<p>However, one thing I am looking at that might be simpler is a multi regional deployment: <a href="https://docs.openstack.org/kolla-ansible/latest/user/multi-regions.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/user/multi-regions.html</a></p>
<p>I also tried a <a href="https://docs.openstack.org/kolla-ansible/latest/user/multi-regions.html">multi regional</a> deployment. In addition to not working, giving me any kinds of zones to specify, chatgpt possible</p>
<p>I did some searching around and I found an <a href="https://github.com/openstack/kolla-ansible/blob/7186f960d93f2e523a2052acd0287e176f7ac927/ansible/group_vars/all.yml#L1132">interesting option in the ansible variables</a>.</p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb55-1"># Set OVN network availability zones</span>
<span id="cb55-2">neutron_ovn_availability_zones: []</span></code></pre></div>
<p>However, I am guessing that I need to enable OVN to use this, so I followed the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html">kolla-ansible docs for this</a>.</p>
<p>I set the variable of neutron availibility zones to be edge, on my network only node, and main, on my main compute node. However, it seems like my variables were ignored:</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb56-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb56-2">+--------------------------------------+------------------------------+--------------+-------------------+-------+-------+----------------------------+</span>
<span id="cb56-3">| ID                                   | Agent Type                   | Host         | Availability Zone | Alive | State | Binary                     |</span>
<span id="cb56-4">+--------------------------------------+------------------------------+--------------+-------------------+-------+-------+----------------------------+</span>
<span id="cb56-5">| 1ca0eec3-22f3-4680-b4c6-2d6e97ab6b8b | DHCP agent                   | main-node    | nova              | :-)   | UP    | neutron-dhcp-agent         |</span>
<span id="cb56-6">| 3f9fffd2-c3f7-4841-910e-bc73ba95ab53 | L3 agent                     | main-node    | nova              | :-)   | UP    | neutron-l3-agent           |</span>
<span id="cb56-7">| 4a11630f-bbaf-4d8e-87d1-deb209e770fe | Open vSwitch agent           | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent  |</span>
<span id="cb56-8">| 820a9bbb-5279-4889-b511-979b1b7d327e | Open vSwitch agent           | network-node | None              | :-)   | UP    | neutron-openvswitch-agent  |</span>
<span id="cb56-9">| bf317078-bf85-488c-87c3-026a23c8793b | L3 agent                     | network-node | nova              | :-)   | UP    | neutron-l3-agent           |</span>
<span id="cb56-10">| e4e3d75b-55b5-4a1e-8bd2-632d8a37e5b9 | Metadata agent               | network-node | None              | :-)   | UP    | neutron-metadata-agent     |</span>
<span id="cb56-11">| ec64e75e-0e61-434e-908f-e4b9d670adbc | DHCP agent                   | network-node | nova              | :-)   | UP    | neutron-dhcp-agent         |</span>
<span id="cb56-12">| f5ea5528-e482-4609-ae33-09ef2d792b28 | Metadata agent               | main-node    | None              | :-)   | UP    | neutron-metadata-agent     |</span>
<span id="cb56-13">| main-node                            | OVN Controller Gateway agent | main-node    | main              | XXX   | UP    | ovn-controller             |</span>
<span id="cb56-14">| c484098d-fd7d-5d9c-81e5-be62657e571e | OVN Metadata agent           | main-node    | main              | XXX   | UP    | neutron-ovn-metadata-agent |</span>
<span id="cb56-15">+--------------------------------------+------------------------------+--------------+-------------------+-------+-------+----------------------------+</span>
<span id="cb56-16">(venv) [root@thoth ~]# openstack availability zone list</span>
<span id="cb56-17">+-----------+-------------+</span>
<span id="cb56-18">| Zone Name | Zone Status |</span>
<span id="cb56-19">+-----------+-------------+</span>
<span id="cb56-20">| internal  | available   |</span>
<span id="cb56-21">| nova      | available   |</span>
<span id="cb56-22">| nova      | available   |</span>
<span id="cb56-23">| nova      | available   |</span>
<span id="cb56-24">| nova      | available   |</span>
<span id="cb56-25">| main      | available   |</span>
<span id="cb56-26">+-----------+-------------+</span>
<span id="cb56-27">(venv) [root@thoth ~]# openstack availability zone list --network</span>
<span id="cb56-28">+-----------+-------------+</span>
<span id="cb56-29">| Zone Name | Zone Status |</span>
<span id="cb56-30">+-----------+-------------+</span>
<span id="cb56-31">| nova      | available   |</span>
<span id="cb56-32">| nova      | available   |</span>
<span id="cb56-33">| main      | available   |</span>
<span id="cb56-34">+-----------+-------------+</span></code></pre></div>
<p>And also, when I look in the UI, to create a network, it only lists the “nova” availibility zone hint.</p>
<p>What happened to my edge availability zone?</p>
<p>Anyway, I decided to do more searching. Apparently, the neutron_ovn_zones are set up <a href="https://github.com/openstack/kolla-ansible/blob/7186f960d93f2e523a2052acd0287e176f7ac927/ansible/roles/ovn-controller/tasks/setup-ovs.yml#L17">here</a>, which is ran as long as the host is a member of the <code>ovn-network-controller</code> group, which is a <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/inventory/multinode#L743">child of the “network” group</a>. Based on this, I don’t think I need to enable OVN in order to use OVN availability zones. It seems like some portion of OVN is deployed, but only the whole thing is used as a network backend if you enable it.</p>
<p>So because of this, I attempted to do another deployment with without setting OVN, but just availability zones.</p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb57-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb57-2">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb57-3">| ID                                   | Agent Type         | Host         | Availability Zone | Alive | State | Binary                    |</span>
<span id="cb57-4">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb57-5">| 750d6eb8-a89b-495e-86ab-65a9235d963c | Open vSwitch agent | network-node | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb57-6">| 7921c839-1935-4d29-888d-8efae2f31aff | L3 agent           | main-node    | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb57-7">| 7cb4df27-5d40-429d-816e-8336d7a9867c | Metadata agent     | network-node | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb57-8">| ad40304b-b078-434d-bb6d-8e4087f7c7e1 | Open vSwitch agent | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb57-9">| b9770fe2-6a6a-4f77-9c5e-c0b058eb6966 | L3 agent           | network-node | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb57-10">| d02ba59c-cc43-4a5d-bff0-98bd3713ba53 | Metadata agent     | main-node    | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb57-11">| e22251c8-053d-47a7-8980-0e17e2b15341 | DHCP agent         | network-node | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb57-12">| f46c9a7d-d67b-49bf-9d7a-d9c268fd3229 | DHCP agent         | main-node    | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb57-13">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb57-14">(venv) [root@thoth ~]# openstack availability zone list</span>
<span id="cb57-15">+-----------+-------------+</span>
<span id="cb57-16">| Zone Name | Zone Status |</span>
<span id="cb57-17">+-----------+-------------+</span>
<span id="cb57-18">| internal  | available   |</span>
<span id="cb57-19">| nova      | available   |</span>
<span id="cb57-20">| nova      | available   |</span>
<span id="cb57-21">| nova      | available   |</span>
<span id="cb57-22">| nova      | available   |</span>
<span id="cb57-23">+-----------+-------------+</span></code></pre></div>
<p>This is even worse, now it didn’t even create the main availability zone.</p>
<p>On the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html#example-multiple-interfaces">kolla-ansible docs for neutron</a>, it mentions that if you have multiple physical networks, you need to name them differently.</p>
<p>The <a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">multinode documention</a> details how to an ansible inventory to declare different variables for each service. Using this, I can replace change the physical interface names from physnet1 to something else. I am thinking physnet4 and physnet6, because of ipv4 and ipv6.</p>
<p>I tried changing the bridge name, however, nothing changed.</p>
<p>According to the <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/neutron/templates/ml2_conf.ini.j2#L27">jinja2 template</a> which is used to generate the ml2-ini.conf</p>
<pre class="jinja2"><code>[ml2_type_flat]
{% if enable_ironic | bool %}
flat_networks = *
{% else %}
flat_networks = {% for interface in neutron_external_interface.split(',') %}physnet{{ loop.index0 + 1 }}{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}</code></pre>
<p>The bridge names variable is completely ignored, and the flat_networks variable is generated purely from <code>neutron_external_interface</code> variable.</p>
<p>Although never directly stated, I think the docs are assuming that every network (and probably openstack, since neutron is also ran on the compute nodes) will have access to the exact same physical networks. However, in my setup, not every node will have access to the same networks. I think I have to use node-specific configurations to, to ensure that openstack understands that the physical network that my VPS has access to, and the one my server has access to, are not the same.</p>
<p>One thing I am thinking of trying is simply deploying openstack, editing <code>/etc/kolla/neutron-server/ml2_conf.ini</code>, and then rebooting, and seeing if that works. However, I don’t even now if this will actually work, so I will have to test.</p>
<p>Now I’ve encountered a problem: this file does not exist on the pure network node. It only exists on the main node. Is it possible to configure koll-ansible to deploy this folder to all nodes?</p>
<p>I found the exact <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/neutron/tasks/config.yml#L167">playbook where the jinja2 template is deployed</a>. I then did some more hunting and found out when this exact playbook is ran, <a href="https://github.com/openstack/kolla-ansible/blob/7186f960d93f2e523a2052acd0287e176f7ac927/ansible/roles/neutron/tasks/config.yml#L162">when servers are in the neutron-server group</a>.</p>
<p>But after looking throught the multinode inventory, I realized that it’s not network nodes that are in the neutron-server group, but rather <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/inventory/multinode#L288C5-L288C5">only the control nodes</a>.</p>
<p>Based on this, it seems like that directory is purely for the control nodes, which run neutron-server, the API.</p>
<p>Because of this, I decided to add my network node to the neutron-server hosts, which resulted in this directory being created on the server. I then edited the file, but when I tried to create network with the physical net name <code>physnet2</code> I got an error.</p>
<p>I found another <a href="https://github.com/openstack/kolla-ansible/blob/f64c86de1ddec947b7c5cf9d262346d7f0d8fce4/ansible/roles/neutron/templates/openvswitch_agent.ini.j2#L18">config file</a>, where the bridges seem to map to physical network names. I edited this file:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/kolla/neutron-openvswitch-agent/openvswitch-agent.ini</strong></pre>
</div>
<div class="sourceCode" id="cb59" data-filename="/etc/kolla/neutron-openvswitch-agent/openvswitch-agent.ini" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb59-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ovs]</span></span>
<span id="cb59-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bridge_mappings </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> physnet2:br-ex</span></span></code></pre></div>
</div>
<p>But I still get the same error.</p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb60-1">(venv) [root@thoth kolla]# openstack network create --external --provider-physical-network physnet2 --provider-network-type flat public1</span>
<span id="cb60-2">Error while executing command: BadRequestException: 400, Invalid input for operation: physical_network 'physnet2' unknown for flat provider network.</span>
<span id="cb60-3">(venv) [root@thoth kolla]# openstack network create --external --provider-physical-network physnet1 --provider-network-type flat public1</span>
<span id="cb60-4">+---------------------------+--------------------------------------+</span>
<span id="cb60-5">| Field                     | Value                                |</span>
<span id="cb60-6">+---------------------------+--------------------------------------+</span>
<span id="cb60-7">| admin_state_up            | UP                                   |</span>
<span id="cb60-8">| availability_zone_hints   |                                      |</span>
<span id="cb60-9">| availability_zones        |                                      |</span>
<span id="cb60-10">| created_at                | 2023-09-26T03:14:59Z                 |</span>
<span id="cb60-11">| description               |                                      |</span>
<span id="cb60-12">| dns_domain                | None                                 |</span>
<span id="cb60-13">| id                        | 378f8457-c50f-4554-91cf-905d9ec08ac7 |</span>
<span id="cb60-14">| ipv4_address_scope        | None                                 |</span>
<span id="cb60-15">| ipv6_address_scope        | None                                 |</span>
<span id="cb60-16">| is_default                | False                                |</span>
<span id="cb60-17">| is_vlan_transparent       | None                                 |</span>
<span id="cb60-18">| mtu                       | 1500                                 |</span>
<span id="cb60-19">| name                      | public1                              |</span>
<span id="cb60-20">| port_security_enabled     | True                                 |</span>
<span id="cb60-21">| project_id                | 1e28ab734f2d45d986259ee44a54ff42     |</span>
<span id="cb60-22">| provider:network_type     | flat                                 |</span>
<span id="cb60-23">| provider:physical_network | physnet1                             |</span>
<span id="cb60-24">| provider:segmentation_id  | None                                 |</span>
<span id="cb60-25">| qos_policy_id             | None                                 |</span>
<span id="cb60-26">| revision_number           | 1                                    |</span>
<span id="cb60-27">| router:external           | External                             |</span>
<span id="cb60-28">| segments                  | None                                 |</span>
<span id="cb60-29">| shared                    | False                                |</span>
<span id="cb60-30">| status                    | ACTIVE                               |</span>
<span id="cb60-31">| subnets                   |                                      |</span>
<span id="cb60-32">| tags                      |                                      |</span>
<span id="cb60-33">| tenant_id                 | 1e28ab734f2d45d986259ee44a54ff42     |</span>
<span id="cb60-34">| updated_at                | 2023-09-26T03:14:59Z                 |</span>
<span id="cb60-35">+---------------------------+--------------------------------------+</span>
<span id="cb60-36">(venv) [root@thoth kolla]# </span></code></pre></div>
<p>Although creating a network with the physical network <code>physnet1</code> works, <code>physnet2</code> doesn’t work.</p>
<p>But then, I did something that did work. I edited <code>/etc/kolla/neutron-server/ml2_conf.ini</code> on the <strong>main</strong> node, to contain <code>physnet1,physnet</code>. This worked, and then I could create a network with <code>physnet2</code>.</p>
<p>But if I put an instance on it, does it actually work? Well, I tried to create an image, and it failed but the openstack error is very vague. I have gotten this error due to not enough resources in the past, but based on some quick research, it can happen because of networks not being set up properly, either.</p>
<p>I decided to look at the logs:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>main-node:/var/logs/kolla/nova/nova-compute.log</strong></pre>
</div>
<div class="sourceCode" id="cb61" data-filename="main-node:/var/logs/kolla/nova/nova-compute.log" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb61-1">...</span>
<span id="cb61-2">2023-09-26 09:48:40.783 7 ERROR nova.compute.manager [instance: 0ef0f1be-e4aa-4140-89af-4402f992f18b] nova.exception.PortBindingFailed: Binding failed for port ee3ee85b-6edf-4ace-a921-10fcca3637b3, please check neutron logs for more information.</span>
<span id="cb61-3">....</span></code></pre></div>
</div>
<p>Well, that error is pretty explicit. What I am going to do is redeploy, but without the having two servers with the <code>neutron-server</code> role, and see if that works.</p>
<p>So I did the same thing, with only one neutron server, edited openvswitch.ini, and then attempted to create an instance on physnet2. It failed.</p>
<p>I then created a network on physnet1, and created an instance on that network. It worked, getting an ip which I could access externally and all. I could also do the same with a floating ip on that network, and it would get external internet access, and I could reach it externally. So at least I have this system halfway working.</p>
<p>Rather than attempting to put a virtual machine directly on an external network, I instead sought to allocate it a floating ip address. Same error.</p>
<p>I decided to search the configuration directories for more related to this:</p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb62-1">[root@main-node /etc/kolla]# find . -type f -exec grep -H 'physnet' {} +</span>
<span id="cb62-2">./neutron-server/ml2_conf.ini:flat_networks = physnet1,physnet2</span>
<span id="cb62-3">./neutron-openvswitch-agent/openvswitch_agent.ini:bridge_mappings = physnet1:br-ex</span>
<span id="cb62-4"></span>
<span id="cb62-5">[root@network-node /etc/kolla]# find . -type f -exec grep -H 'physnet' {} +</span>
<span id="cb62-6">./neutron-openvswitch-agent/openvswitch_agent.ini:bridge_mappings = physnet2:br-ex</span></code></pre></div>
<p>So I can’t be missing a config file, since find seems not to find anything but those two files that I already edited.</p>
<p>So, I decided to do something that I probably should have done from the very beginning: I decided to test with a sole network node, with the main node no longer having that role.</p>
<p>And it didn’t work. I’m not sure yet, but I’m guessing that the default method I was attempting to use for external network interfaction, provider networks, requires that the virtual machine be on the same host as the network is one, since it works by giving virtual machines direct physical access to networks.</p>
<p>What I did, that works (mostly from <a href="https://github.com/openstack/kolla-ansible/blob/master/tools/init-runonce">init-runonce</a>, the sample setup script):</p>
<ol type="1">
<li><code>openstack network create --external --provider-physical-network physnet1 --provider-network-type flat public1</code></li>
</ol>
<ul>
<li>or just do it from the UI, create a flat network with the name, physnet1</li>
</ul>
<ol start="2" type="1">
<li>In the horizon UI, give this subnet the proper options. That’s way easier than trying to edit the command given by init-runonce.</li>
<li><code>openstack network create demo-net</code></li>
</ol>
<ul>
<li>Create a subnet in the horizon UI</li>
</ul>
<ol start="4" type="1">
<li><code>openstack router create demo-router</code></li>
<li><code>openstack router add subnet demo-router demo-subnet</code></li>
<li><code>openstack router set --external-gateway public1 demo-router</code></li>
</ol>
<ul>
<li>Note: according to <a href="https://github.com/openstack/kolla-ansible/blob/master/tools/init-runonce#L131">init-runonce</a>, the command is different for ipv6 external networks.</li>
</ul>
<p>Then, you can create an instance on that internal subnet. After the instance is created, you should be able to allocate it a floating ip address. When security groups were set up properly, I could ping and nmap it.</p>
<p>However, I encountered a hiccup already: The virtual machine does not see it’s ip address, and cannot bind to it for stuff. But that’s a problem for after I verify that this setup works on my full, two network node setup.</p>
<p>I attempted to set it up this way, but unlike my single network node setup, my virtual machine has no internet access. In addition to that, the floating ip cannot be accessed externally (no ping or nmap).</p>
<p>At this point, I am very confused, so I decided to send an email to the <a href="https://wiki.openstack.org/wiki/Mailing_Lists">openstack mailing list</a>.</p>
<p>I searched first, and I found <a href="https://lists.openstack.org/pipermail/openstack-discuss/2022-December/031522.html">a scenario similar to mine</a>. This person had an issue where, when they tried to add more bridges after they have already been deployed, using kolla-ansible’s reconfigure feature and editing the kolla yaml files. Although not the same to my situation, I will look at the logs and see if I am getting similar errors, or the like.</p>
<p>A few days later, I changed nothing except for updating the kolla-ansible deployment scripts (I recreated the venv). And it worked.</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/networkingworking.jpg" class="img-fluid"></p>
<p>I can use floating ip’s to put virtual machine’s on the network located on the network-node.</p>
<p>Now, at first there was an error when I attempted to put the virtual machine directly on the provider network, but then I changed that network to be a “shared” network and it worked. I think this is what I was missing when I attempted to do it originally, but there are too many variables for me to be able to isolate properly.</p>
<p>Anyway, now I can do both provider and floating ip on the main node. Provider networks are more performant, apparently.</p>
<p>However, one reddit user says that <a href="https://www.reddit.com/r/openstack/comments/zkogoe/ipv6_is_not_working_when_ml2_port_security_is/">ipv6 does not work when port security is enabled</a>. I need to investigate this more closely.</p>
<section id="ipv6" class="level3">
<h3 class="anchored" data-anchor-id="ipv6">IPv6</h3>
<p>I began to test to see if I could create an ipv6 floating ip:</p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb63-1">(venv) [root@intmain-node ~]# openstack floating ip create public1</span>
<span id="cb63-2">Error while executing command: BadRequestException: 400, Bad floatingip request: Network d5eaee4c-5a21-48f6-8b7b-a73f956bbeb9 does not contain any IPv4 subnet.</span></code></pre></div>
<p>Acording to the <a href="https://docs.openstack.org/neutron/latest/admin/config-ipv6.html#nat-floating-ips">docs</a>, floating ip addresses do not support ipv6.</p>
<p>I asked around, and apparently, you are supposed to use <a href="https://docs.openstack.org/neutron/latest/admin/config-subnet-pools.html">subnet pools</a> for this.</p>
<p>I first attempted to create one with my libvirt nat subnet:</p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb64-1">(venv) [root@intmain-node ~]# openstack subnet pool create --share --pool-prefix fd00::0/8  --default-prefix-length 8 demo-subnetpool6</span>
<span id="cb64-2">BadRequestException: 400: Client Error for url: http://192.168.124.112:9696/v2.0/subnetpools, Illegal prefix bounds: default_prefixlen=8, min_prefixlen=64.</span></code></pre></div>
<p>Apparently, openstack doesn’t support prefix lengths smaller than /64. That’s perfectly ok, as my “production” deployment will have that subnet. But my libvirt nat subnet, I made it a /8, which probably wasn’t a good idea.</p>
<p>I later changed my libvirt subnet to be smaller, but the subnet pools appeared to behave similarly to normal subnets, with me not being able to put a virtual machine on the remote network.</p>
<p>Chatgpt suggests that I do a more complex setup, where I basically create a physical network, subnet pool, and then allocate a portion of that subnet pool to a non-external network? I recorded the commands it gave so I can replicate them:</p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb65-1">openstack subnet pool create --default-prefix-length &lt;Prefix_Length&gt; --pool-prefix &lt;CIDR&gt; --name external-pool</span>
<span id="cb65-2">openstack network create --external --provider-network-type flat --provider-physical-network &lt;Physical_Network&gt; --provider-segment &lt;Segment_ID&gt; external-net</span>
<span id="cb65-3">openstack subnet create --network external-net --subnet-pool external-pool --no-dhcp external-subnet</span>
<span id="cb65-4">openstack network create my-project-net</span>
<span id="cb65-5">openstack subnet create --network my-project-net --subnet-pool external-pool my-project-subnet</span>
<span id="cb65-6">openstack server create --flavor &lt;Flavor&gt; --image &lt;Image&gt; --nic net-id=my-project-net my-vm</span></code></pre></div>
<p>I was attempting to do this from the UI, where I noticed that there was now an option to create a subnet from an existing pool, rather than specifying a number. But It fails with:</p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb66-1"> Error: Failed to create subnet "None" for network "demo-sixnet". Details</span>
<span id="cb66-2">Failed to allocate subnet: Cannot allocate requested subnet from the available set of prefixes. Neutron server returns request_ids: ['req-dccfaaae-c4e6-4bbc-99cc-3e5a9a49a467']</span></code></pre></div>
<p>I don’t know why this happens yet. I tried with both a /64, which is the same as the subnet above, and several smaller values, like /128, the smallest it would let me work with, and it still failed.</p>
<p>I found an interesting <a href="https://superuser.openinfra.dev/articles/disable-nat-ipv4-openstack/">article from the openinfra blog</a> (<a href="https://web.archive.org/web/20231015073139/https://superuser.openinfra.dev/articles/disable-nat-ipv4-openstack/">archive</a>) about how to disable NAT for the ipv4 subnets, but it appears to be written for the older openstack, before the unified cli.</p>
<p>According to the blog, however, it says that the address scopes are <em>mandatory</em> if you want to have this setup. Here are the <a href="https://docs.openstack.org/mitaka/networking-guide/config-address-scopes.html">mikata (older release)</a>, and here are the <a href="https://docs.openstack.org/neutron/latest/contributor/internals/address_scopes.html">latest</a> docs from the openstack docs.</p>
<p>Based on the address scope guide, I tried following that. But when I get to one of the later steps:</p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb67-1">(venv) [root@intmain-node ~]# openstack subnet create --ip-version 6 --ipv6-ra-mode slaac --ipv6-address-mode slaac --subnet-pool subnet-pool-ip6 --prefix-length 128 --network network2 subnet-ip6-2</span>
<span id="cb67-2">HttpException: 500: Server Error for url: http://192.168.124.112:9696/v2.0/subnets, Failed to allocate subnet: Insufficient prefix space to allocate subnet size /128.</span></code></pre></div>
<p>Both /64 and /128 give me the same error. On one hand, I want to increase the size of my libvirt subnet, however, then that would not be representative of my real scenario, where I will only have a /64 subnet.</p>
<p>Linked in the address scopes doc, is a <a href="https://www.youtube.com/watch?v=j5hy11YlSOU">video</a>. That video is not very helpful, but in links to it’s <a href="https://www.slideshare.net/eyepv6/deploying-ipv6-in-openstack-environments">presentation</a>, hosted on a site called slideshare. Slideshare recommends similar presentations, and I saw two others, <a href="https://www.slideshare.net/ritchey98/openstack-neutron-ipv6-lessons">this one</a>, and <a href="https://www.slideshare.net/vietstack/deploying-ipv6-on-openstack">this one</a>.</p>
<p>Both articles mention that with SLAAC (what is slaac?), only a /64 prefix is used.</p>
<p>Anyway, I still lack understanding of why this is ahppenign. Maybe a /64 is the minimum size I can allocate? But then why would the UI have options for smaller subnet sizes? Anyways, I am going to test it out by chaging my libvirt subnet to be something bigger, like a /56.</p>
<p>I attempted to upsize my subnet to a /64, but I kept getting an error. The error was somethign about dnsmasq (dhcp server), and it requiring a minimum subnet prefix size of /64. I turned off dhcpv6, and only then was I able to create an ipv6 /56 subnet. Only tangentally related, but maybe the openstack is having a similar issue?</p>
<p>I tried creating a subnet with dhcp disabled, same issue.</p>
<p>Another thing I will attempt to experiment with is working with ports directly. I might be able to create a port on a subnet, and directly attatch it to a virtual machine.</p>
<p>I attempted to connect a port from the ipv6 subnet to a virtual machine directly:</p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb68-1">Unexpected API Error. Please report this at http://bugs.launchpad.net/nova/ and attach the Nova API log if possible. &lt;class 'nova.exception_Remote.PortBindingFailed_Remote'&gt; (HTTP 500)</span></code></pre></div>
<p>I will have to investigate the logs futher, but I suspect that it simply isn’t possible to allocate ports to machines that aren’t on the same network.</p>
<p>Another person mentioned how they used <a href="https://docs.openstack.org/neutron/latest/admin/config-bgp-dynamic-routing.html">BGP</a> to get this working, but I don’t know what BGP is. It seems this setup requires address scopes.</p>
<p>I spent some time talking on discord (did I link the openstack discord here?). I was told it’s not possible, by someone who seems pretty knowledgable. They said that with ipv6, devices are expected, and recommended to have a unique ip address. Link to <a href="https://datatracker.ietf.org/doc/html/rfc5902">relevant doc</a>.</p>
<p>However, I still find this hard to believe, since some <a href="https://blogs.infoblox.com/ipv6-coe/you-thought-there-was-no-nat-for-ipv6-but-nat-still-exists/">blog posts</a>, mention the existance of an ipv6 nat.</p>
<p>I have a new idea: the router has a subnet, and this subnet is exposed via a vpn. Packets are forwarded to this subnet. Because this subnet is located on the same physical node, there is no need to worry about the more compex pieces of openstack networking.</p>
<p>One reddit user <a href="https://www.reddit.com/r/WireGuard/comments/lwkksi/using_ipv6_from_a_vps_provider_in_my_home_network/">says that this is possible if ebtables are disabled</a>.</p>
<p>Okay, later the person I was talking to on discord mentioned that it is indeed possible, but not with NAT, but instead with BGP.</p>
<blockquote class="blockquote">
<p>Yes as the flow will be: ipv6 address X is on node A but to reach it you need to contact me router A (on network node).</p>
</blockquote>
<p>I asked what to search for since docs aren’t too good, and they said:</p>
<blockquote class="blockquote">
<p>Openstack neutron OVN/OVS BGP north/south traffic ipv6 🙂 Should give you plenty documentation.</p>
</blockquote>
<p>I asked further about doing this with just OVS, since OVN seems to add more complications and is not enabled by default in kolla-ansible.</p>
<blockquote class="blockquote">
<p>OVN is still OpenVSwitch but with a different approach and structure, thought about it as OVS 2.0.</p>
</blockquote>
<blockquote class="blockquote">
<p>And yes you can achieve what you want with OVS instead of OVN.</p>
</blockquote>
<p>From the openstack docs: <a href="https://docs.openstack.org/neutron/2023.1/admin/config-bgp-floating-ip-over-l2-segmented-network.html" class="uri">https://docs.openstack.org/neutron/2023.1/admin/config-bgp-floating-ip-over-l2-segmented-network.html</a> but it seems to mainly apply to ipv4.</p>
<p>Also: <a href="https://docs.openstack.org/neutron/latest/admin/config-bgp-dynamic-routing.html" class="uri">https://docs.openstack.org/neutron/latest/admin/config-bgp-dynamic-routing.html</a></p>
<p><a href="https://www.youtube.com/watch?v=yUOsN2ka1Gk">Youtube video</a>, and the slides are <a href="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-assets-prod/presentation-media/20170508-IPv6-Lessons.pdf">in pdf here</a></p>
<p>I also desire to enable vpn-as-a-service. But <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron-extensions.html#neutron-vpnaas-vpn-as-a-service">according to the docs</a>, that’s not too difficult to set up.</p>
</section>
</section>
<section id="multi-node-install" class="level2">
<h2 class="anchored" data-anchor-id="multi-node-install">Multi Node Install</h2>
<p>A multi node install is documented here: <a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/user/multinode.html</a></p>
<p>For convinience purpose, I will have my inventory git tracked, in the same repo as my blog.</p>
<p>One thing I am confused about, is where does the globals.yml file go? In the all in one installation, it goes on the single server, which you both deploy from, and to. But if I am deploying to a different machine, do I put this file on the machines I am deploying to, or the machines I am deploying from?</p>
<p>The other thing I am concerned about is how virtual machines will interact to being on a different node than the primary networking node. If I have a compute node, which doesn’t have access to an external subnet, and a networking node that does, then can I have a virtual machine on the external subnet that only the networking node has access to?</p>
<p>I have created multiple machines and an ansible inventory.</p>
<p>But apparently, the deployment host actually is configured a bit, since I got this error:</p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb69-1">fatal: [localhost]: FAILED! =&gt; {</span>
<span id="cb69-2">    "assertion": "ansible_facts.distribution in host_os_distributions",</span>
<span id="cb69-3">    "changed": false,</span>
<span id="cb69-4">    "evaluated_to": false,</span>
<span id="cb69-5">    "msg": "Host OS distribution Archlinux is not supported. Supported distributions are: CentOS, Debian, openEuler, Rocky, Ubuntu"</span>
<span id="cb69-6">}</span></code></pre></div>
<p>I decided to ignore this and power through anyways.</p>
<p>However, for the post deploy step, I needed to create the /etc/openstack directory and chown it to user so that sudo permissions aren’t needed to modify it.</p>
<p>Also, based on my testing, the globals.yml file goes on the deployment host.</p>
<p>So I deployed a two node openstack install, and I attempt to create a virtual machine, but I get an error. It’s one of those incomprehensible python errros, but after looking at my virtual machine, they appear to be out of ram.</p>
<p>This is weird, because I don’t think I have anything enabled but the core openstack services. Currently, I have just two vps’s, a network node with 3 GB of ram and a compute node with 6 Gb of ram.</p>
<p>Because of the ram usage, I can’t properly test. In order to get more ram, I decided to install libvirt on my “moonstack”, which is going to be the openstack compute node. I find this highly ironic (and not the openstack component), since I am basically setting up my server to run virtual machines in an easier manner to prototype for doing so in a harder manner.</p>
<p>Using a combination of cockpit-machines, ssh proxy jumping, and virt-manager’s ability to manage a remote I managed to deploy an all in one, and a network node. Besides the default services, I also enabled magnum, zun (and kuryr, container networking), and cinder (via nfs).</p>
<p>Here is the memory usage for both nodes:</p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb70-1">[root@network-node ~]# free -m</span>
<span id="cb70-2">               total        used        free      shared  buff/cache   available</span>
<span id="cb70-3">Mem:            7486        2190        2105          15        3538        5295</span>
<span id="cb70-4">Swap:           7883           0        7883</span></code></pre></div>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb71-1">[root@main-node ~]# free -m</span>
<span id="cb71-2">               total        used        free      shared  buff/cache   available</span>
<span id="cb71-3">Mem:            7486        6816         273          61         857         669</span>
<span id="cb71-4">Swap:           7883          77        7806</span></code></pre></div>
<p>Good. The network node seems to have ample free space, meaning all of my fancy networking will fit just fine on my 8 GB of ram VPS.</p>
<p>The main node seems to be a little… strangled, but 8 GB is nothgin compared to the 128 GB teh actual install will have.</p>
<p>Now I need to test openstack network interactions.</p>
<p>I upgraded the main node to have 16 GB of ram, and I did an all in one installation + a network node. The network node has a second virtio interface, which is attatched to a different NAT subnet. The point of this is to test how openstack networking works when not all network nodes have their neutron external interfaces on the same subnet.</p>
<p>Ram usage:</p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb72-1">[root@network-node ~]# free -m</span>
<span id="cb72-2">               total        used        free      shared  buff/cache   available</span>
<span id="cb72-3">Mem:            7486        2198        2102          14        3532        5287</span>
<span id="cb72-4">Swap:           7883           0        7883</span>
<span id="cb72-5">[root@main-node ~]# free -m</span>
<span id="cb72-6">               total        used        free      shared  buff/cache   available</span>
<span id="cb72-7">Mem:           15350        8221         558          90        7025        7129</span>
<span id="cb72-8">Swap:           7883           1        7882</span></code></pre></div>
</section>
<section id="ipv6-on-contabo" class="level2">
<h2 class="anchored" data-anchor-id="ipv6-on-contabo">Ipv6 on Contabo</h2>
<p>More vps networking, I can’t believe it.</p>
<p>As I get closer to a deployment, I need to make sure that I have the ipv6 addresses available.</p>
<p><a href="https://contabo.com/blog/ipv6-now-available-for-all-our-customers/" class="uri">https://contabo.com/blog/ipv6-now-available-for-all-our-customers/</a></p>
<p>According to this article, contabo makes an entire /112 range of ipv6 addresses avaiable to their customers by default. That’s 65535 ip addresses.</p>
<p>Except this article seems to be outdated.</p>
<p>According to <a href="https://contabo.com/en/customer-support/faq/#how-can-i-use-ipv6-on-my-server-at-contabo">a newer FAQ</a>, the range seems to be /64.</p>
<p><a href="https://contabo.com/blog/adding-ipv6-connectivity-to-your-server/" class="uri">https://contabo.com/blog/adding-ipv6-connectivity-to-your-server/</a></p>
<p>According to the above article, contabo has already added ipv6 support, and you simply look at the vps control page to see your available ipv6 address. However, there is no such box on my vps control page.</p>
<p>I think this may have something to do with the fact that campus internet is not ipv6 capable, so maybe there is no need to show it to me since I would not be able to access it.</p>
<p>Or it could do with the fact that this article is from 2013 and possible wildly out of date.</p>
<p>However, on the reverse DNS page, my vps’s ipv6 address is shown:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/ipv6.png" class="img-fluid"></p>
<p>So, inferring from that, I can tell that my vps’s ipv6 address is “2605:a141:2140:3809:0000:0000:0000:0001”. And if I get a /64 range, then I can tell my range is 2605:a141:2140:3809::/64. Of course, that’s not enough, I also need to know the default gate way for this network… The article above details it for a different subnet, but I don’t know for my own subnet.</p>
<p>There is a command, <code>enable_ipv6</code> which comes out of the box on the contabo servers, but it doesn’t do anthing:</p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb73-1">[root@vmi1403809 ~]# which enable_ipv6</span>
<span id="cb73-2">alias enable_ipv6='sed -i "/net.ipv6.conf.all.disable_ipv6.*/d" /etc/sysctl.conf &amp;&amp; sysctl -q -p &amp;&amp; echo 0 &gt; /proc/sys/net/ipv6/conf/all/disable_ipv6'</span>
<span id="cb73-3">        /usr/bin/sed</span>
<span id="cb73-4">        /usr/sbin/sysctl</span>
<span id="cb73-5">        /usr/bin/echo</span></code></pre></div>
<p>All it does is change the sysctl parameters to enable ipv6, and it doesn’t actually set it up. Without knowing my default gateway, nothing I do with ipv6 will be able to access the internet.</p>
<p>Using cockpit and networkmanager, I set my ipv6 address to what was above. The default gateway was fe80::1, which was noted <a href="https://contabo.com/blog/adding-ipv6-connectivity-to-your-server/">here</a>. I tried to ping it and nmap it but I diddn’t see anything.</p>
<p>For DNS, rather than using contabo’s DNS, I decided to go for google’s two public ipv6 dns’s, <code>2001:4860:4860::8844</code>, and <code>2001:4860:4860::8888</code>. These are noted on <a href="https://developers.google.com/speed/public-dns/docs/using">google’s developer docs</a>.</p>
<p>Sure enough, when I proxy into my server (I used ssh with the -D option), and go to <a href="https://test-ipv6.com/" class="uri">https://test-ipv6.com/</a> I get this result:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/serveripv6.jpg" class="img-fluid"></p>
<p>My server has a public ipv6 address now. And if I can give this interface a public ipv6 address, then openstack will definitely be able to give any virtual interfaces it creates public ipv6 addresses.</p>
<p>Later, I realized that the way openstack allocates floating ip addresses, is by contacting an external dhcp server, so I have to create my own dhcp server.</p>
<p>In addition to that, if I want to access the ipv6 services from my VPS, then I will need to have an ipv6 address configured.</p>
<p>The arch wiki has some instructions for setting up <a href="https://wiki.archlinux.org/title/Dnsmasq">dnsmasq</a>, a lightweight, easy to configure dhcp server.</p>
<p>For testing, I decided to use the subnet <code>fd00::/8</code> for the private ipv6 subnet I will be testing on.</p>
</section>
<section id="network-interfaces" class="level2">
<h2 class="anchored" data-anchor-id="network-interfaces">Network interfaces</h2>
<p>So I realized something. According to the <a href="https://docs.openstack.org/kolla-ansible/latest/admin/production-architecture-guide.html">kolla-ansible architechture guide</a>, ansible cannot recognize interface names with dashes. So because of this, I’ve decided to rename the wireguard interface from wg-stack to wgstack.</p>
<p>Another thing that looks a bit confusing is the <code>dns_interface</code> option, which appears to be used by designate for external dns requests. By default, this interface defaults to the same as the “network_interface”, which will not have public internet access on my vps (since I am using the wireguard as that interface). However, since I won’t be installing designate, it shouldn’t be too much of an issue?</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/projects/build-server-2/</guid>
  <pubDate>Wed, 02 Aug 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
