<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jeffrey Fonseca</title>
<link>https://moonpiedumplings.github.io/allposts.html</link>
<atom:link href="https://moonpiedumplings.github.io/allposts.xml" rel="self" type="application/rss+xml"/>
<description>All posts, intended to be used in an RSS feed. </description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 15 Nov 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>CCDC Environment setup</title>
  <link>https://moonpiedumplings.github.io/guides/ccdc-env/index.html</link>
  <description><![CDATA[ 



<p>This will be the guide(s) on how to set up your environment for CCDC playing, and development. I hope to make videos, but right now I’m just taking notes.</p>
<section id="windows" class="level1">
<h1>Windows</h1>
<section id="play-environment" class="level2">
<h2 class="anchored" data-anchor-id="play-environment">Play environment</h2>
<p>As long as you Windows 10 May 2020 Update (version 2004), you can install wsl with a single command. Otherwise, you have to follow some <a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual">painful steps</a></p>
<p>In an elevated powershell window:</p>
<p><code>wsl --install</code></p>
<p>Reboot the system.</p>
<p>Then, launch wsl with <code>wsl</code> from powershell or cmd.</p>
<p>It’s going to ask you for some prompts. Because this is a development environment, focusing on speed rather than security, I recommend an easy to type username and password.</p>
<p>Edit the sudoers file:</p>
<p>To edit the sudo file, you can use <code>sudo visudo</code> to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/sudoers</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1"># Change the portion of the file referring to env_reset to look like this:</span>
<span id="cb1-2"># Put an "!" in front of env_reset, and comment out the part referring to secure path</span>
<span id="cb1-3"></span>
<span id="cb1-4">Defaults        !env_reset</span>
<span id="cb1-5">Defaults        mail_badpass</span>
<span id="cb1-6">#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" </span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"></span>
<span id="cb1-10"># Change the portion of the file that refers to wheel to look like this:</span>
<span id="cb1-11"></span>
<span id="cb1-12">%sudo ALL=(ALL:ALL) NOPASSWD: ALL</span></code></pre></div>
</div>
<p>Either reboot, or restart the wsl virtual machine.</p>
<p>To restart the WSL vm, from <strong>powershell</strong> or <strong>cmd</strong>:</p>
<p><code>wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg</code></p>
<p><code>echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list</code></p>
<p>Install docker and docker-compose (and curl and git, other tools we will need later):</p>
<p><code>sudo apt update &amp;&amp; sudo apt upgrade</code></p>
<p><code>sudo apt install docker.io docker-compose curl git ssh wget virt-manager</code></p>
<p>You might have to reboot here, before the next step will work. Maybe.</p>
<p><code>sudo usermod -aG docker $USER # Run docker without sudo</code></p>
<p><code>sudo usermdo -aG libvirt $USER # Run libvirt vms without sudo</code></p>
<p>Install nix (tool used to manage our development environments):</p>
<p><code>curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install</code></p>
<p>Restart your shell. Simply close and reopen the debian terminal.</p>
<p>Update the nix channels:</p>
<p><code>nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs</code></p>
<p><code>nix-channel --update</code></p>
<p>Install the zellij terminal multiplexer:</p>
<p><code>nix profile install nixpkgs#zellij</code></p>
</section>
<section id="outside-wsl" class="level2">
<h2 class="anchored" data-anchor-id="outside-wsl">Outside WSL</h2>
</section>
<section id="chocolatey" class="level2">
<h2 class="anchored" data-anchor-id="chocolatey">Chocolatey?</h2>
<p><a href="https://chocolatey.org/install#individual">Install chocolatey here</a></p>
</section>
<section id="firefox" class="level2">
<h2 class="anchored" data-anchor-id="firefox">Firefox</h2>
<p><a href="https://www.mozilla.org/en-US/firefox/new/">Install firefox</a></p>
<section id="wezterm" class="level3">
<h3 class="anchored" data-anchor-id="wezterm">Wezterm</h3>
<p>Install wezterm from either chocolatey or the <a href="https://wezfurlong.org/wezterm/install/windows.html">official website</a> (using the setup.)</p>
<p>On a vm, I get an error about the opengl version being incompatible when I attempt to launch wezterm. I have to launch it with `wezterm –config “prefer_egl=true”.</p>
<p>To launch the ubuntu session, you can right click on the new tab, and then a menu will appear, from which you can select Ubuntu.</p>
</section>
</section>
<section id="virtualbox" class="level2">
<h2 class="anchored" data-anchor-id="virtualbox">Virtualbox</h2>
<p><a href="https://www.virtualbox.org/wiki/Downloads">Virtualbox website</a></p>
<p>You may need to install the <a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-20220">Microsoft Visual C++ Redistributable 2019</a> in order to install VirtualBox.</p>
<p>Attempting to install <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_6_1">older builds</a></p>
<p>Virtualbox and wsl at the same time is a bit tricky, so you have to follow <a href="https://stackoverflow.com/a/69896662">this stackoverflow answer</a></p>
<p>Now install vscode, from the website: <a href="https://code.visualstudio.com/download" class="uri">https://code.visualstudio.com/download</a></p>
<p>When you use the windows installer, ensure the “add to path” option is selected, it should be enabled by default.</p>
<p>Install these vscode extensions, and their dependencies (should be pulled automatically):</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=redhat.ansible">Ansible</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto">Quarto</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">WSL</a></li>
</ul>
</section>
</section>
<section id="macos" class="level1">
<h1>Macos</h1>
<p>Install nix (tool used to manage our development environments):</p>
<p><code>curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install</code></p>
<p>Update the nix channels:</p>
<p><code>sudo nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs</code></p>
<p><code>sudo nix-channel --update</code></p>
</section>
<section id="playing-and-developing" class="level1">
<h1>Playing and Developing</h1>
<section id="playing" class="level3">
<h3 class="anchored" data-anchor-id="playing">Playing</h3>
<p><code>git clone https://github.com/CSUN-CCDC/CCDC-2023</code></p>
<p>When in the root of this git repo, you can run <code>nix-shell</code> to get a full development environment. It includes tools like ansible, ansible checking, and vagrant.</p>
<p>For the play environment, that is located in the root of utils/ directory.</p>
</section>
</section>
<section id="also-to-look-into" class="level1">
<h1>Also to look into</h1>
<p>This is just for the developers.</p>
<p><a href="https://github.com/nix-community/nix-direnv" class="uri">https://github.com/nix-community/nix-direnv</a></p>
<p>Direnv, as an alternative to multiplexing for the competition environments.</p>
<p>Libvirt on macos: <a href="https://libvirt.org/macos.html" class="uri">https://libvirt.org/macos.html</a></p>
<p>Nested virtualization in wsl:</p>
<p><a href="https://www.paralint.com/2022/11/find-new-modified-and-unversioned-subversion-files-on-windows" class="uri">https://www.paralint.com/2022/11/find-new-modified-and-unversioned-subversion-files-on-windows</a></p>
<p>These are personal notes, for myself and anyone else who wants to work on this guide.</p>
<p><a href="https://docs.docker.com/desktop/wsl/" class="uri">https://docs.docker.com/desktop/wsl/</a></p>
<p><a href="https://code.visualstudio.com/docs/remote/wsl" class="uri">https://code.visualstudio.com/docs/remote/wsl</a></p>
<p>I don’t like, we don’t need or want remote development</p>
<p><a href="https://code.visualstudio.com/docs/remote/wsl-tutorial" class="uri">https://code.visualstudio.com/docs/remote/wsl-tutorial</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode" class="uri">https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode</a></p>


</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/guides/ccdc-env/index.html</guid>
  <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Linux and Programming Related Twitch Streamers</title>
  <link>https://moonpiedumplings.github.io/blog/twitch/index.html</link>
  <description><![CDATA[ 



<p>I like to watch people program on twitch. Seeing people suffer with code reminds me that I am not alone.</p>
<p>I may be missing a few, so I will add them onto this list as I find them.</p>
<p>In no particular order, here the ones I’ve seen around:</p>
<table class="table">
<thead>
<tr class="header">
<th>Streamer</th>
<th>Content</th>
<th>Linux User?</th>
<th>Misc Notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.twitch.tv/het_tanis">het_tanis</a></td>
<td>Teaches linux, k8s devops, and ansible related things on stream.</td>
<td>Windows as desktop, but uses xenserver (kinda unorthodox choice IMO) as a VM host for linux machines of every type</td>
<td>Killercoda courses can be found <a href="https://killercoda.com/het-tanis">here</a></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/cidermcdread">cidermcdread</a></td>
<td>Various games, old school runescape, path of exile.</td>
<td>Nixos</td>
<td>Also discusses philosophical and political topics in a very engaging manner</td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/chrissiecodes">chrissiecodes</a></td>
<td>Python development, often for stream related features</td>
<td>Ubuntu in WSL</td>
<td>Very active and knowledgable chat which is fun to be in.</td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/trshpuppy">trshpuppy</a></td>
<td>python, javascript, and CTF’s/hacking</td>
<td>Windows, but Kali in a VM</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/hedge_in">hedge_in</a></td>
<td>Low level operating system and machine learning</td>
<td>No</td>
<td>Often is studying these topics on stream for class</td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/pwncollege">pwncollege</a></td>
<td>Various college clacsses in the cybersecurity curriculum of Arizona State University</td>
<td>Various teachers some of whom probably use linux, but the format the classes are in does not let me see or ask</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/cyberkaida">cyberkaida</a></td>
<td>Low level operating programming, python</td>
<td>Macos, but does work for linux like on the rasperry pi</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/lcolonq">lcolonq</a></td>
<td>Rust programming, or whatever language emacs uses.</td>
<td>Nixos</td>
<td><p>Uses emacs window manager as his main wm.</p>
<p>Wrote his own vtuber rendering engine, which renders to ascii art in the terminal.</p></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/badcop_">badcop_</a></td>
<td>Gamejams, showing off content and programming for. Stream related features.</td>
<td>WSL</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/theyagich">theyagich</a></td>
<td>Gamedev in Godot</td>
<td>Manjaro</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/cybersteffie">cybersteffie</a></td>
<td>Seems to be doing IRL more often recently, but has done programming work on stream</td>
<td>WSL</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/piratesoftware/">piratesoftware</a></td>
<td>Programming, and discussions of the software space</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/ambivalentbunnie">ambivalentbunnie</a></td>
<td>Often studies for high level machine learning and data science classes on stream</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/expiredpopsicle">ExpiredPopsicle</a></td>
<td>Gamdev/vtuber dev in godot. Also plays modded doom.</td>
<td>Debian Stable</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/rw_grim">rw_grim</a></td>
<td>Work on open source source multi chat client <a href="https://pidgin.im/">pidgin</a></td>
<td>Debian Unstable, sometimes experimental</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/hexadigital">hexadigital</a></td>
<td>Various games</td>
<td>Manjaro on Desktop, Debian on server</td>
<td>Does not talk, but does chat</td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/quantumapprentice">quantumapprentice</a></td>
<td>various programming projects</td>
<td>Alternates between Linux Mint and Windows</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/thealtf4stream">TheAltF4Stream</a></td>
<td>Cloud, Devops, Kubernetes</td>
<td>Mac on desktop</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/melkey">Melkey</a></td>
<td>Web/Fullstack. ML/AI</td>
<td>Ubuntu I think, but I will have to confirm</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/enlynn_">enlynn_</a></td>
<td>Various programming</td>
<td>Endeavor OS</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/purplelf">purplelf</a></td>
<td>Works at Gumroad, where she does Ruby and React, on stream</td>
<td>Nobara</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://www.twitch.tv/anthonywritescode">anthonywritescode</a></td>
<td>Python developer</td>
<td>Current Ubuntu LTS in a virtual machine</td>
<td></td>
</tr>
<tr class="odd">
<td><a href="https://www.twitch.tv/elvensourcerer">elvensourcerer</a></td>
<td>Develops QT in python</td>
<td>Nixos</td>
<td></td>
</tr>
</tbody>
</table>



 ]]></description>
  <guid>https://moonpiedumplings.github.io/blog/twitch/index.html</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CCDC Learning Resources</title>
  <link>https://moonpiedumplings.github.io/guides/ccdc-learning/index.html</link>
  <description><![CDATA[ 



<p>This document was designed for our CSUN CCDC team, but since it’s useful, I am putting it on my personal blog as well.</p>
<p>Prerequisites:</p>
<ul>
<li>Creating a <a href="https://en.wikipedia.org/wiki/Virtual_machine">virtual machine</a>. Install the <a href="https://www.virtualbox.org/">virtualbox</a> software, and download the <a href="https://www.osboxes.org/linux-mint/">linux mint image from osboxes.org</a>. With this, the activities in the below resources will be a lot more interactive.</li>
<li>Github account. Join our CSUN-CCDC organization</li>
</ul>
<section id="linux" class="level1">
<h1>Linux</h1>
<section id="guided" class="level2">
<h2 class="anchored" data-anchor-id="guided">Guided</h2>
<p>Some resources to get started on your linux journey.</p>
<p><a href="https://linuxjourney.com/" class="uri">https://linuxjourney.com/</a></p>
<p>Linuxjourney is a very good guide, but it has some stuff not relevant to what we are doing.</p>
<p>You don’t need to networking nomad, but you do need to do grasshopper and journeyman.</p>
<p>Out of the stuff on those two programs, skip:</p>
<ul>
<li>Text-fu</li>
<li>Text-fu advanced</li>
</ul>
<p>We will probably either be using nano or automation/scripting to edit files.</p>
<ul>
<li><p>Boot processes</p></li>
<li><p>From init, skip anything not relevant to systemd. No one uses upstart or systemv anymore.</p></li>
</ul>
</section>
</section>
<section id="ansible" class="level1">
<h1>Ansible:</h1>
<p><a href="https://www.youtube.com/playlist?list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70">this video series</a> by learnlinuxtv.</p>
<p>Follow along using your virtual machine. You can setup ssh, or you can have an inventory of <code>localhost</code> to run playbooks on the same machine as you are currently on.</p>
<p>Once you have experimented with ansible enough, you can also experiment with running our ansible playbooks.</p>
</section>
<section id="windows" class="level1">
<h1>Windows</h1>
<section id="active-directory" class="level2">
<h2 class="anchored" data-anchor-id="active-directory">Active Directory</h2>
<p><a href="https://www.youtube.com/watch?v=zyud11pz40s">A cat explains active directory</a></p>
<p>High level overview, covering some of the history and many of the concepts behind active directory.</p>
<p><a href="https://www.youtube.com/watch?v=7kWdCzswPIc">A cat explains kerberos</a></p>
<p>I have not watched yet, but based on the above video, which mentions how active directory includes kerberos, it is probably relevant.</p>
<p><a href="https://learn.microsoft.com/en-us/training/modules/introduction-to-ad-ds/">Microsoft’s Intro to AD</a></p>
<p><a href="https://github.com/Orange-Cyberdefense/GOAD">GOAD - Game of Active Direcotyr</a></p>
<p>This is a highly insecure active directory which can be auto deployed to hyperv, proxmox, virtualbox, or azure. It uses a mix of ansible, terraform, and packer to provision and deploy.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/guides/ccdc-learning/index.html</guid>
  <pubDate>Sat, 28 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Containers (that run on linux)</title>
  <link>https://moonpiedumplings.github.io/talks/containers/index.html</link>
  <description><![CDATA[ 



<p>The layer8 Cybersecurity club as Cal State Northridge asked me to do a talk on linux containers (not to be confused with <a href="https://en.wikipedia.org/wiki/LXC">LXC</a>).</p>
<p>In this presentation, I talk a bit about the history of containers, types, and the various ways you can run a container on a system.</p>
<p>I recorded it, although the recording isn’t very good. In addition to that, the slides are also public, and they can be found <a href="../../talks/containers/revealjs.html">here</a></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/w2vRWGVOs1E" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/talks/containers/index.html</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building an ML pipeline</title>
  <link>https://moonpiedumplings.github.io/projects/ai-pipeline/index.html</link>
  <description><![CDATA[ 



<p>For my Black Studies and Culture class (AFRS 100), the class mainly consists of a single major project, which we are given free reign about. So obviously, I made mine related to computer science.</p>
<p>There is a very good documentary, called “Coded Bias”, on Netflix. In it, MIT researcher Joy Buolamwini discovers that existing facial recognition AI struggle to differentiate black people properly, or sometimes to even recognize them as a face.</p>
<p>The film also goes further in depth, like how facial recognition is being increasingly used to surveil populations. It gives the example of in the UK, where a facial recognition AI is employed to catch “criminals,” but the AI has the same issue of not being able to differentiate between black people, which leads to innocent people being accosted.</p>
<p>Of course, innocent white people also got accosted by this system. And there were also people who sought to protect their own face, but then were pulled over simply for desiring privacy. However, black people are definitely affected worse than other groups by systems such as this. The combination of the sheer apathy towards marginalized groups in the creation of facial recognition AI, and the already existing racism present in policing systems multiplies to create something much worse. Now, when the officer pulls you over, it’s not because they thought you “looked like a criminal”, it’s because the uncaring, unchallengeable AI said you “matched a criminal on the database.”</p>
<p>My research question is simple: Is this bias in facial recognition AI (specifically, the popular, public models) still the case?</p>
<p>To test this, I have a research plan.</p>
<p>Using my own server, I will download, existing, pretrained facial recognition models (models are like the learned information that drives AI), and maybe their datasets (data, like images, used to train AI), from <a href="https://www.kaggle.com/">kaggle</a> and <a href="https://huggingface.co/">huggingface</a>, two of the popular sites for public AI models.</p>
<p>I will then use a survey, and ask people to take pictures of their face from multiple angles. These images will be attached to a pseudo anonymous identifier. In addition to this, I will ask people to report their race as other people would view them.</p>
<p>After I have collected this information, I will attempt to use facial recognition on the images I have collected, checking the accuracy of matching them to the images. Using this, I can see how biased the facial recognition of some of the popular publicly available facial recognition models are.</p>
<section id="selection-of-software-and-models" class="level1">
<h1>Selection of software and models</h1>
<section id="models" class="level2">
<h2 class="anchored" data-anchor-id="models">Models</h2>
<p>For now, this is just some research on available public models.</p>
<p><a href="https://hackernoon.com/6-best-open-source-projects-for-real-time-face-recognition-vr1w34x5">hackernoon</a> article, <a href="https://web.archive.org/web/20230423202315/https://hackernoon.com/6-best-open-source-projects-for-real-time-face-recognition-vr1w34x5">archive</a>.</p>
<p><a href="https://github.com/ageitgey/face_recognition" class="uri">https://github.com/ageitgey/face_recognition</a> : Machine learning based python facial recognition library.</p>
</section>
<section id="survey-software" class="level2">
<h2 class="anchored" data-anchor-id="survey-software">Survey Software</h2>
<p>I need a survey software that integrates with the transformers that I will be running. They must be FOSS, and run entirely on my machines, for privacy reasons.</p>
<section id="option-1-limesurvey" class="level3">
<h3 class="anchored" data-anchor-id="option-1-limesurvey">Option 1: Limesurvey:</h3>
<p><a href="https://github.com/LimeSurvey/LimeSurvey" class="uri">https://github.com/LimeSurvey/LimeSurvey</a></p>
<p>Many of the docker images seem to be a bit outdated, and I can’t find an official one.</p>
<p>Thankfully, there exists a Nixos <a href="https://search.nixos.org/packages?channel=23.05&amp;show=limesurvey&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=limesurvey">package</a> and <a href="https://search.nixos.org/options?channel=23.05&amp;show=limesurvey&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=limesurvey">service</a> for it, meaning that will be fairly easy to deploy.</p>
<p>It supports <a href="https://manual.limesurvey.org/Question_type_-_File_upload">file upload</a>, but no image upload.</p>
<p>This one also has a python library to interact with it, so I can import data straight from there and plug it into a ML model.</p>
</section>
<section id="option-2-odoo-survey" class="level3">
<h3 class="anchored" data-anchor-id="option-2-odoo-survey">Option 2: Odoo Survey</h3>
<p><a href="https://github.com/odoo/odoo" class="uri">https://github.com/odoo/odoo</a></p>
<p>There also exists a <a href="https://search.nixos.org/options?channel=23.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=odoo">Nixos service</a> for this.</p>
<p>I don’t know if it supports images. See <a href="https://www.odoo.com/documentation/16.0/applications/marketing/surveys/create.html">docs</a></p>
</section>
<section id="option-3-kobotoolbox" class="level3">
<h3 class="anchored" data-anchor-id="option-3-kobotoolbox">Option 3: Kobotoolbox</h3>
<p>Github Organization: <a href="https://github.com/kobotoolbox" class="uri">https://github.com/kobotoolbox</a></p>
<p>They do have a docker container on there. No nix packages though, but that’s ok.</p>
<p>They do support the <a href="https://support.kobotoolbox.org/photo_audio_video_file.html?highlight=image">photo</a> image type.</p>
<p>There is an unofficial python api: <a href="https://pypi.org/project/pykobo/" class="uri">https://pypi.org/project/pykobo/</a>. However, it import data as a pandas dataframe, and I don’t know if it is possible to store images in those.</p>
</section>
<section id="option-4-openforis-collect" class="level3">
<h3 class="anchored" data-anchor-id="option-4-openforis-collect">Option 4: OpenForis Collect</h3>
<p>Has a <a href="https://openforis.org/tools/collect-mobile/">mobile app</a>, which can request users to take a photo. Only available on android.</p>
</section>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<p>I was going to go with limesurvey, in part because it was the first option I tried, and it was mostly satisfactory, and I didn’t have enough time to try anything else.</p>
<p>I found a <a href="https://github.com/martialblog/docker-limesurvey">docker-compose</a> for it on github, however, I realized something: My server’s cannot install docker normally, because that is potentially compatible with my future <a href="../build-server-2/">openstack</a> install. Uh oh.</p>
<p>I installed docker using kolla-ansible’s bootstrap steps, but that version of docker did not have networking working properly. So I decided to do something different: podman.</p>
<p>However, because I am using Rocky Linux, there is no podman-compose, or docker-compose available in the repositories. In addition to that, I cannot install the podman-docker command, providing a replacement cli for docker that actually uses podman, as that conflicts with docker.</p>
<p>Thankfully, you can use an <a href="https://podman-desktop.io/docs/migrating-from-docker/using-the-docker_host-environment-variable">environment variable</a> to make it so that the docker client, is actually using podman as a backend. This allows me to use the included <code>docker compose</code> command.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1"></span>
<span id="cb1-2">systemctl start podman.service # or enable --now</span>
<span id="cb1-3"></span>
<span id="cb1-4">export DOCKER_HOST=unix:///run/podman/podman.sock</span></code></pre></div>
<p>And with this, I can run <code>docker compose</code>, but it’s actually using podman.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/projects/ai-pipeline/index.html</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Being an internet helper</title>
  <link>https://moonpiedumplings.github.io/blog/helping/index.html</link>
  <description><![CDATA[ 



<p><em>The below is my “literacy narrative essay”, for an english class</em></p>
<p>I was so close to hacking this system. Using a USB thumb drive as a boot device, I booted a different operating system on the computer, which originally ran windows. I then used some digital tools to enable the local administrator account, in a passwordless mode. When I removed the USB thumb drive, and restarted the machine, it returned to the innocuous login prompt, asking me to sign in with my school credentials. I ignored that, and signed into the admin account instead. I’m in.</p>
<p>It was a different kind of puzzle. But just like any other puzzle, I solved it for the gratification, rather than there being some end goal. Eventually, the computer’s were reset, and all my hard work was lost.</p>
<p>Later, when my computer was becoming too slow, I felt an itch in the back of my mind again. A new puzzle.</p>
<p>How do I make my computer faster?</p>
<p>I was tinkering already, and I had some ideas of how to make it faster, but I needed reassurance. Unfortunately, not all puzzles can be solved alone. I ended up asking for help on the internet.</p>
<p>Although 4 years ago, and the post has since been deleted, although not by me, I still remember what I asked for. I wanted to know how to replace the lowest level of software on my computer, the operating system, going from the slower Windows that is available on most devices by default, to the more difficult to use, but faster, Linux. However, I did not want to break the existing Windows install, and I also wanted to have “save points” of my linux installation, so that I could tinker and then restore my system to a previous state, giving my system some resilience.</p>
<p>The users were patient, and kind, and although they didn’t hold my hand for the entire process, they pointed me in the right directions, teaching me terminology and pointing me to resources that I could use to help myself. Eventually, I managed to solve that puzzle, and some variations of the changes I made, I do on all computers I own today.</p>
<p>After I ran out of puzzles to solve, I began solving other people’s puzzles. I would watch the forums religiously, viewing the newest posts first, so I could contribute before someone else. Sometimes, things were easy, and it was simply a case of a newer user not knowing what to search for, and I could point them in the right direction. For example, people would often ask if their hardware is compatible with Linux, so I would point them to a site that extensively documents hardware compatibility. With every reply thanking me, I felt immense gratification.</p>
<p>Of course, things wouldn’t always be as simple as that. Often, users weren’t simply seeking to do something, but to understand something as well. In this case where existing resources weren’t enough, I had to explain step by step.</p>
<p>One user was curious about how Linux software distribution works. What makes it different from Windows, or Mac, they asked? As painful as it was to type from my phone, I presented the unbiased reality of how Linux software management is objectively superior. Because some things, you have to explain personally, and you can’t point people to external resources.</p>
<p>Very often, new users don’t know how to ask for help, and you have to request for more information from them. For some reason, people often have trouble running games on Linux, but they won’t mention what game they are trying to play? I don’t understand how people understand how to get help if they don’t give enough information, but asking for help isn’t really something that comes intuitively to people.</p>
<p>Of course, once I know what game they play, I can give more detailed help. One time, there was a user who had nothing but a chromebook, but desired to get more performance out of it so that they could play one of my favorite games. Over the course of several days via purely discord text chats, I helped this person with installing Linux and installing the game on an unsupported device and operating system. But despite all that, their efforts didn’t bear much fruit, and they ended up giving up.</p>
<p>Although frustrating to see someone give up, it happens sometimes. On the other end, I’ve had to give up on cases as well. In one online community I followed, there was a constant influx of users asking similar or even the same questions. Although many people, including me, first started out by answering them, eventually the community got tired and sometimes even hostile to such users.</p>
<p>On the internet, “Help Vampires” are one type of person that appears in forums. This term refers to people who are unwilling to do the bare minimum of research, or put any effort into any problem. An infrequent occurrence on the internet, It’s difficult to help someone if they don’t help themselves. In many cases, it’s impossible.</p>
<p>A similar thing happened when a user was attempting to play a video game on Linux, and got an error about the kernel (the lowest lowest level of software, part of, but also under the operating system) not supporting a feature. Because of this, they were attempting to install a new kernel. However, what I found strange was the error message was requesting a feature that normally is not needed. The actual issue this user was encountering was that they enabled a non-necessary feature in their game launcher.</p>
<p>This is a common occurrence, common enough that there is actually a term for it: the XY problem where a user attempts to get help with their attempted solution, rather than their actual problem. Rather than explaining the whole XY problem, I would usually refer people to this website: https://xyproblem.info/.</p>
<p>In another post, a user asked if anyone has experience with the integration of two pieces of technology, one being a VPN, and the other being a management platform. They gave no other information. What this user was actually asking was: “Is there anybody around with experience with these techs that is willing to look into my problem, including extracting what my actual problem is me because I can’t be bothered to explain it?”</p>
<p>This is another occurrence on the internet that happens frequently enough that there is a term to refer to it, and a website which I refer people to: https://dontasktoask.com. Don’t ask your question, simply ask it to save everybody’s time.</p>
<p>As long as you have technical literacy, giving help to people troubleshooting on the internet is easy. Doing it nearly daily, for 4 years, without being burned out, is not. Many user’s helped out for a short period of time, to give back to the community, before becoming burned out and stopping. There were very few constants, people you could recognize just by their username, because they were that consistent.</p>
<p>I was one of them. Linux gave me a lot. Rather than gaming, I was tinkering. Working with Linux is likely what my job will be. But I didn’t, and still don’t, have the particular skill set to contribute to the Linux community through programming. I do intend to learn, but at the same time, I’ve come to love being a “helper” on the internet. The pleasure I get is threefold, one part for solving a problem, another for helping a stranger, and yet another for giving to this community that was willing to invest in me, back when I was barely a teen and didn’t know much.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/helping/index.html</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A notes format that I can automatically convert to flashcards?</title>
  <link>https://moonpiedumplings.github.io/playground/flashcards/index.html</link>
  <description><![CDATA[ 



<p>My goal is to have a notes format that I can automatically convert to flashcards, for studying.</p>
<p>So quarto has support for a format called <a href="https://quarto.org/docs/presentations/revealjs/">revealjs</a>.</p>
<p>Revealjs is basically presentations, like powerpoint or google slides, but in your browser. Although you can also print them to pdf.</p>
<p>Anyway, I was in need of some flashcards for my class and I wanted to see if I could use revealjs for this.</p>
<p>to create slides, just use a second level header:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Getting up</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Turn off alarm</span>
<span id="cb1-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Get out of bed</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Going to sleep</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Get in bed</span>
<span id="cb1-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>Count sheep</span></code></pre></div>
<p>However, I don’t really want a title, so I can simply have the second level header (<code>##</code>), without a title, and it still creates another slide.</p>
<p>By default, lists are revealed all at once. To change this, in your quarto heading options:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revealjs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">incremental</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Actually, I like content pauses better.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Slide with a pause</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">content before the pause</span>
<span id="cb3-4"></span>
<span id="cb3-5">. . .</span>
<span id="cb3-6"></span>
<span id="cb3-7">content after the pause</span></code></pre></div>
<p>Now, how can I randomize slide orders?</p>
<p>According to the <a href="https://github.com/hakimel/reveal.js/pull/1506">revealjs pull where this feature was implemented</a>:</p>
<p>I can have a range of slides, something like:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// for everything</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Reveal.configure({ random: true });</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">Reveal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">configure</span>({</span>
<span id="cb4-5">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb4-6">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">rangeStart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">rangeEnd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb4-8">                }</span>
<span id="cb4-9">            })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>No wait, quarto has an option to shuffle the slides.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffle</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Now, is there a way to randomize the the list? I want the list options to sometimes have the name, and sometimes have the content, and you have to match which with which.</p>
<p>chatgpt gave me this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb6-1"></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE </span>html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;html</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">lang</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;head&gt;</span></span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;meta</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">charset</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;meta</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">content</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;title&gt;</span>Randomized List on Page Load<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/title&gt;</span></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/head&gt;</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;body&gt;</span></span>
<span id="cb6-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;h1&gt;</span>Randomized List<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/h1&gt;</span></span>
<span id="cb6-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;ul</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"randomList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-12">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;li&gt;</span>Item 1<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/li&gt;</span></span>
<span id="cb6-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;li&gt;</span>Item 2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/li&gt;</span></span>
<span id="cb6-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;li&gt;</span>Item 3<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/li&gt;</span></span>
<span id="cb6-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;li&gt;</span>Item 4<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/li&gt;</span></span>
<span id="cb6-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;li&gt;</span>Item 5<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/li&gt;</span></span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/ul&gt;</span></span>
<span id="cb6-18"></span>
<span id="cb6-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;script&gt;</span></span>
<span id="cb6-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOMContentLoaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb6-21">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"randomList"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>) {</span>
<span id="cb6-23">                list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appendChild</span>(list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-24">            }</span>
<span id="cb6-25">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/script&gt;</span></span>
<span id="cb6-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/body&gt;</span></span>
<span id="cb6-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/html&gt;</span></span></code></pre></div>
<p>But does it work? :</p>



    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Randomized List on Page Load</title>


    <h1>Randomized List</h1>
    <ul id="randomList">
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
        <li>Item 4</li>
        <li>Item 5</li>
    </ul>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const list = document.getElementById("randomList");
            for (let i = list.children.length; i >= 0; i--) {
                list.appendChild(list.children[Math.random() * i | 0]);
            }
        });
    </script>


<p>But it doesn’t work in revealjs, as revealjs won’t run show thing incrementally.</p>
<p>Rather than lists, can I just have javascript manipulate classes and divs created by pandoc?</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">::: {#myCustomBlock .custom-class}</span>
<span id="cb7-2">This is a custom block that can be manipulated by JavaScript.</span>
<span id="cb7-3">:::</span></code></pre></div>
<p>This should be able to be changed by pandoc.</p>
<p>And then I can shuffle them with something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb8-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffleBlocks</span>() {</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> container <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blocksContainer"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>(container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>) {</span>
<span id="cb8-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-6">        [blocks[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> blocks[j]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [blocks[j]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> blocks[i]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">    }</span>
<span id="cb8-8">    container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerHTML</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-9">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appendChild</span>(block))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-10">}</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Shuffle the blocks when the page loads</span></span>
<span id="cb8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">window</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOMContentLoaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> shuffleBlocks)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>So to test:</p>
<p>Shuffle blocks:</p>
<div id="blockContainer">
<div class="block">
<p>This is Block 1.</p>
</div>
<div class="block">
<p>This is Block 2.</p>
</div>
<div class="block">
<p>This is Block 3.</p>
</div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;script&gt;</span></span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffleBlocks</span>() {</span>
<span id="cb9-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> container <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#blockContainer"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> blockDivs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>(container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".block"</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5">        </span>
<span id="cb9-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Shuffle the order of the block divs</span></span>
<span id="cb9-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockDivs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>) {</span>
<span id="cb9-8">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockDivs[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">            blockDivs[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockDivs[j]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-11">            blockDivs[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-12">        }</span>
<span id="cb9-13">        </span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append shuffled block divs back to the container</span></span>
<span id="cb9-15">        blockDivs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(blockDiv <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb9-16">            container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">appendChild</span>(blockDiv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-17">        })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-18">    }</span>
<span id="cb9-19"></span>
<span id="cb9-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Shuffle the blocks when the page loads</span></span>
<span id="cb9-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">window</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOMContentLoaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> shuffleBlocks)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/script&gt;</span></span></code></pre></div>
<script>
    function shuffleBlocks() {
        const container = document.querySelector("#blockContainer");
        const blockDivs = Array.from(container.querySelectorAll(".block"));
        
        // Shuffle the order of the block divs
        for (let i = blockDivs.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const temp = blockDivs[i];
            blockDivs[i] = blockDivs[j];
            blockDivs[j] = temp;
        }
        
        // Append shuffled block divs back to the container
        blockDivs.forEach(blockDiv => {
            container.appendChild(blockDiv);
        });
    }

    // Shuffle the blocks when the page loads
    window.addEventListener("DOMContentLoaded", shuffleBlocks);
</script>
<p>After many iterations with chatgpt, I finally got it to shuffle content.</p>
<p>Now is there a way to scale this across multiple slides? I don’t want to have to copy and paste this for the every single block. In fact, can I just make a custom html element that shuffles them?</p>
<p>So chatgpt gave me a custom html element class. It gave me a lot, actually, and none of them worked. So I’m giving up on that for now.</p>
<p>However, revealjs does support a grid slide layout, and it groups vertical slides together while randomizing their order, but it also randomizes the horizontal slides as well.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revealjs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">incremental</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dark</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffle</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navigation-mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> grid</span></span></code></pre></div>
<p>Eventually, I gave up on the revealjs format, after I found out that this flashcards app, <a href="https://apps.ankiweb.net/">anki</a></p>
<p>In my research, I found some tools which can convert other formats to anki:</p>
<table class="table">
<thead>
<tr class="header">
<th>Software</th>
<th>Last update?</th>
<th>Packaged?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/nx10/md2anki">md2anki</a></td>
<td>4 years ago</td>
<td>pypi</td>
</tr>
<tr class="even">
<td><a href="https://github.com/Mochitto/Markdown2Anki">markdown2anki</a></td>
<td>2 weeks ago</td>
<td>pypi</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/lukesmurray/markdown-anki-decks">markdown-anki-decks</a></td>
<td>1 year ago</td>
<td>pypi, but also in nixpkgs</td>
</tr>
</tbody>
</table>
<p>I did some testing. markdown-anki-decks is exceedingly simply, with something like:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Deck title</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## card front</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">card back</span></code></pre></div>
<p>to create a deck.</p>
<p>I also experimented with markdown2anki. It’s way, way more complex. Unlike the previous option, it has many, many options.</p>
<p>To create a simple flashcard:</p>
<p>```{.markdown}</p>



 ]]></description>
  <guid>https://moonpiedumplings.github.io/playground/flashcards/index.html</guid>
  <pubDate>Wed, 04 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Podman vs Docker</title>
  <link>https://moonpiedumplings.github.io/playground/podman-docker/index.html</link>
  <description><![CDATA[ 



<p>So I’ve been having some trouble, not with docker itself, but the way it interacts with the rest of the system. The big thing is that docker overwrites iptables rules, meaning any other bridges won’t work properly unless you set up iptables rules with the -I DOCKER-USER, which specifically sits in front of docker.</p>
<p>I encountered <a href="https://discuss.linuxcontainers.org/t/lxd-4-12-container-networking-failure-with-docker/10487/9">this issue</a> with linux containers, where the lxc containers did not have networking when docker was installed.</p>
<p>I also encoutered a similar issue when trying to setup NAT, the instructions on the <a href="https://wiki.archlinux.org/title/Internet_sharing#Enable_NAT">arch wiki</a> stated that the steps for machines that had docker installed were different but I did not realize this in my previous research.</p>
<p>The hope is that podman will have no such issue. But does podman have every feature of docker?</p>
<p>The first thing to consider is that podman has a docker-compat setup, where it gives you a compatibility command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">[moonpie@cachyos-x8664 containers]$ docker ps</span>
<span id="cb1-2">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span>
<span id="cb1-3">CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES</span></code></pre></div>
<p>It’s pretty good. Except:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">[moonpie@cachyos-x8664 registries.conf.d]$ docker pull jc21/nginx-proxy-manager:latest</span>
<span id="cb2-2">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span>
<span id="cb2-3">Error: short-name "jc21/nginx-proxy-manager:latest" did not resolve to an alias and no unqualified-search registries are defined in "/etc/containers/registries.conf"</span></code></pre></div>
<p>Unlike docker, podman does not have the &lt;docker.io&gt; as a default registry. You can still pull with <code>docker.io/jc21/nginx-proxy-manager</code>, but it’s inconvinient to change every script and whatnot to be like that.</p>
<p>The Red Hat Enable Sysadmin has a <a href="https://www.redhat.com/sysadmin/manage-container-registries">blog on this</a>. In the “pulling by shortnames” section they changed some podman settings:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/containers/registries.conf</strong></pre>
</div>
<pre class="init"><code>...
...
unqualified-search-registries = ['registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.centos.org', 'docker.io']
...
...</code></pre>
</div>
<p>This makes it so that podman will search for these images when not specificially told a registry.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">[moonpie@cachyos-x8664 containers]$ docker pull jc21/nginx-proxy-manager</span>
<span id="cb4-2">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span>
<span id="cb4-3">? Please select an image: </span>
<span id="cb4-4">  ▸ registry.fedoraproject.org/jc21/nginx-proxy-manager:latest</span>
<span id="cb4-5">    registry.access.redhat.com/jc21/nginx-proxy-manager:latest</span>
<span id="cb4-6">    registry.centos.org/jc21/nginx-proxy-manager:latest</span>
<span id="cb4-7">    docker.io/jc21/nginx-proxy-manager:latest</span></code></pre></div>
<p>Wow, this is pretty cool. It gives you an option to select when you have multiple default registries. If you only have one, then it just immediately defaults to that.</p>
<p>Podman also has <a href="https://www.redhat.com/sysadmin/podman-docker-compose">support for docker-compose</a></p>
<p>Once you have the docker compatibility package installed, simply start the podman service/socket, and docker-compose will work.</p>
<p>Except, I am wondering, will docker networks work? Podman seems to do something different, with podman pods, which don’t behave the same way as docker networks.</p>
<p>To test, I have created a simple docker-compose.yml, which has two contianers on the same network:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alpine_container_1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> alpine:latest</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tail"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/null"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Keeps the container running</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my_network</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alpine_container_2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> alpine:latest</span></span>
<span id="cb5-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tail"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/null"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Keeps the container running</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my_network</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span></code></pre></div>
<p>It seems to work, but….</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">[moonpie@cachyos-x8664 podman-docker]$ sudo podman network inspect podman-docker_my_network</span>
<span id="cb6-2">[</span>
<span id="cb6-3">     {</span>
<span id="cb6-4">          "name": "podman-docker_my_network",</span>
<span id="cb6-5">          "id": "0b11ee2d93ccd3427374b667b55dd7c42f12d68d296f6dca2ccad12a491b7e7d",</span>
<span id="cb6-6">          "driver": "bridge",</span>
<span id="cb6-7">          "network_interface": "podman1",</span>
<span id="cb6-8">          "created": "2023-09-03T06:21:14.350164238-07:00",</span>
<span id="cb6-9">          "subnets": [</span>
<span id="cb6-10">               {</span>
<span id="cb6-11">                    "subnet": "10.89.0.0/24",</span>
<span id="cb6-12">                    "gateway": "10.89.0.1"</span>
<span id="cb6-13">               }</span>
<span id="cb6-14">          ],</span>
<span id="cb6-15">          "ipv6_enabled": false,</span>
<span id="cb6-16">          "internal": false,</span>
<span id="cb6-17">          "dns_enabled": true,</span>
<span id="cb6-18">          "labels": {</span>
<span id="cb6-19">               "com.docker.compose.network": "my_network",</span>
<span id="cb6-20">               "com.docker.compose.project": "podman-docker",</span>
<span id="cb6-21">               "com.docker.compose.version": "2.20.3"</span>
<span id="cb6-22">          },</span>
<span id="cb6-23">          "options": {</span>
<span id="cb6-24">               "isolate": "true"</span>
<span id="cb6-25">          },</span>
<span id="cb6-26">          "ipam_options": {</span>
<span id="cb6-27">               "driver": "host-local"</span>
<span id="cb6-28">          }</span>
<span id="cb6-29">     }</span>
<span id="cb6-30">]</span>
<span id="cb6-31">[moonpie@cachyos-x8664 podman-docker]$ </span></code></pre></div>
<p>Whereas, when using <code>docker network inspect</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">moonpie@office:~$ docker network inspect mine</span>
<span id="cb7-2">[</span>
<span id="cb7-3">    {</span>
<span id="cb7-4">        "Name": "mine",</span>
<span id="cb7-5">        "Id": "73125f7a201062e8561f6d34110c2fdca2a3e21c423998e58da9ded56222a954",</span>
<span id="cb7-6">        "Created": "2023-02-23T03:57:12.249530356Z",</span>
<span id="cb7-7">        "Scope": "local",</span>
<span id="cb7-8">        "Driver": "bridge",</span>
<span id="cb7-9">        "EnableIPv6": false,</span>
<span id="cb7-10">        "IPAM": {</span>
<span id="cb7-11">            "Driver": "default",</span>
<span id="cb7-12">            "Options": {},</span>
<span id="cb7-13">            "Config": [</span>
<span id="cb7-14">                {</span>
<span id="cb7-15">                    "Subnet": "172.18.0.0/16",</span>
<span id="cb7-16">                    "Gateway": "172.18.0.1"</span>
<span id="cb7-17">                }</span>
<span id="cb7-18">            ]</span>
<span id="cb7-19">        },</span>
<span id="cb7-20">        "Internal": false,</span>
<span id="cb7-21">        "Attachable": false,</span>
<span id="cb7-22">        "Ingress": false,</span>
<span id="cb7-23">        "ConfigFrom": {</span>
<span id="cb7-24">            "Network": ""</span>
<span id="cb7-25">        },</span>
<span id="cb7-26">        "ConfigOnly": false,</span>
<span id="cb7-27">        "Containers": {</span>
<span id="cb7-28">            "01af5e2990ba9c4cee41de65500f72bd2a3c8e373bce373be251cf5a7a4549dd": {</span>
<span id="cb7-29">                "Name": "meshcentral",</span>
<span id="cb7-30">                "EndpointID": "c8b101d499a88d7c9ed0d476fa09915018e58fea0e83b24093b2d8768c12c464",</span>
<span id="cb7-31">                "MacAddress": "02:42:ac:12:00:07",</span>
<span id="cb7-32">                "IPv4Address": "172.18.0.7/16",</span>
<span id="cb7-33">                "IPv6Address": ""</span>
<span id="cb7-34">            },</span>
<span id="cb7-35">            "329b7fd59807573522a92c0e006f9cf92d44133a1f4e197d25f666a66bc5241e": {</span>
<span id="cb7-36">                "Name": "v2ray_proxy_1",</span>
<span id="cb7-37">                "EndpointID": "01ff85e55d6f1c9dee40ec09dbc258a1a5d5ad2728d35e3020d52211c076ebb1",</span>
<span id="cb7-38">                "MacAddress": "02:42:ac:12:00:03",</span>
<span id="cb7-39">                "IPv4Address": "172.18.0.3/16",</span>
<span id="cb7-40">                "IPv6Address": ""</span>
<span id="cb7-41">            },</span>
<span id="cb7-42">        },</span>
<span id="cb7-43">        "Options": {},</span>
<span id="cb7-44">        "Labels": {}</span>
<span id="cb7-45">    }</span>
<span id="cb7-46">]</span></code></pre></div>
<p>When using docker to to create networks, it tells you the ip addressed fo the containers in a network. Podman doesn’t do this.</p>
<p>But can the containers interact with eachother?</p>
<p>Yes, they can. While in one container, I could ping the other container. However, I had to get the container ip addresses by creating a shell in the containers, and then running <code>ip a</code> to view the ip addresses first.</p>
<p>Is there any way to view the container ip addresses from outside the container? Not all containers come with a shell builtin, some don’t have it for size purposes, and solely contain what is needed to run whatever application the container is packaging.</p>
<details>
<summary>
Podman inspect
</summary>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">[root@cachyos-x8664 podman-docker]# podman inspect podman-docker-alpine_container_1-1 </span>
<span id="cb8-2">[</span>
<span id="cb8-3">     {</span>
<span id="cb8-4">          "Id": "eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7",</span>
<span id="cb8-5">          "Created": "2023-09-03T06:21:14.357752403-07:00",</span>
<span id="cb8-6">          "Path": "tail",</span>
<span id="cb8-7">          "Args": [</span>
<span id="cb8-8">               "-f",</span>
<span id="cb8-9">               "/dev/null"</span>
<span id="cb8-10">          ],</span>
<span id="cb8-11">          "State": {</span>
<span id="cb8-12">               "OciVersion": "1.1.0-rc.3",</span>
<span id="cb8-13">               "Status": "running",</span>
<span id="cb8-14">               "Running": true,</span>
<span id="cb8-15">               "Paused": false,</span>
<span id="cb8-16">               "Restarting": false,</span>
<span id="cb8-17">               "OOMKilled": false,</span>
<span id="cb8-18">               "Dead": false,</span>
<span id="cb8-19">               "Pid": 37035,</span>
<span id="cb8-20">               "ConmonPid": 37033,</span>
<span id="cb8-21">               "ExitCode": 0,</span>
<span id="cb8-22">               "Error": "",</span>
<span id="cb8-23">               "StartedAt": "2023-09-03T06:21:14.742250101-07:00",</span>
<span id="cb8-24">               "FinishedAt": "0001-01-01T00:00:00Z",</span>
<span id="cb8-25">               "Health": {</span>
<span id="cb8-26">                    "Status": "",</span>
<span id="cb8-27">                    "FailingStreak": 0,</span>
<span id="cb8-28">                    "Log": null</span>
<span id="cb8-29">               },</span>
<span id="cb8-30">               "CgroupPath": "/machine.slice/libpod-eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7.scope",</span>
<span id="cb8-31">               "CheckpointedAt": "0001-01-01T00:00:00Z",</span>
<span id="cb8-32">               "RestoredAt": "0001-01-01T00:00:00Z"</span>
<span id="cb8-33">          },</span>
<span id="cb8-34">          "Image": "7e01a0d0a1dcd9e539f8e9bbd80106d59efbdf97293b3d38f5d7a34501526cdb",</span>
<span id="cb8-35">          "ImageDigest": "sha256:7144f7bab3d4c2648d7e59409f15ec52a18006a128c733fcff20d3a4a54ba44a",</span>
<span id="cb8-36">          "ImageName": "docker.io/library/alpine:latest",</span>
<span id="cb8-37">          "Rootfs": "",</span>
<span id="cb8-38">          "Pod": "",</span>
<span id="cb8-39">          "ResolvConfPath": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/resolv.conf",</span>
<span id="cb8-40">          "HostnamePath": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/hostname",</span>
<span id="cb8-41">          "HostsPath": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/hosts",</span>
<span id="cb8-42">          "StaticDir": "/var/lib/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata",</span>
<span id="cb8-43">          "OCIConfigPath": "/var/lib/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/config.json",</span>
<span id="cb8-44">          "OCIRuntime": "crun",</span>
<span id="cb8-45">          "ConmonPidFile": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/conmon.pid",</span>
<span id="cb8-46">          "PidFile": "/run/containers/storage/overlay-containers/eae4cc793f5f86b69e81a785cc32df36718250436d67e1b62037414b1d8e53e7/userdata/pidfile",</span>
<span id="cb8-47">          "Name": "podman-docker-alpine_container_1-1",</span>
<span id="cb8-48">          "RestartCount": 0,</span>
<span id="cb8-49">          "Driver": "overlay",</span>
<span id="cb8-50">          "MountLabel": "",</span>
<span id="cb8-51">          "ProcessLabel": "",</span>
<span id="cb8-52">          "AppArmorProfile": "",</span>
<span id="cb8-53">          "EffectiveCaps": [</span>
<span id="cb8-54">               "CAP_CHOWN",</span>
<span id="cb8-55">               "CAP_DAC_OVERRIDE",</span>
<span id="cb8-56">               "CAP_FOWNER",</span>
<span id="cb8-57">               "CAP_FSETID",</span>
<span id="cb8-58">               "CAP_KILL",</span>
<span id="cb8-59">               "CAP_NET_BIND_SERVICE",</span>
<span id="cb8-60">               "CAP_SETFCAP",</span>
<span id="cb8-61">               "CAP_SETGID",</span>
<span id="cb8-62">               "CAP_SETPCAP",</span>
<span id="cb8-63">               "CAP_SETUID",</span>
<span id="cb8-64">               "CAP_SYS_CHROOT"</span>
<span id="cb8-65">          ],</span>
<span id="cb8-66">          "BoundingCaps": [</span>
<span id="cb8-67">               "CAP_CHOWN",</span>
<span id="cb8-68">               "CAP_DAC_OVERRIDE",</span>
<span id="cb8-69">               "CAP_FOWNER",</span>
<span id="cb8-70">               "CAP_FSETID",</span>
<span id="cb8-71">               "CAP_KILL",</span>
<span id="cb8-72">               "CAP_NET_BIND_SERVICE",</span>
<span id="cb8-73">               "CAP_SETFCAP",</span>
<span id="cb8-74">               "CAP_SETGID",</span>
<span id="cb8-75">               "CAP_SETPCAP",</span>
<span id="cb8-76">               "CAP_SETUID",</span>
<span id="cb8-77">               "CAP_SYS_CHROOT"</span>
<span id="cb8-78">          ],</span>
<span id="cb8-79">          "ExecIDs": [</span>
<span id="cb8-80">               "8354949b4e0bf728dafa7b3e7b857ccce18e953b0f20473dbb06fe6442bf1d12"</span>
<span id="cb8-81">          ],</span>
<span id="cb8-82">          "GraphDriver": {</span>
<span id="cb8-83">               "Name": "overlay",</span>
<span id="cb8-84">               "Data": {</span>
<span id="cb8-85">                    "LowerDir": "/var/lib/containers/storage/overlay/4693057ce2364720d39e57e85a5b8e0bd9ac3573716237736d6470ec5b7b7230/diff",</span>
<span id="cb8-86">                    "MergedDir": "/var/lib/containers/storage/overlay/bbadcba900462960315aa406866164bd58a12573e76140093563525f595b1732/merged",</span>
<span id="cb8-87">                    "UpperDir": "/var/lib/containers/storage/overlay/bbadcba900462960315aa406866164bd58a12573e76140093563525f595b1732/diff",</span>
<span id="cb8-88">                    "WorkDir": "/var/lib/containers/storage/overlay/bbadcba900462960315aa406866164bd58a12573e76140093563525f595b1732/work"</span>
<span id="cb8-89">               }</span>
<span id="cb8-90">          },</span>
<span id="cb8-91">          "Mounts": [],</span>
<span id="cb8-92">          "Dependencies": [],</span>
<span id="cb8-93">          "NetworkSettings": {</span>
<span id="cb8-94">               "EndpointID": "",</span>
<span id="cb8-95">               "Gateway": "",</span>
<span id="cb8-96">               "IPAddress": "",</span>
<span id="cb8-97">               "IPPrefixLen": 0,</span>
<span id="cb8-98">               "IPv6Gateway": "",</span>
<span id="cb8-99">               "GlobalIPv6Address": "",</span>
<span id="cb8-100">               "GlobalIPv6PrefixLen": 0,</span>
<span id="cb8-101">               "MacAddress": "",</span>
<span id="cb8-102">               "Bridge": "",</span>
<span id="cb8-103">               "SandboxID": "",</span>
<span id="cb8-104">               "HairpinMode": false,</span>
<span id="cb8-105">               "LinkLocalIPv6Address": "",</span>
<span id="cb8-106">               "LinkLocalIPv6PrefixLen": 0,</span>
<span id="cb8-107">               "Ports": {},</span>
<span id="cb8-108">               "SandboxKey": "/run/netns/netns-4a204211-d01a-6d0f-bfd3-bfc34e73885e",</span>
<span id="cb8-109">               "Networks": {</span>
<span id="cb8-110">                    "podman-docker_my_network": {</span>
<span id="cb8-111">                         "EndpointID": "",</span>
<span id="cb8-112">                         "Gateway": "10.89.0.1",</span>
<span id="cb8-113">                         "IPAddress": "10.89.0.2",</span>
<span id="cb8-114">                         "IPPrefixLen": 24,</span>
<span id="cb8-115">                         "IPv6Gateway": "",</span>
<span id="cb8-116">                         "GlobalIPv6Address": "",</span>
<span id="cb8-117">                         "GlobalIPv6PrefixLen": 0,</span>
<span id="cb8-118">                         "MacAddress": "b2:af:b4:78:28:1b",</span>
<span id="cb8-119">                         "NetworkID": "podman-docker_my_network",</span>
<span id="cb8-120">                         "DriverOpts": null,</span>
<span id="cb8-121">                         "IPAMConfig": null,</span>
<span id="cb8-122">                         "Links": null,</span>
<span id="cb8-123">                         "Aliases": [</span>
<span id="cb8-124">                              "podman-docker-alpine_container_1-1",</span>
<span id="cb8-125">                              "alpine_container_1",</span>
<span id="cb8-126">                              "eae4cc793f5f"</span>
<span id="cb8-127">                         ]</span>
<span id="cb8-128">                    }</span>
<span id="cb8-129">               }</span>
<span id="cb8-130">          },</span>
<span id="cb8-131">          "Namespace": "",</span>
<span id="cb8-132">          "IsInfra": false,</span>
<span id="cb8-133">          "IsService": false,</span>
<span id="cb8-134">          "KubeExitCodePropagation": "invalid",</span>
<span id="cb8-135">          "lockNumber": 0,</span>
<span id="cb8-136">          "Config": {</span>
<span id="cb8-137">               "Hostname": "eae4cc793f5f",</span>
<span id="cb8-138">               "Domainname": "",</span>
<span id="cb8-139">               "User": "",</span>
<span id="cb8-140">               "AttachStdin": false,</span>
<span id="cb8-141">               "AttachStdout": false,</span>
<span id="cb8-142">               "AttachStderr": false,</span>
<span id="cb8-143">               "Tty": false,</span>
<span id="cb8-144">               "OpenStdin": false,</span>
<span id="cb8-145">               "StdinOnce": false,</span>
<span id="cb8-146">               "Env": [</span>
<span id="cb8-147">                    "TERM=xterm",</span>
<span id="cb8-148">                    "container=podman",</span>
<span id="cb8-149">                    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span>
<span id="cb8-150">                    "HOME=/root",</span>
<span id="cb8-151">                    "HOSTNAME=eae4cc793f5f"</span>
<span id="cb8-152">               ],</span>
<span id="cb8-153">               "Cmd": [</span>
<span id="cb8-154">                    "tail",</span>
<span id="cb8-155">                    "-f",</span>
<span id="cb8-156">                    "/dev/null"</span>
<span id="cb8-157">               ],</span>
<span id="cb8-158">               "Image": "docker.io/library/alpine:latest",</span>
<span id="cb8-159">               "Volumes": null,</span>
<span id="cb8-160">               "WorkingDir": "/",</span>
<span id="cb8-161">               "Entrypoint": "",</span>
<span id="cb8-162">               "OnBuild": null,</span>
<span id="cb8-163">               "Labels": {</span>
<span id="cb8-164">                    "com.docker.compose.config-hash": "6418caee2d42d6859badadf595f62af5fc514baebd949edbc3b925c9dd53ecc3",</span>
<span id="cb8-165">                    "com.docker.compose.container-number": "1",</span>
<span id="cb8-166">                    "com.docker.compose.depends_on": "",</span>
<span id="cb8-167">                    "com.docker.compose.image": "sha256:7e01a0d0a1dcd9e539f8e9bbd80106d59efbdf97293b3d38f5d7a34501526cdb",</span>
<span id="cb8-168">                    "com.docker.compose.oneoff": "False",</span>
<span id="cb8-169">                    "com.docker.compose.project": "podman-docker",</span>
<span id="cb8-170">                    "com.docker.compose.project.config_files": "/home/moonpie/vscode/moonpiedumplings.github.io/playground/podman-docker/docker-compose.yml",</span>
<span id="cb8-171">                    "com.docker.compose.project.working_dir": "/home/moonpie/vscode/moonpiedumplings.github.io/playground/podman-docker",</span>
<span id="cb8-172">                    "com.docker.compose.service": "alpine_container_1",</span>
<span id="cb8-173">                    "com.docker.compose.version": "2.20.3"</span>
<span id="cb8-174">               },</span>
<span id="cb8-175">               "Annotations": {</span>
<span id="cb8-176">                    "io.container.manager": "libpod",</span>
<span id="cb8-177">                    "org.opencontainers.image.stopSignal": "15"</span>
<span id="cb8-178">               },</span>
<span id="cb8-179">               "StopSignal": 15,</span>
<span id="cb8-180">               "HealthcheckOnFailureAction": "none",</span>
<span id="cb8-181">               "CreateCommand": [</span>
<span id="cb8-182">                    "/usr/bin/podman",</span>
<span id="cb8-183">                    "--log-level=info",</span>
<span id="cb8-184">                    "system",</span>
<span id="cb8-185">                    "service"</span>
<span id="cb8-186">               ],</span>
<span id="cb8-187">               "Umask": "0000",</span>
<span id="cb8-188">               "Timeout": 0,</span>
<span id="cb8-189">               "StopTimeout": 0,</span>
<span id="cb8-190">               "Passwd": true</span>
<span id="cb8-191">          },</span>
<span id="cb8-192">          "HostConfig": {</span>
<span id="cb8-193">               "Binds": [],</span>
<span id="cb8-194">               "CgroupManager": "systemd",</span>
<span id="cb8-195">               "CgroupMode": "private",</span>
<span id="cb8-196">               "ContainerIDFile": "",</span>
<span id="cb8-197">               "LogConfig": {</span>
<span id="cb8-198">                    "Type": "journald",</span>
<span id="cb8-199">                    "Config": null,</span>
<span id="cb8-200">                    "Path": "",</span>
<span id="cb8-201">                    "Tag": "",</span>
<span id="cb8-202">                    "Size": "0B"</span>
<span id="cb8-203">               },</span>
<span id="cb8-204">               "NetworkMode": "bridge",</span>
<span id="cb8-205">               "PortBindings": {},</span>
<span id="cb8-206">               "RestartPolicy": {</span>
<span id="cb8-207">                    "Name": "",</span>
<span id="cb8-208">                    "MaximumRetryCount": 0</span>
<span id="cb8-209">               },</span>
<span id="cb8-210">               "AutoRemove": false,</span>
<span id="cb8-211">               "VolumeDriver": "",</span>
<span id="cb8-212">               "VolumesFrom": null,</span>
<span id="cb8-213">               "CapAdd": [],</span>
<span id="cb8-214">               "CapDrop": [],</span>
<span id="cb8-215">               "Dns": [],</span>
<span id="cb8-216">               "DnsOptions": [],</span>
<span id="cb8-217">               "DnsSearch": [],</span>
<span id="cb8-218">               "ExtraHosts": [],</span>
<span id="cb8-219">               "GroupAdd": [],</span>
<span id="cb8-220">               "IpcMode": "shareable",</span>
<span id="cb8-221">               "Cgroup": "",</span>
<span id="cb8-222">               "Cgroups": "default",</span>
<span id="cb8-223">               "Links": null,</span>
<span id="cb8-224">               "OomScoreAdj": 0,</span>
<span id="cb8-225">               "PidMode": "private",</span>
<span id="cb8-226">               "Privileged": false,</span>
<span id="cb8-227">               "PublishAllPorts": false,</span>
<span id="cb8-228">               "ReadonlyRootfs": false,</span>
<span id="cb8-229">               "SecurityOpt": [],</span>
<span id="cb8-230">               "Tmpfs": {},</span>
<span id="cb8-231">               "UTSMode": "private",</span>
<span id="cb8-232">               "UsernsMode": "",</span>
<span id="cb8-233">               "ShmSize": 65536000,</span>
<span id="cb8-234">               "Runtime": "oci",</span>
<span id="cb8-235">               "ConsoleSize": [</span>
<span id="cb8-236">                    0,</span>
<span id="cb8-237">                    0</span>
<span id="cb8-238">               ],</span>
<span id="cb8-239">               "Isolation": "",</span>
<span id="cb8-240">               "CpuShares": 0,</span>
<span id="cb8-241">               "Memory": 0,</span>
<span id="cb8-242">               "NanoCpus": 0,</span>
<span id="cb8-243">               "CgroupParent": "",</span>
<span id="cb8-244">               "BlkioWeight": 0,</span>
<span id="cb8-245">               "BlkioWeightDevice": null,</span>
<span id="cb8-246">               "BlkioDeviceReadBps": null,</span>
<span id="cb8-247">               "BlkioDeviceWriteBps": null,</span>
<span id="cb8-248">               "BlkioDeviceReadIOps": null,</span>
<span id="cb8-249">               "BlkioDeviceWriteIOps": null,</span>
<span id="cb8-250">               "CpuPeriod": 0,</span>
<span id="cb8-251">               "CpuQuota": 0,</span>
<span id="cb8-252">               "CpuRealtimePeriod": 0,</span>
<span id="cb8-253">               "CpuRealtimeRuntime": 0,</span>
<span id="cb8-254">               "CpusetCpus": "",</span>
<span id="cb8-255">               "CpusetMems": "",</span>
<span id="cb8-256">               "Devices": [],</span>
<span id="cb8-257">               "DiskQuota": 0,</span>
<span id="cb8-258">               "KernelMemory": 0,</span>
<span id="cb8-259">               "MemoryReservation": 0,</span>
<span id="cb8-260">               "MemorySwap": 0,</span>
<span id="cb8-261">               "MemorySwappiness": 0,</span>
<span id="cb8-262">               "OomKillDisable": false,</span>
<span id="cb8-263">               "PidsLimit": 2048,</span>
<span id="cb8-264">               "Ulimits": [</span>
<span id="cb8-265">                    {</span>
<span id="cb8-266">                         "Name": "RLIMIT_NPROC",</span>
<span id="cb8-267">                         "Soft": 4194304,</span>
<span id="cb8-268">                         "Hard": 4194304</span>
<span id="cb8-269">                    }</span>
<span id="cb8-270">               ],</span>
<span id="cb8-271">               "CpuCount": 0,</span>
<span id="cb8-272">               "CpuPercent": 0,</span>
<span id="cb8-273">               "IOMaximumIOps": 0,</span>
<span id="cb8-274">               "IOMaximumBandwidth": 0,</span>
<span id="cb8-275">               "CgroupConf": null</span>
<span id="cb8-276">          }</span>
<span id="cb8-277">     }</span>
<span id="cb8-278">]</span></code></pre></div>
</details>
<p>I found something, but the output is massive and not easy to read.</p>
<p>The relevant part:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">"Networks": {</span>
<span id="cb9-2">                    "podman-docker_my_network": {</span>
<span id="cb9-3">                         "EndpointID": "",</span>
<span id="cb9-4">                         "Gateway": "10.89.0.1",</span>
<span id="cb9-5">                         "IPAddress": "10.89.0.2",</span></code></pre></div>
<p>What about rootless? Using the podman-compose I can launch rootless containers. However, according to the <a href="https://wiki.archlinux.org/title/Podman#Additional_dependencies">arch wiki</a> some extra dependencies are required for dns to work.</p>
<p>After installaling:</p>
<p>Rootless test (podman-compose):</p>
<pre class="defualt"><code>/ # ping podman-docker_alpine_container_2_1
PING podman-docker_alpine_container_2_1 (10.89.1.5): 56 data bytes
64 bytes from 10.89.1.5: seq=0 ttl=42 time=0.039 ms</code></pre>
<p>Rootfull test (docker-compose with podman backend):</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">/ # ping podman-docker-alpine_container_1-1</span>
<span id="cb11-2">PING podman-docker-alpine_container_1-1 (10.89.0.2): 56 data bytes</span>
<span id="cb11-3">64 bytes from 10.89.0.2: seq=0 ttl=42 time=0.044 ms</span></code></pre></div>
<p>So I can’t get the ip, but because dns in the container works, they can find eachother that way. Nice.</p>
<p>Since rootful podman containers using docker-compose work nicely, podman seems more and more appealing to me.</p>
<p>Another feature of podman that appeals to me is the <a href="https://www.howtogeek.com/devops/how-to-enable-podmans-automatic-container-updates/">auto updates</a></p>
<p>And another feature that makes podman appeal to me is the integration podman has with the cockpit web ui for managing linux systems. Because cockpit is made by Red Hat, who also develops podman, they deprecated docker support and now it only supports podman.</p>



 ]]></description>
  <category>linux</category>
  <category>docker</category>
  <guid>https://moonpiedumplings.github.io/playground/podman-docker/index.html</guid>
  <pubDate>Sun, 03 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Attempting to get secure boot and bootable BTRFS snapshots</title>
  <link>https://moonpiedumplings.github.io/playground/arch-secureboot/index.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
If these steps are followed blindly, you risk compromising your security
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Do not do what I did unless you have a similar setup to what I have, which is full disk encryption, with /boot/efi being the efi system partition, and the only unencrypted part of the system. This means that everything in /boot, including things like kernels, or grub configurations and supportive files.</p>
</div>
</div>
</div>
<p>I’ve been at this for some time now, so I will document what I have done, and further steps. Essentially, I am trying to do what <a href="https://wejn.org/2021/09/fixing-grub-verification-requested-nobody-cares/">this person</a> <a href="https://web.archive.org/web/20230609152526/https://wejn.org/2021/09/fixing-grub-verification-requested-nobody-cares/">archive</a> has done.</p>
<p>They go more into depth on the setup that we are both using, but essentially, I the only unencrypted part of my system is the grub efi binary. Normally, the kernels and kernel modules are also left unencrypted, and because of that, they must be signed in order to prevent an attacker from modifying them on the hard drive, either by removing the hard drive, or booting another operating system, like by a USB drive. Signing is a process that uses complex math to ensure that the computer can verify the authenticity of a file.</p>
<p>Normally, since the kernels are left unencrypted (and to cut off another avenue of attack on running systems), the kernels are signed in order to ensure that they haven’t been modified. However, in my setup, since only grub is left unencrypted, it’s the only thing that can be signed.</p>
<p>But for some reason, grub still attempts to verify the kernels even when it doesn’t need to. This is my struggle of getting it to <em>not</em> do that.</p>
<p>The first thing I did sign grub. I followed the insturctions on the <a href="https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Assisted_process_with_sbctl">Arch Wiki</a>. Except, rather than signing the kernels, I only signed grub.</p>
<p>I enabled secure boot, and reboted. Grub loaded up, and asked me for my password, but then gave me an error and put me into a rescue shell.</p>
<pre><code>error: prohibited by secure boot policy</code></pre>
<p>So I did some searching around. I found someone with the same issue on the <a href="https://bbs.archlinux.org/viewtopic.php?id=282076">Arch Linux BBS</a>. On that page, someone (reply #4) said that an update of grub (grub version 2.06, to be specific) had a change in policy where grub would refuse to load unsigned font files when in secure mode. This is good. There have been CVE’s (security vulnerabilities/issues) in the past where grub loading a malicious grub.cfg or font file can be exploited to make grub do things it’s not supposed to.</p>
<p>Except one tiny problem: Grub stores all configuration and font files in /boot/grub, which is encrypted in my setup. An attacker would not be able to modify it, so therefore I have no need to verify it. It’s actually a hassle to verify all this stuff, because they are tracked by BTRFS, and will be restored.</p>
<p>After some more research, I decided to install grub with the shim-lock option.</p>
<p>But I got another error:</p>
<pre><code>error: verification requested, but nobody cares: (cryptouid:uidhere/boot/grub/x86_64-efi/normal.mod)</code></pre>
<p>Normal mod was not signed.</p>
<p>Apparently, as long as secure boot it enabled, grub still attempts to verify the files. I did some searching around, before finding <a href="https://wejn.org/2021/09/fixing-grub-verification-requested-nobody-cares/">this article</a>, which I also linked above. They used sed (text finder and replacer) to replace some things in the grub <em>binary</em>.</p>
<pre><code>sed 's/SecureBoot/SecureB00t' grubx64.efi</code></pre>
<p>Except, after I ran this command:</p>
<pre><code>[root@lizard boot]# sbctl verify
Verifying file database and EFI images in /boot/efi...
✓ /boot/efi/EFI/cachyos/grubx64.efi is signed</code></pre>
<p>The grub binary <em>stayed</em> signed. Even after modification. What? Shouldn’t the grub binary being modified, break the signatures? Unless it does (I haven’t rebooted yet), and it’s just that the the sbctl tool doesn’t check whether or not the signatures are valid.</p>
<p>Regardless, I can’t know until I test, and I didn’t bother. I simmply resigned the the grub binary, but it still didn’t work.</p>
<p>I forgot to install grub with the <code>--disable-shim-lock</code> option.</p>
<p>Before this, I nuked the /boot/efi directory to ensure that nothing extraneous was left. For some reason, cachyos (arch based distro I am using), installs grub twice, once at /boot/efi/EFI/boot and another at /boot/efi/EFI/cachyos. Having only one grub binary further simplifies this process.</p>
<p>So my full steps would be (requires root):</p>
<pre><code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --disable-shim-lock
sed -i 's/boot/efi/EFI/cachyos/' grubx64.efi</code></pre>
<p>An unorthodox grub hack, but it works.</p>
<p>If a grub update ever breaks this, or maybe just to futureproof this, then I’ll probably just use Arch’s PKGBUILD, makepkg, and patch tools to patch the <a href="https://github.com/rhboot/grub2/blob/205b7b44bb2a7911f1e8c1ce22d66c111a4b429e/grub-core/kern/efi/sb.c#L42">grub_efi_get_secureboot function of sb.c</a> so that grub always thinks it’s not in secure boot. I think I would only need to change one line, <code>return secureboot</code>, or maybe reset the variable to what I want at the end of the function, but I’m not too familier with C code at the moment. I can read it, given context, but I’ve not written it yet.</p>



 ]]></description>
  <category>linux</category>
  <category>cybersecurity</category>
  <guid>https://moonpiedumplings.github.io/playground/arch-secureboot/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The CSUN game room has pretty locked down computers…</title>
  <link>https://moonpiedumplings.github.io/playground/csun-computers/index.html</link>
  <description><![CDATA[ 



<p>My first class at Cal State Northridge (CSUN) happened today.</p>
<p>It was pretty exciting, but after class, I wandered around to stave off boredom. I ended up finding the <a href="https://www.csun.edu/src/games-room">CSUN game room</a>, which was a pretty sick setup. Although one side was a game room with a few pool tables and other table games, and beyond that, couches and game consoles, the other side was setup similar to the <a href="https://en.wikipedia.org/wiki/PC_bang">computer cafe’s</a> which are still popular in South Korea.</p>
<p>Obviously I needed to asses their security. Because of my <a href="../cruise-ship-computers/">experience with the cruise ship computers</a>, I somewhat knew what I needed to do. The windows UI on the machines in the CSUN game room, is locked down.</p>
<p>Rather than the normal window’s interface, it was a proprietary interface specially dedicated to games. I could not even open a browser.</p>
<p>In addition to that, none of the keyboard shortcuts worked. Windows + R (run dialog). Or Windows + E (explorer).</p>
<p>So similar to the cruise ships, my initial goal was to restart the windows UI. For some strange reason, the windows UI is located under the program explorer.exe, which is the same program as the filebrowser. On the cruise ship, finding and launching this program is how I restarted the windows UI.</p>
<p>However, I quickly discovered something interesting. When launching discord through the locked down UI, the edge browser would launch for half a second, and then disappear, the tab closing itself. I launched a new tab before it closed, and edge stayed open…</p>
<p>Once edge was open, the first thing I tried was chromium’s Control + O open file dialog.</p>
<p>However, I couldn’t open things, and more interestingly, the right click, and any other methods of accessing the context menu I tried, were blocked.</p>
<p><img src="https://moonpiedumplings.github.io/playground/csun-computers/https:/media.discordapp.net/attachments/1145897518270517291/1145898301032501358/AIL4fc_t_UdiZErKWvs9V5pkh38GP9rMPKZJBQzB5IpeA4UQVR6Z95iY2rHtGl8YSu7HEEZZt9b8QqIRVY7eEKAnf6VWHHIeu07hCVfE1754XbNmZxzvHMXtc6udDudz5cmfwN08MI45gWd7_mVi9a6SonX4nUYGjF9wE8edCBkT8R9z73vjZC9SZIRgCaHMe1WgKMe4Zybsu3YO0Nx5WTN4ucjQTVEfGSkWkt1utbVhTrI2yto6uBkFMKL42nqjJYSAIYR4hROEtefRTo_6M3q9Dihfh1KKIaRHfXnVWaYwwqpV3tITMNDccFO7GO_qAoSAvCEDeizkUS1N82sfN9qhODzPoVrKKO_DUAoU1I9VNaBK0g9dgGzggLFuwx7PGGpIVBoSSxVZpgXOcBsEiOFUYC5nwFD90WLFin8Bhcni-Qh9RrpUt_AthR4zOrgoL1eiDY-uU30VO0cyyBmroNOKbO9ca45N9SoiZWX09H3MKp89tZN4I5vh78JY..png" class="img-fluid"></p>
<p>So I tried to download another file browser. Blocked:</p>
<p><img src="https://moonpiedumplings.github.io/playground/csun-computers/https:/media.discordapp.net/attachments/1145897518270517291/1145898644642484284/AIL4fc_O5NomLeCXnydmTtLdmezKLzP75FuMdYnHSuD31jjZcnYb-DqOOD5apK7FdJhWY36cZm7H1nmIP8UalRPjKOoP8hHULeWlJnVL3Hw_XjpewJnT1RDpE7t5Ytu1RoPuj3tAQi5ULoYOg9DGeU52hUYpX7RSHj5GRzK9oLftc7DUYYJKYWjQ12M5ccFTjcH41DOBMgH_oDOoWkxj2nvdIkKooNfnvI-unpIKTEIGED-KCDtEr8EkGFmPuZy4Cod0OsgJdrSAMJTjOguYqznoP10dRBcTnZpYeeXGai6PfiRzzzkaZFCVDe0Rx9LX6PzBjpgAEaNjMsFbcMafVp_ShGwVEeosrsMgNbJBjA426q_6UWAflJdSohLQV28oypsnaHQngst4pwayaPR6oRMVAdYhqlo8Tx2qAEPUk4ZMqeog5yEVX1NTfwLTR_6Zy5qlBzaMF5JVNkUFCO7tKtHifBqFyBQc8s5QYjxgl4txGhDbyP3lJ6HvS79b..png" class="img-fluid"></p>
<p>But interesting, I could click the “open downloads folder” and get the proper windows file browser open. In this file browser, I could simply single click on applications to open them.</p>
<p>I located explorer.exe, the program which launched the windows UI on the cruise ship computers, and…</p>
<p><img src="https://moonpiedumplings.github.io/playground/csun-computers/https:/media.discordapp.net/attachments/1145897518270517291/1145904889935962304/AIL4fc9ofWb0xdlHoF1s2IjUWf95XdaFI6k3TBqNgbySg-w0coa1eqFnADRrR0d-9m9NPruhi1CLplD2rSyBfIoVFcuM_NEdzmJ9_TZ7SbnUqCUfDjiEA6ut5MER7x4Pa2PzdadRhSs-1gDRvUXmDae347OfPFavXATHIZMyvObc16wvoEX2cPXL0wz5sA6nptI3I8pbDIPxP0hifIKzU3LMUvu9rsRMnPHRJspyrEGiKrG-FMU9za4JYJ2yQvGSWt9mNzTtxh8gXDcNKqKjj2zADnJDB-nFij3NAhhsUF-HjoTAvRPoBigKhjypkjaH8Id7NgbmTV4UHMMCm8ANOIXmi6a30IZOVhZQnHvwZmy9yOUhlJKyQTnBKkiszGZVZ1C23u8x-9bfPcfrCNm929S8_PHtmIKpb7F0lVk8F9TpKy4RLFRYGSMCHQzxcP8xBgHCNVUkluryZIubG75a9_jVbS6PisinkMl80iargQOsNhHDgsmNqGe2oSWv..png" class="img-fluid"></p>
<p>For whatever reason, launching the explorer.exe program simply results in another instance of the filebrowser launching, rather than the windows UI launching. So I decided to try some other stuff.</p>
<p><img src="https://moonpiedumplings.github.io/playground/csun-computers/https:/media.discordapp.net/attachments/1145897518270517291/1145899637899808798/AIL4fc98jpQGgHr4PP0h4xyHlIpMUhFTqbFKr3-hiek0hMcgCGC763GgqUM7g3mI0EVquELg6fP7Gt9dlZc_XGQ5SdOWo1NDt9iio5jMu92lx3Ss1IKI47JBKWG9jhVLqumIyhBB4lOpYE0eq7fLpT9GZLsyP4whc8ZOnPgL40CnthFdhHqgHzlnknJ7iUB8aGIpJZu3CAHFQO4IqMKZw7n9BE4-wBmHdGKZ1gJWoQ5qqSt26vKfeFb6Ts7yljShZ66V_silB5fCV-c3gns7B-I8oV9Gv14nhQA146jHaq4JGsCNAq5TmcMd84GSdYjYFBN8gK0YHJZfvFFCF-2wUkapbiYxOzFn_W59bPqM6wz1tn3IT_E-ZBJwO_-t5mJzMPdw_oIc16DMs9LfpkEYIA1Ixh-uiYb15c4Q5PiuJwJbzqoo1hXFyu4la9bgTAXWQlB6GUhUtbs9M3835ZhN_BSHmU8X3k4zw5JBf44lDVuLN_ZjKS9-jDFw4pwH..png" class="img-fluid"></p>
<p><img src="https://moonpiedumplings.github.io/playground/csun-computers/https:/media.discordapp.net/attachments/1145897518270517291/1145900260837822525/AIL4fc-RJj9KtnYLIHmBdE8xVpPPd8oDBTO-oUXgnMcVpuukkMcJmWeEtQqg0rytLC_VC0wdO8Q0VhwXtg5QxKX9F53zEETn7U4VKefN0_yuOjzwT01tZ9FHJUes5gpnVPJtWa5iPDduQK82qMbaiduAIbrM0uy9XJd7czRszFGOKlJbVJyaIa83CIINV436BRfY7EQux5UGdRv8HhwzD-8bbWJE01fGh5dErEPf2IK4EswYq1SjadiZjK4-Wc6fmDyqkwRKO9FFwD-YAp0BEe7N9Cqa8E_cddFuA-57BYVVRQP3JReDk1aaMqRpyBp1whZcypxPd8HEX4LDTF1lKv8rsK24BWjAkYJHrmJA3A2TWRO4qTTzfi84ZLNxVij93M72o5LfAnT2yw_ZMLoMsJnzhBY0bxqpmysRl8jH4e0DF8HazP3CzyMN92YhndibUY2O-LmuW1vEBzRRZq8v1OOntxrb-Myjm-35XUEc2lXgV1onUHd_MgI7nZvz..png" class="img-fluid"></p>
<p>I tried a few things. Powershell, command prompt, registry editor, no dice.</p>
<p>I went down the list of apps in <code>C:\Windows</code>, checking things out, when I found something interesting unblocked:</p>
<p><img src="https://moonpiedumplings.github.io/playground/csun-computers/https:/media.discordapp.net/attachments/1145897518270517291/1145900496746451024/AIL4fc9MTmcuuc7a0BIO1_mnefpdZEXsGl23HkEUX2nS3eWkWaQ7ZBL09OlI8KeA6x0KFvPpMB31tN7OrkhSPbp84gUX-1RHUIY2soxA0dIhuM3DwZFVkeMhOc77ZoLFr6zYPQgbFeTPykSYoGFhLuuZtIww7Dyx_rEfzEAVRcpbwx0DkRnECbd-qV5pHzjpRIUQ2Ov_twyLcOzzKu7uWeye2Ie3GeKk2-Rn9X2-rddfvaAKSBNUFK5513XmUx7adbFpdw8pulwlsB-C8mvJXk0P6lC6w0ZyOu8y_d7eCxk3TaX18f2wnku98V71rvnzNCccdvy79ctVvvCnpCXCaHJKuOEUw2qtxskRjcW-LNM92G00SWA6mLdebjTNmWz8ys4Kh1ULrIFVSuFd8Qhy97VyhfxpY_1S4JdI-7nQutGG6pAtp1cSpkD0y86Jc9ogCnpmCmAFeyoev20tevGFWTfF6Mi4ckcSmLVototyjN08l5LJ95HXHaJC-19i..png" class="img-fluid"></p>
<p>The strangest thing about being able to launch this application, window’s “Computer Management” app, located at compmgmt.msc is that it requies administrative privileges to simply launch.</p>
<p>When first bootup, the computer autologins to a default user called “User”. Apparently, the default user was an administrator.</p>
<p>From here, I can get to “task scheduler”. Because I am already an administrator for some reason, I am able to schedule tasks, which can be any abitrary thing.</p>
<p>However, this isn’t really a big deal when it comes to access of this machine itself. All these computers at this pc cafe use image based deployments, and I am presuming these images are immutable so any system changes I make would be reset the moment I log out.</p>
<p>However, with administrative access within the network, I could do things like a Denial-of-Service attack, by eating up bandwidth, or I could seek lateral movement through the network, if the machines aren’t isolated properly.</p>
<p>There were multiple ways this kind of access could have been prevented. Why do the users logged in need administrative access? All they are doing is using discord and playing games, they don’t need administrative access.</p>
<p>Another thing that could have been done is simply preventing me from launching compmgmt.msc, the same way powershell or cmd are prevented.</p>
<p>And finally, they could have used a browser other than edge. The browser on that system is not intended for normal browsing, but rather it’s intended for logging into your online accounts, like Discord or the video game providers. Since that’s the case, why use a fully featured browser that lets you open a file browser? There exist browsers that are far more locked down, and cannot do things like browse files, only open a single webpage — perfect for this usecase.</p>



 ]]></description>
  <category>windows</category>
  <category>cybersecurity</category>
  <guid>https://moonpiedumplings.github.io/playground/csun-computers/index.html</guid>
  <pubDate>Mon, 28 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting situated in my dorms</title>
  <link>https://moonpiedumplings.github.io/blog/dorm/index.html</link>
  <description><![CDATA[ 



<p>For my college, I am going to California State University, Northridge (CSUN). In addition to bringing along normal supplies, I also brought my homelab along.</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/https:/media.discordapp.net/attachments/1084930216314556476/1145222722616578148/IMG_20230826_220529.jpg" class="img-fluid"></p>
<p>On the right, is a desktop comuputer, which would be the server I am using for my homelab things.</p>
<p>On top of that, is my router, which I have configured to wireguard vpn into a VPS I am renting. In addition to that, the router will connect via ethernet to campus internet, and then give me internet, which I have found to be suprisingly faster than accessing campus wifi via internet.</p>
<p>To the left, is my laptop, which I have “docked” there. It connects up to my monitor and keyboard:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/https:/media.discordapp.net/attachments/1084930216314556476/1145222722922745896/IMG_20230826_220522.jpg" class="img-fluid"></p>
<p>However, the ethernet isn’t currently activated. Apparently, you have to submit a maintenence request for them to turn it on. And since the maintenence workers don’t work on weekends, I have to wait until monday.</p>
<p>One thing that would really suck is if it wasn’t just the wifi that used eduroam to authenticate, but also the ethernet.</p>
<p>Eduroam wifi requires special tools to authenticate, and it’s possible that my router may not have these tools installed.</p>
<p>I visited <a href="https://test-ipv6.com" class="uri">https://test-ipv6.com</a> in order to test ipv6 networking:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/https:/media.discordapp.net/attachments/749116247245062164/1145420511581573210/image.png" class="img-fluid"></p>
<p>I did some futher testing. Both my phone, my laptop, and my other laptop had different public ip addresses. Except they weren’t truly public:</p>
<pre><code>[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ nmap -sV 130.166.192.250
Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-27 11:10 PDT
Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn
Nmap done: 1 IP address (0 hosts up) scanned in 3.07 seconds
[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ nmap -Pn 130.166.192.250
Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-27 11:10 PDT
sits here forever</code></pre>
<p>It seems that, despite the machines having public ip addresses, there is a a firewall in place to prevent any access from the external world. So it isn’t truly a “public” ip address.</p>
<p>The output of <code>ip a</code> agrees with this.</p>
<pre><code>[moonpie@cachyos-x8664 ~]$ ip a
... extraneous stuff omitted for brevity
...
3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 4c:d5:77:2d:b2:6d brd ff:ff:ff:ff:ff:ff
    inet 10.40.66.133/20 brd 10.40.79.255 scope global dynamic noprefixroute wlan0
       valid_lft 26229sec preferred_lft 26229sec
    inet6 fe80::e25c:14be:fd65:8944/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever</code></pre>
<p>So despite having private ip addresses, each and every ip address maps to a public ip address.</p>
<p>Apparently the whole of <a href="https://www.whois.com/whois/130.166.0.0">130.166.0.0/16</a> is owned by CSUN.</p>
<p>This is honestly a tragedy. Entire countries don’t have ipv4, only v6 because the US hoards v4 addresses, like in this case, what could be one or a few NAT’s is instead an ip address for every device.</p>
<p>As for speed:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/https:/media.discordapp.net/attachments/749116247245062164/1145419395548598433/image.png" class="img-fluid"></p>
<p>Pretty good, but it’s 11 AM when I did this. That’s more than double the speeds I was seeing last night, something around 110 down and 20 up. I may rerun the test again at a more congested time just to make sure.</p>
<p>Overall, the setup is niceish, but not having ethernet working immediately is frustrating.</p>
<p>Alright, a week later I got ethernet working. My router is set up and when I test the speeds on my router internet:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/images/routerspeedtest.jpg" class="img-fluid"></p>
<p>Vs the campus wifi:</p>
<p><img src="https://moonpiedumplings.github.io/blog/dorm/images/eduroamspeedtest.jpg" class="img-fluid"></p>
<p>I’m seeing around double the speeds, as opposed to normal campus wifi.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/dorm/index.html</guid>
  <pubDate>Sun, 27 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Firefox Setup</title>
  <link>https://moonpiedumplings.github.io/blog/firefox/index.html</link>
  <description><![CDATA[ 



<section id="multiple-profiles" class="level1">
<h1>Multiple Profiles</h1>
<p>So Mozilla, the company behind the Firefox web browser, offers a feature called Firefox sync. It enables you to sync your firefox browser, with your mozilla account, to any device.</p>
<p>However, it has a caveat: it can only sync one firefox profile. Firefox profiles, are basically completely different instances on firefox, capable of having every single thing be seperate, down to things like advanced settings.</p>
<p>Generally, what is recommended to do to seperate accounts, is to use <a href="https://support.mozilla.org/en-US/kb/containers">firefox multi account containers</a>. These seperates cookies and logins between sites. This lets people protect their privacy, because sites like Facebook can no longer snoop to see what other sites have also given you a facebook cookie.</p>
<p>However, I found multi account containers very frustrating to use. If you are trying to manage multiple accounts on the same site, on a site that doesn’t let you do that natively (google/gmail do, but microsoft doesn’t), it constantly asks you if you are sure that you want to open this site in this container. In addition to that, it does that for other sites as well, like google search, which makes it very frustrating.</p>
<p>Firefox profiles, don’t have that annoyance, but I also enjoy the greater degree of seperation they give. Because each firefox profile can have completely differenct settings, this means that I can do things like configure one firefox profile for performance, but at the cost of stability. However, my schoolwork profile is configured never to crash, because it needs to be reliable. Multi account containers can’t do that.</p>
<section id="default-applications" class="level2">
<h2 class="anchored" data-anchor-id="default-applications">Default Applications</h2>
<p>Because I use multiple profiles, I would like the option to chose what link each firefox profile opens in.</p>
<p>So far, I’ve tried this command <code>xdg-settings set default-web-browser none.desktop</code>, with the goal of a “choose application” screen appearing that then lets me run <code>firefox -p profilename</code> to open a websit ein a specific profile, but it didn’t work.</p>
<p>I would like to try some further stuff, but if it doesn’t work out, I can just default to the “play” profile which is my profile for personal use and the like</p>
</section>
</section>
<section id="syncthing" class="level1">
<h1>Syncthing</h1>
<p>Because I can’t use the native firefox profiles to sync, I had to find other solutions. Originally, I used the graphical frontend for <a href="https://en.wikipedia.org/wiki/Rsync">rsync</a>, <a href="https://en.wikipedia.org/wiki/Grsync">Grsync</a>, syncing into a usb drive, into the computer, and vice versa, to sync between computers. However, this was extremely slow, because apparently usb flash drive’s suck at transferring many small files.</p>
<p>I later switched to another solution, syncthing. Syncthing can keep folders of two computers synchronized, from anywhere in the world.</p>
<p>But it wasn’t perfect at first. In order to get it to work properly, I had to add the proper <a href="https://docs.syncthing.net/users/firewall.html">firewall rules</a>. Onlydid after this did syncing work.</p>
<p>Another issue I had with it was that it synced the cookies file of firefox. Cookies, are where most sites store the session tokens, a common way of knowing that you are logged in on this device. However, session tokens also present a security risk. All an attacker needs to get access to the login of a site is a session token (stored in the cookies.sqlite file for firefox), which is often stored unencrypted, in areas the currently logged in user can read and write to. (see <a href="https://en.wikipedia.org/wiki/Session_hijacking">session hijacking</a>)</p>
<p>Because my session tokens were being transfered to another machine, google and some other services thought I was getting hacked, and forced me to do lot’s of confirmations, and “yes it’s me.” Annoying, but a reasonable security measure.</p>
<p>So I had to configure syncthing to not sync certain files.</p>
<p><code>*cookies.sqlite*</code>.</p>
<p>This partical <a href="https://en.wikipedia.org/wiki/Glob_(programming)">glob match</a> will exclude firefox’s cookies.sqlite file, and the cookies.sqlite-wal file, which is a journaling file. In computer filesystems, journals record changes that are going to be made to other files or the filesystem before they are made, in order to make data recovery from an abrupt stop, like a crash possible. If the journal is complete, then the computer can simply finish the changes by reading the journal. If the journal is incomplete, then the computer can simply not make the changes, as having an intact cookies.sqlite file is more important than a cookie or two.</p>
<p>Finally, you cannot have both firefox instances running at once. This will cause syncthing to get confused, as it is attempting to make the most recent version of the file propogate, but both computers have the most recent version.</p>
<p>This let to the creation of lots of .sync-conflict files, and firefox giving me a warning: <a href="https://support.mozilla.org/en-US/kb/fix-bookmarks-and-history-will-not-be-functional">The bookmarks and history system will not be functional</a>. I tried deleting the sync conflict files, but nothing changed.</p>
<p>I ended up having to manually repair that firefox profile, by creating a new one and <a href="https://support.mozilla.org/en-US/kb/recovering-important-data-from-an-old-profile#w_copying-files-between-profile-folders">copying the important data over</a></p>
<p>One more thing, made later: You can’t quit firefox with cntrl+q, as this will sometimes leave an unsyncable file. You have to close firefox from the desktop UI, I usually just use KDE Plasma to close everything at once.</p>


</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/firefox/index.html</guid>
  <pubDate>Wed, 09 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tmux</title>
  <link>https://moonpiedumplings.github.io/guides/tmux/index.html</link>
  <description><![CDATA[ 



<section id="what-is-tmux" class="level1">
<h1>What is tmux?</h1>
<p>Tmux is what’s called a terminal multiplexer. Essentially, it lets you split one terminal window, into multiple similar to how a your desktop interface lets you use multiple windows at once. It has more features than that, but the multiplexing is what this article is going to focus on.</p>
</section>
<section id="how-to-use-tmux" class="level1">
<h1>How to use tmux</h1>
<p>You can launch tmux with the <code>tmux</code> command.</p>
<p>Tmux works by using a prefix key, which you enter first, before entering another key to enter a command. By default, this prefix key is Cntrl + B.</p>
<section id="window-control" class="level2">
<h2 class="anchored" data-anchor-id="window-control">Window control</h2>
<p>Tmux’s most basic and essential feature is creating more windows. First, input the prefix key (default is control + b), and then another key to tell tmux to do something:</p>
<table class="table">
<thead>
<tr class="header">
<th>key</th>
<th>action</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>c</td>
<td>create new window</td>
</tr>
<tr class="even">
<td>p</td>
<td>previous window</td>
</tr>
<tr class="odd">
<td>n</td>
<td>next window</td>
</tr>
<tr class="even">
<td>0, 1, 2, …</td>
<td>go to specific numbered window</td>
</tr>
<tr class="odd">
<td>&amp;</td>
<td>kill window</td>
</tr>
</tbody>
</table>
</section>
<section id="copyscroll-mode" class="level2">
<h2 class="anchored" data-anchor-id="copyscroll-mode">Copy/Scroll mode</h2>
<p>Because you can’t scroll normally in tmux, you have to enter a special scroll mode with prefix + [. In this scroll mode, you can use q to quit, Control S to search down, and Control R to search upwards. After searching, n goes to the next item, and Shift+n goes to the previous one. q exits search.</p>
</section>
<section id="attatchdetatch" class="level2">
<h2 class="anchored" data-anchor-id="attatchdetatch">Attatch/Detatch</h2>
<p><code>D</code> detaches.</p>
<p>You can list active sessions with <code>tmux ls</code></p>
<p><code>tmux attach -t [sessionnumber]</code> to reattach. Or <code>tmux a</code> for a shorter verb.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/guides/tmux/index.html</guid>
  <pubDate>Mon, 07 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Switching to opensuse tumbleweed, research into nixos</title>
  <link>https://moonpiedumplings.github.io/blog/switch-tumbleweed/index.html</link>
  <description><![CDATA[ 



<p>I recently switched from opensuse leap to opensuse tumbleweed. The upgrade process was almost completely seamless. I simply followed the <a href="https://en.opensuse.org/openSUSE:Tumbleweed_upgrade">official documentation</a> from opensuse.</p>
<p>However, after I upgraded to tumbleweed, secure boot wasn’t working. I decided to do a fresh reinstall of tumbleweed… and secure boot still didnt’ work.</p>
<p>However, other than that, I a very happy with opensuse tumbleweed. The repositories are large and kept up do date, and some packages which weren’t available or were more dated on opensuse leap such as gocryptfs, syncthing, or firefox, where available in the repositories. I did not have to use nix to install them.</p>
<p>In addition to that, the <a href="https://en.opensuse.org/SDB:OBS_Package_Installer">opi</a> command line helper, lets you easily install third party packages from the open build service, or repositories like microsoft’s, so that you can get packages like microsoft edge or vscode, without having to use nix.</p>
<p>However, secure boot not working is detrimental for me. I did a little bit of asking around, and another user complained about a similar struggle, claiming that they have never gotten opensuse tumbleweed secure boot working, and my struggle was futile.</p>
<p>Hmm, in my research, I found an open issue: https://bugzilla.opensuse.org/show_bug.cgi?id=1209985. It appears to be a bug in opensuse tumbleweed. That sucks.</p>
<p>It should be automatic, except it isn’t working. I am considering switching to nixos, so that I can have secure boot working, although I don’t really like the most popular implementatio of secure boot on nixos, <a href="https://github.com/nix-community/lanzaboote">lanzaboote</a>, because it stores kernels in the esp system partition, which may run out of space because it is usually very small, and nixos often stores many older kernels.</p>
<p>Relevant links:</p>
<p>https://nixos.wiki/wiki/Secure_Boot</p>
<p>https://nixos.wiki/wiki/Security#Filesystem_encryption</p>
<p><a href="https://old.reddit.com/r/NixOS/comments/xrgszw/nixos_full_disk_encryption_with_tpm_and_secure/">reddit post where a commmenter posted instructions</a></p>
<p>https://github.com/DeterminateSystems/bootspec-secureboot</p>
<p>This looks very appealing. Rather than using it with systemd-boot, I might be able to set up grub.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/switch-tumbleweed/index.html</guid>
  <pubDate>Thu, 03 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building my own Server Part 2 — Software</title>
  <link>https://moonpiedumplings.github.io/projects/build-server-2/index.html</link>
  <description><![CDATA[ 



<p>STATUS: PAUSED</p>
<p>I have <a href="../ai-pipeline/">other stuff</a> to do that needs my server working, and since I already have remote libvirt setup, I will just stick to that for now.</p>
<p>But I don’t think I am giving up on openstack, since what I want seems to be possible, just very difficult.</p>
<section id="software" class="level1">
<h1>Software</h1>
<section id="software-suite" class="level2">
<h2 class="anchored" data-anchor-id="software-suite">Software Suite</h2>
<p>I want an easy install, but I also want lots of features. Here are some things I have looked at:</p>
<ul>
<li>Proxmox VE</li>
<li>Xen Orchestra</li>
<li>Openstack</li>
<li><a href="https://github.com/canonical/lxd-ui">Canonicals LXD UI</a></li>
<li>Ovirt</li>
<li>Harvester</li>
<li>OpenVZ</li>
</ul>
</section>
<section id="openstack" class="level2">
<h2 class="anchored" data-anchor-id="openstack">Openstack</h2>
<p>Currently, openstack appeals to me a lot. Although I originally wanted to do a bare metal install, I now realize that that is too time consuming and not realistic, so I am most likely going to use one of the automated methods of installation.</p>
<p><a href="https://docs.openstack.org/kolla-ansible/latest/">Kolla ansible</a></p>
<p>They have an easy <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">deployment guide</a> for an all in one node, perfect for my single server.</p>
<p>I will definitely not use every service, but I do want to use openstack because of the sheer number of services it offers. Openstack offers every single feature of other virtualization platforms, at the cost of complexity. Here are the features that made me decide I needed that complexity.</p>
<section id="skylinehorizon" class="level3">
<h3 class="anchored" data-anchor-id="skylinehorizon">Skyline/Horizon</h3>
<p>Openstack has a previous generation web ui, horizon, and a newer generation web ui, skyline. These web ui’s offer all the features of other web based virtualization platforms like proxmox, but they also let you configure the other things of openstack.</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/https:/external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fwww.itzgeek.com%2Fwp-content%2Fuploads%2F2015%2F07%2FOpenStack-Configure-Horizon-Instance-Console.jpg&amp;f=1&amp;nofb=1&amp;ipt=c31c95fcc86ecd2a334a098fddcf51cbdad6b8c3b3d1bd1257b28dbc4b7cb17e&amp;ipo=images" class="img-fluid"></p>
<p>And they have some special features, like giving you a visual layout of network topology.</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/https:/external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fz6ftW7fUdp4%2Fmaxresdefault.jpg&amp;f=1&amp;nofb=1&amp;ipt=4e02ee4eb9751d8f6d2ae8693ca223d0626deef5779ec2fe01e614be210a4c5e&amp;ipo=images" class="img-fluid"></p>
</section>
<section id="multi-tenancy." class="level3">
<h3 class="anchored" data-anchor-id="multi-tenancy.">Multi tenancy.</h3>
<p>The most important feature of openstack, in my opinion, is it’s multi tenant architechture. Unliek proxmox, which is designed for a single organization, openstack is designed in such a way that you can create extra users, which get their own allocation of resources.</p>
<p>So when I go to college, if anyone wants a VPS to play around in, I can just allocate them a few resources, and then they get their own web ui for playing with servers and networking.</p>
<p>Many public cloud services are actually using openstack in the background for it’s public tenant architecture. Openstack’s dashboards can be rebranded to be your own company:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/https:/www.scalecloud.co.uk/wp-content/uploads/2017/02/vnc-console.png" class="img-fluid"></p>
</section>
<section id="bare-metal-nodes" class="level3">
<h3 class="anchored" data-anchor-id="bare-metal-nodes">Bare metal nodes</h3>
<p>Openstack saves a lot of trouble by immensely abstracting almost all the manual work that goes into putting together a modern cloud.</p>
<p>It takes it a step further, with it’s ability to treat physical, bare metal machines, as virtual machines, even automating the provisioning the same way you can do so for a virtual machine.</p>
<p><a href="https://docs.openstack.org/newton/admin-guide/baremetal.html">The docs</a> make it sound complex, but it really isn’t all that. By leveraging the <a href="">nova</a> component of openstack, which abstracts the backend drivers of virtual machines (qemu-kvm, xen, or even <a href="https://docs.openstack.org/ocata/config-reference/compute/hypervisor-hyper-v.html">hyper-v</a>) can be used as backend drivers for nova.</p>
<p>However, when combined with <a href="https://docs.openstack.org/ironic/latest/">ironic</a> openstack’s service to configure bare metal nodes, nova can also use bare metal as a driver for compute nodes. This integrates further with services like magnum…</p>
</section>
<section id="magnum" class="level3">
<h3 class="anchored" data-anchor-id="magnum">Magnum</h3>
<p>Magnum is openstack’s kubernetes-as-as-service. It provisions nodes using nova, with kubernetes clusters.</p>
<p>Now here is where I get greedy. Do I need kubernetes? No.&nbsp;Will kubernetes even be useful on a single server setup? No.&nbsp;Do I want kubernetes? Yes.</p>
<p>Here is a video demonstration, where someone uses the web ui to create a cluster using magnum.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/QvS4nDYE2r0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>In addition to that, because openstack magnum uses openstack heat, which provisions nodes from templates, it can be used to do things like auto install nvidia drivers and container runtime.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/P4z2Hdh0l4g?start=262" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>This video is a bit outdated, so heat and magnum are much more mature since then, and have only gained more features.</p>
</section>
<section id="api-and-automation" class="level3">
<h3 class="anchored" data-anchor-id="api-and-automation">Api and Automation</h3>
<p>Openstack is designed from the ground up to be a cloud. It has first class support for their api, and everything that can be done from the UI can also be done from either the command line, or the <a href="https://docs.openstack.org/api-quick-start/">api</a>.</p>
<p>This advanced api makes it easier for other software to interact with openstack. For example, the rancher kubernetes cluster manager supports <a href="https://rke.docs.rancher.com/config-options/cloud-providers/openstack">openstack</a> as a cloud provider. It is capable of requesting nodes, provisioning them, and then setting up a kubernetes cluster entirely from the rancher web gui.</p>
</section>
<section id="zun" class="level3">
<h3 class="anchored" data-anchor-id="zun">Zun</h3>
<p>Openstack zun is the container service for openstack. It doesn’t run them in virtual machines, but instead directly on metal. It’s likely that when I want to run containerized services for actual usage, this is what I will be using instead of kubernetes since I will be using a single server, and thus won’t be able to get the benefits of kubernetes. The benefit I see form using containers is that because I have an nvidia desktop gpu, I won’t be able to use vgpu, a feature that lets you divide the gpu between virtual machines. However, containers have no such limitation.</p>
</section>
</section>
<section id="installing-openstack" class="level2">
<h2 class="anchored" data-anchor-id="installing-openstack">Installing Openstack</h2>
<p>I’ve decided to use the kolla-ansible project to install openstack. It works by using ansible to deploy docker containers, which the openstack services run in.</p>
<p>They have a quickstart guide:</p>
<p><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a></p>
<p>And the ansible playbook can be found here:</p>
<p><a href="https://opendev.org/openstack/kolla-ansible" class="uri">https://opendev.org/openstack/kolla-ansible</a></p>
<p>And they provide a <a href="https://opendev.org/openstack/kolla-ansible/src/branch/master/ansible/inventory/multinode">sample ansible inventory</a> for the all in one node.</p>
<p>I do not need all of those features. I pretty much just want virtualized compute, networking, containers, and kubernetes. I don’t need things like an S3 compatible block storage, a relational database, or an app store. Okay, but maybe I want them.</p>
<p>I will do more research into what I want and what I don’t want, and edit the ansible playbook accordingly.</p>
<p>However, this method of deployment seems to require two NIC’s (network interface cards). I think I have both, but just in case, I noted another method of deployment, <a href="https://docs.openstack.org/openstack-ansible/latest/">openstack ansible</a> (yeah the naming isn’t the greatest), which deploys openstack without using containers, it actaully installs and configures the services on the host operating system.</p>
<p>The openstack ansible <a href="https://docs.openstack.org/openstack-ansible/latest/user/aio/quickstart.html">All in one</a> deployment, doesn’t seem to have the same requirement of two NIC’s, which I do have.</p>
<section id="operating-system" class="level3">
<h3 class="anchored" data-anchor-id="operating-system">Operating system</h3>
<p>But first, I do need to select on an operating system. Openstack is flexible and versatile, and it can be installed on multiple operating systems.</p>
<p>I was originally going to choose a RHEL compatible distro, but then RHEL made changes put the status of those in limbo.</p>
<p>I am currently deciding between:</p>
<ul>
<li>Ubuntu</li>
<li>Debian</li>
<li>RHEL (via a developer subscription)</li>
<li>A RHEL rebuild
<ul>
<li>Rocky Linux</li>
<li>Alma Linux</li>
<li>One of the academic distros, like scientific linux</li>
</ul></li>
<li>Centos Stream</li>
</ul>
<p>The important thing is that it’s a stable release distro with automatic updates. I don’t want to have to do too much manual maintainence. Ideally, I also want this distro to have newerish packages, in case I want to do some tinkering with the underlying OS, and I also want the distro to have a stable release that goes on for longer than my college years. From what I’ve heard, upgrading from one release of an OS to another can be a frustrating process, and I don’t want to have to do this while I’m in the middle of school.</p>
<p>The RHEL rebuilds do appeal to me, but they also come with extra complications, like selinux that I don’t really want to have to deal with.</p>
<p>But after much deliberation, I’ve decided on Rocky Linux. Rocky Linux 9 is officially supported by <a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix.html">kolla ansible</a>. In addition to that, Rock Linux 9 will be <a href="https://endoflife.date/rocky-linux">supported for a good deal of time</a>, with the release being officially supported for 3 years and a bit, and that release will continue to receive security updates for 5 more years after that. More than enough to last me through college.</p>
<p>The install was very simple. I thought I would experience issues because of the Nvidia GPU, as I had been having issues with graphical monitor output with other distros, but I didn’t. A GUI appeared for me, and the install process was exceedingly simple, even simpler than debian or other distros I’ve tried. Of course, the disadvantage was that I couldn’t configure everything, like there was no option to set up users other than root, but it was very quick.</p>
<p>Now, I have RHEL installed.</p>
<p>To make management easier, I will install my favorite web administration system, <a href="../../guides/cockpit-setup/">cockpit</a>. This will also enable me to do remote management operations with a gui, things like partitioning the disks.</p>
<p>Now that I have rocky linux installed, I can install openstack using kolla-ansible.</p>
</section>
<section id="kolla-ansible" class="level3">
<h3 class="anchored" data-anchor-id="kolla-ansible">Kolla-ansible</h3>
<p>I will be following the <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">quick start guide</a></p>
<p>I will briefly go over what I am doing here, edited for my usecase. The first few steps are copy and pasted from the guide linked above.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">sudo dnf install git python3-devel libffi-devel gcc openssl-devel python3-libselinux</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">pip install 'ansible&gt;=6,&lt;8'</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">pip install git+https://opendev.org/openstack/kolla-ansible@master</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">sudo mkdir -p /etc/kolla</span>
<span id="cb4-2">sudo chown $USER:$USER /etc/kolla</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">cp -r /home/moonpie/.local/share/kolla-ansible/etc_examples/kolla/* /etc/kolla</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">cp /home/moonpie/.local/share/kolla-ansible/ansible/inventory/all-in-one /home/moonpie/</span></code></pre></div>
<p>Now, this is the initial setup. I need to customize these things to my liking.</p>
<p>Usernames and passwords a are easy, but I need to make sure the networking is right, especially since my setup will be so unorthodox. Because I am setting this up on my home network, I won’t have public internet access, as my router using <a href="https://en.wikipedia.org/wiki/Network_address_translation">NAT</a></p>
</section>
<section id="router-networking" class="level3">
<h3 class="anchored" data-anchor-id="router-networking">Router Networking</h3>
<p>It requires that I set my two network interfaces to two things: default network interface for everything else, and the neutron external interface.</p>
<p>The neutron external interface can be any physical interface, but internally, it is referred to as br-ex. This interface is responsible for letting the virtual machines interact with the internet.</p>
<p>Anyway, I had a spare router lying around, and I flashed it with <a href="https://www.freshtomato.org/">freshtomato</a> for some more advanced features. I hooked it up to my existing router, so it would be behind NAT, but now I have extra ethernet ports, so I can have a private subnet with my laptop, and the openstack stuff.</p>
<p>I was curious if tomato offered an easy way to expose services to the internet, from behind NAT, something like integration with Cloudfare’s tunnels, but they didn’t.</p>
<p>However, another idea has occured upon me: Why not just host the public parts of openstack… on the public. I could rent a VPS, and host openstack neutron, and maybe the openstack dashboards on the public.</p>
<p>For example, my current vps provdider <a href="https://webdock.io/en/docs/general-information/billing-and-pricing/additional-products#additional-/-reserved-ip-addresses">webdock</a>, gives out a range (/124) of ipv6 addresses, 16 total. Based on the pricing on that page, 1.75 Euros for an additional ipv4 address, I think I can safely assume that ipv4 addresses are more expensive, out of what I am wiling to spend, because of their scarcity.</p>
<p>However, if I can install openstack neutron on a cheap vps, thenH I will be able to give public ipv6 access to the virtual machines, which sounds like a very neat setup.</p>
<p>Since my home server won’t have public internet access I am guessing I have to start by creating a virtual network that links the two machines together, that way they can see eachother and cluster.</p>
<p>Openstack has some interesting diagrams: <a href="https://docs.openstack.org/install-guide/environment-networking.html" class="uri">https://docs.openstack.org/install-guide/environment-networking.html</a>. But I can’t find anything conclusive.</p>
<p>Since I have a router running tomato, I am thinking that I can vpn the entire router into the other machine, so that the vps I am accessing can access everything in the tomato subnet, meaning I won’t have to configure the server itself. The downside is that everything will be vpn’ed, but with a 4 TB upload limit, I’m not too concerned about that right now.</p>
<p>But sadly, webdock seems to be sold out of kvm vps’s, which have better compatibility with docker, so I will probably go looking for another platform.</p>
<p>Anyway, tomato seems to have a wireguard client installed, so I will use that, since wireguard is the fastest vpn client/server available. I found a <a href="https://golb.hplar.ch/2019/01/expose-server-vpn.html">nice guide</a> on setting up pure wireguard. However, it doesn’t discuss connecting the subnet of a router to the vps. I did find another <a href="https://gist.github.com/insdavm/b1034635ab23b8839bf957aa406b5e39">guide</a> that did. Now this guide is older, and some people criticized it for various reasons. However, it does tell me the name of what I am looking for: Site to site.</p>
<p>I found a much simpler guide on <a href="https://ubuntu.com/server/docs/wireguard-vpn-site2site">ubuntu’s website</a>. Rather than A-B-C, I only need the A-B which this offers. In addition to that, there are no iptables rules on this guide.</p>
<p>The minimum specs required for openstack neutron are: ???. The docs suck.</p>
<p>VPS provider overview:</p>
<table class="table">
<thead>
<tr class="header">
<th>Name</th>
<th>CPU</th>
<th>Ram (GB)</th>
<th>Price (/month)</th>
<th>Ipv6</th>
<th>OS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Contabo</td>
<td>4</td>
<td>8</td>
<td>$10.29</td>
<td><a href="https://contabo.com/en/customer-support/faq/#how-can-i-use-ipv6-on-my-server-at-contabo">18 quintillion</a></td>
<td>Rocky</td>
</tr>
</tbody>
</table>
<p>Okay, contabo wins. I was gonna do an actual comparison between multiple vps providers, but contabo has great specs, and it is trusted by people when I have asked around.</p>
<p>I don’t want to spend money, but this is a nice deal.</p>
<p>Also, contabo offers 32 TB out, and unlimiited in. This is definitely a very good choice.</p>
<p>After visiting <a href="https://test-ipv6.com/" class="uri">https://test-ipv6.com/</a> and realizing that my home residential wifi does not have ipv6 enabled by default (although there is an option in the router settings), I realize that the college dorms may not have ipv6 support. In that case, vpning into the remote server, which does have ipv6 support, would give me ipv6 support.</p>
<p>Now that I have a vps, I am trying to get wireguard working, by testing with my laptop I started out with the guide from ubuntu, but that doesn’t work. In addition to not having access to subnets I can only access on my laptop from my server, not even the vpn is working correctly:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">moonpie@lizard:~&gt; curl --interface wgA ifconfig.me</span>
<span id="cb7-2">curl: (7) Failed to connect to ifconfig.me port 80 after 1 ms: Couldn't connect to server</span></code></pre></div>
<p>I found another <a href="https://www.laroberto.com/remote-lan-access-with-wireguard/">guide</a> but yet again, it’s another A-B-C guide.</p>
<p>I found a promising <a href="https://unix.stackexchange.com/questions/602267/wireguard-connection-between-two-lans-with-wireguard-boxes-behind-routers">stackexchange answer</a> with an interesting commmand I have tried:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">ip route add 192.168.122.0/24 via 10.10.9.0 dev wgB</span></code></pre></div>
<p>Where the 192.168.122.0/24 is the subnet I am trying to expose.</p>
<p>Okay, at this piont, I understand what I want to do pretty well. I think I will use the A-B-C guides as a template, except I only need A-B, and the router needs to eb the device that is configured not to have a permanent, static ip address, like the clients are.</p>
<p>I got lucky when I was browsing lemmy, and I found <a href="https://programming.dev/comment/1943135">forum comment</a> related to my exact issue, which then links to a <a href="https://unix.stackexchange.com/questions/638889/make-local-resources-available-when-connected-to-wireguard-vpn">stackexchange question</a>, in which the top answer uses information they sourced from this <a href="https://www.procustodibus.com/blog/2020/11/wireguard-point-to-site-config/">guide</a></p>
<p>I attempted to follow the latter guide, using a simple setup. My laptop, would be my “router”, and I was attempting to expose the vlan subnet created by the libvirt virtual machine manager to my remote server, a vps hosted on contabo.</p>
<p>Ironically, I got the connection to work, but in the wrong direction. My vps could ping my remote server, but my remote server could not ping the virtual machines on my laptop. Interestingl, it could ping my laptop using the ip of the virbr0 virtual network adapter that libvirt creates for a vlan.</p>
<p>I’m guessing that this didn’t work because I’m doing this somewhat backwards, with the device that the</p>
<p>I am guessing because I am doing this somewhat backwards, where the device exposing the lan is behind nat, whereas it is the other way around in the guides that I have seen.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">root@vmi1403809 ~]# ping 192.168.122.1</span>
<span id="cb9-2">PING 192.168.122.1 (192.168.122.1) 56(84) bytes of data.</span>
<span id="cb9-3">64 bytes from 192.168.122.1: icmp_seq=1 ttl=64 time=46.5 ms</span>
<span id="cb9-4">[root@vmi1403809 ~]# ping 192.168.122.201</span>
<span id="cb9-5">PING 192.168.122.201 (192.168.122.201) 56(84) bytes of data.</span>
<span id="cb9-6">From 10.10.9.0 icmp_seq=1 Destination Port Unreachable</span></code></pre></div>
<p>The first is the ip address of my laptop, and the second is the ip address of my debian virtual machine, which is running on my laptop.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">moonpie@lizard:~/vscode/moonpiedumplings.github.io&gt; curl --insecure  http://192.168.122.201:9090</span>
<span id="cb10-2">&lt;html&gt;&lt;head&gt;&lt;title&gt;Moved&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Please use TLS&lt;/body&gt;&lt;/html&gt;</span>
<span id="cb10-3">moonpie@lizard:~/vscode/moonpiedumplings.github.io&gt; curl --insecure  http://192.168.122.201:9090 --interface wgA</span>
<span id="cb10-4">curl: (7) Failed to connect to 192.168.122.201 port 9090 after 0 ms: Couldn't connect to server</span></code></pre></div>
<p>Curl has a feature to bind to a specific interface, and when I try to test a connection using the wgA interface, it can’t connect. At first, I’m annoyed, but in hindsight, this makes sense. Only through the virbr0 interface, can I access the virtual machiens. And the virtual machines, are actually behind their own NAT. They are not public, so why would I be able to ping them?</p>
<p>Libvirt offers <a href="https://jamielinux.com/docs/libvirt-networking-handbook/">several networking options</a>. Bridged is where all virtual machines get public ip addresses. Routed is similar, but they don’t get their own interface, and it works on wirelessly connected devices. And finally, NAT, what I am using does not give virtual machines publicly accessible ip addresses.</p>
<p>Instead of running it on my actual laptop, I will try to run the vpn on the debian virtual machine instead.</p>
<p>I set up wireguard again, one side on the vps I am renting:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wgB.conf</strong></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.1/31</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha site</span></span>
<span id="cb11-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> e763iTZmmMcx7HufUOi5vzmQJ5ZhYBuuqnXh/2ViBjA=</span></span>
<span id="cb11-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.10.0/24,10.10.9.0/31,192.168.122.0/24</span></span></code></pre></div>
</div>
<p>And another side on my virtual machine:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wgA.conf</strong></pre>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.1/31</span></span>
<span id="cb12-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb12-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha site</span></span>
<span id="cb12-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> e763iTZmmMcx7HufUOi5vzmQJ5ZhYBuuqnXh/2ViBjA=</span></span>
<span id="cb12-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.10.0/24,10.10.9.0/31,192.168.122.0/24</span></span></code></pre></div>
</div>
<p>And the wireguard default route didn’t work, so I removed it, and then added the route manually using the ip route tool.</p>
<p>When everything was done, my VPS could ping the ip address of my virtual machine, but not my laptop.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">[root@vmi1403809 ~]# ping 192.168.122.201 # virtual machine ip</span>
<span id="cb13-2">PING 192.168.122.201 (192.168.122.201) 56(84) bytes of data.</span>
<span id="cb13-3">[root@vmi1403809 ~]# ping 192.168.122.1 # laptop ip</span>
<span id="cb13-4">PING 192.168.122.1 (192.168.122.1) 56(84) bytes of data.</span>
<span id="cb13-5"># it just sits here forever.</span></code></pre></div>
<p>Well, this is better than a strange error. However, I don’t know where to go next from here.</p>
<p>Alright, I figured it out. I’ve sourced my information from two different links:</p>
<p>The instructions for wg-quick I used are in the <a href="https://wiki.archlinux.org/title/WireGuard">arch wiki’s wireguard article</a>.</p>
<p>However, I also needed to look at the arch wiki’s <a href="https://wiki.archlinux.org/title/Internet_sharing#Enable_packet_forwarding">NAT article</a>. From that article, if you have docker enabled, you must take some extra steps that make thigns more complex. So I disabled docker, followed the instructions for NAT there.</p>
<p>And on my remote server, I ran <code>ip route add xx.xx.xx.xx/yy via zz.zz.zz.zz</code> where xx is the subnet you want to access remotely, and zz is the ip address of the remote device with access to that subnet.</p>
<p>Anyway, I find this deeply ironic. I originally wanted to deploy wireguard to my router to avoid any kind of complex networking, but because I didn’t have physical access to my router, I was testing on machines with more complex networking, which caused things to not work. This affirms my decision to set up wireguard on my router, rather than on my server, especially since kolla-ansible uses docker to deploy.</p>
<p>Anyway, I will have to look into split tunneling or whatnot, because I may not want to vpn everything.</p>
<p>The <a href="https://wiki.freshtomato.org/doku.php/wireguard_on_freshtomato">freshtomato</a> wiki contains info on how to configure wireguard, including doing things like having it start on boot.</p>
<p>Sadly, the wg-quick command doesn’t seem to be available on the router, but that’s not really a big deal. I can just write a small script which sets this up, using the instructions from the arch wiki article, or even just using wg-quick, because it tells you what steps it is taking to up the wireguard interface.</p>
<p>Here is the wg-quick file on my server:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb14-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.1/31</span></span>
<span id="cb14-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb14-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha site</span></span>
<span id="cb14-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> e763iTZmmMcx7HufUOi5vzmQJ5ZhYBuuqnXh/2ViBjA=</span></span>
<span id="cb14-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.10.0/24,10.10.9.0/31,192.168.122.0/24</span></span></code></pre></div>
<p>Interestingly, I didn’t have to add a specific route using <code>ip</code>. Once nat is set up correctly on one device, the, it somehow knows where to go. I only need to add allowed ips.</p>
<p>Here is configuration file for my “router” (still just testing with virtual machines).</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wgA.conf</strong></pre>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb15-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PreUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> sysctl net.ipv4.ip_forward=1</span></span>
<span id="cb15-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PreUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> iptables -t nat -A POSTROUTING -o enp1s0 -j MASQUERADE</span></span>
<span id="cb15-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PreUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span></span>
<span id="cb15-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb15-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> iptables -A FORWARD -i %i -o enp1s0 -j ACCEPT</span></span>
<span id="cb15-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.0/31</span></span>
<span id="cb15-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remote Server</span></span>
<span id="cb15-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> pxCx+cEs6hoI4EE+XdE4lQiLkJRbG4JGQwXz6d/hZDM=</span></span>
<span id="cb15-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.9.0/31</span></span>
<span id="cb15-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Endpoint </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;VPS IP&gt;:51000</span></span>
<span id="cb15-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PersistentKeepalive </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span></code></pre></div>
</div>
<p>Here are the steps my “router” takes when I use <code>wg-quick up wgA</code></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">root@debian:/home/moonpie# wg-quick up wgA</span>
<span id="cb16-2">[#] sysctl net.ipv4.ip_forward=1</span>
<span id="cb16-3">net.ipv4.ip_forward = 1</span>
<span id="cb16-4">[#] iptables -t nat -A POSTROUTING -o enp1s0 -j MASQUERADE</span>
<span id="cb16-5">[#] iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span>
<span id="cb16-6">[#] ip link add wgA type wireguard</span>
<span id="cb16-7">[#] wg setconf wgA /dev/fd/63</span>
<span id="cb16-8">[#] ip -4 address add 10.10.9.0/31 dev wgA</span>
<span id="cb16-9">[#] ip link set mtu 1420 up dev wgA</span>
<span id="cb16-10">[#] wg set wgA private-key /etc/wireguard/wgA.key</span>
<span id="cb16-11">[#] iptables -A FORWARD -i wgA -o enp1s0 -j ACCEPT</span></code></pre></div>
<p>In this case, wgA is the wireguard interface, and enp1s0 is the interface I want to configure NAT on, so that I can access the subnet behind it.</p>
<p>Actually, wg-quick appears to just be a bash script, and I might be able to transfer that over to freshtomato.</p>
<p>The best feature of this wireguard setup is that, since it doesn’t route everything through the vpn tunnel like I was initially expecting, meaning I won’t have to worry about bandwidth or speed, since I won’t be routing all traffic through my router to a remote router.</p>
<p>In addition to all this, I can use nmap to make sure that my remote server can actually see the other services, as they are behind a kind of NAT.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">root@vmi1403809 wireguard]# nmap -sV 192.168.122.1</span>
<span id="cb17-2">Starting Nmap 7.91 ( https://nmap.org ) at 2023-08-18 11:29 PDT</span>
<span id="cb17-3">Nmap scan report for 192.168.122.1</span>
<span id="cb17-4">Host is up (0.068s latency).</span>
<span id="cb17-5">Not shown: 997 closed ports</span>
<span id="cb17-6">PORT     STATE SERVICE         VERSION</span>
<span id="cb17-7">53/tcp   open  domain          dnsmasq 2.89</span>
<span id="cb17-8">8000/tcp open  http            SimpleHTTPServer 0.6 (Python 3.11.4)</span>
<span id="cb17-9">9090/tcp open  ssl/zeus-admin?</span>
<span id="cb17-10">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span>
<span id="cb17-11">SF-Port9090-TCP:V=7.91%T=SSL%I=7%D=8/18%Time=64DFB8E1%P=x86_64-redhat-linu</span>
<span id="cb17-12">...</span>
<span id="cb17-13">... For some reason nmap can't detect cockpit so it's just 20 lines of this nonsense.</span>
<span id="cb17-14">...</span>
<span id="cb17-15">20\x20\x20\x20\x20\x20}\n</span>
<span id="cb17-16">SF:\x20\x20\x20\x20\x20\x20\x20\x20p\x20");</span>
<span id="cb17-17"></span>
<span id="cb17-18">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span>
<span id="cb17-19">Nmap done: 1 IP address (1 host up) scanned in 186.81 seconds</span></code></pre></div>
<p>Nmap detects my python http server, and cockpit.</p>
<p>Alright, next I want to configure firewall usage. I don’t want the remote wireguard server to have access to everything on my “home” network. I am likely going to do this by creating vlan’s, which can be <a href="https://hobo.house/2016/03/10/build-secure-vlan-networks-with-shibby-tomato-router-firmware/">wifi</a>, by creating virtual wireless, or <a href="https://wiki.freshtomato.org/doku.php/advanced-vlan">ethernet</a>, by making it so that certain ethernet ports are trapped in a vlan. With this setup, I can ensure that my server is kept isolated from the rest of my devices, in case it gets compromised. (Although doing it this way is kinda pointless since I may be using a VPN on my devices, running through that same server to get around college wifi restrictions, if they exist).</p>
<p>So I setup wireguard on my server:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/wireguard/wg-stack.conf</strong></pre>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb18-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Address </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.11.1/24</span></span>
<span id="cb18-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PostUp </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> wg set %i private-key /etc/wireguard/%i.key</span></span>
<span id="cb18-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># My router</span></span>
<span id="cb18-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> mFyQQk8/w7AhLSEtJKkcNhMNLPcyBMFHu02TI+OUj2Y=</span></span>
<span id="cb18-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.11.0/24,192.168.17.0/24</span></span></code></pre></div>
</div>
<p>And here is the wg-stack.sh script that will be run on my router:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>wg-stack.sh</strong></pre>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1"># enabled by default</span>
<span id="cb19-2">#echo 1 &gt; /proc/sys/net/ipv4/conf/br2/forwarding</span>
<span id="cb19-3"></span>
<span id="cb19-4">#iptables -t nat -A POSTROUTING -o br2 -j MASQUERADE</span>
<span id="cb19-5">#iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span>
<span id="cb19-6">modprobe wireguard</span>
<span id="cb19-7">ip link add wg-stack type wireguard</span>
<span id="cb19-8">wg setconf wg-stack /jffs/wg-stack-setconf</span>
<span id="cb19-9">ip -4 address add 10.10.11.0/24 dev wg-stack</span>
<span id="cb19-10">ip link set mtu 1420 up dev wg-stack</span>
<span id="cb19-11">iptables -A FORWARD -i wg-stack -o br2 -j ACCEPT</span></code></pre></div>
</div>
<p>Some of the rules were enabled by default, so I commented them out.</p>
<p>And here is the wg-stack-setconf file that the above script calls upon:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/jffs/wg-stack-setconf</strong></pre>
</div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Interface]</span></span>
<span id="cb20-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PrivateKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NO</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Address = 10.10.0.0/24</span></span>
<span id="cb20-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ListenPort </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51000</span></span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[Peer]</span></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Contabo VPS</span></span>
<span id="cb20-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PublicKey </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> xO2fVY8uh4SDx5VH+24Mxx+WIXSnfY3Vw9CDBW7cMnY=</span></span>
<span id="cb20-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AllowedIPs </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 10.10.11.0/24</span></span>
<span id="cb20-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Endpoint </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;VPS IP&gt;:51000</span></span>
<span id="cb20-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PersistentKeepalive </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span></code></pre></div>
</div>
<p>I have to manually specify the private key, because the <code>wg setconf</code> can’t run abitrary commands.</p>
<p>This works… one way.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">root@unknown:/jffs# ping 10.10.11.1</span>
<span id="cb21-2">PING 10.10.11.1 (10.10.11.1): 56 data bytes</span>
<span id="cb21-3">64 bytes from 10.10.11.1: seq=0 ttl=64 time=43.491 ms</span>
<span id="cb21-4">root@unknown:/jffs# curl 10.10.11.1:8000</span>
<span id="cb21-5">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span id="cb21-6">&lt;html&gt;</span>
<span id="cb21-7">....</span>
<span id="cb21-8">.... I ran a simple http server to test if my router could see ports of my server.</span>
<span id="cb21-9">....</span>
<span id="cb21-10">&lt;/html&gt;</span></code></pre></div>
<p>However, when my server attempts to ping or curl my router, it simply waits forever. I think this may have something to do with firewalll rules, where the router is refusing to respond to even ping connections.</p>
<p>After doing some more research, it appears my iptables rules deny all connections to my router, and I can attempt to access subnets other than my router itself, but they just redirect to my router:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">[root@vmi1403809 ~]# ping 192.168.17.152</span>
<span id="cb22-2">PING 192.168.17.152 (192.168.17.152) 56(84) bytes of data.</span>
<span id="cb22-3">64 bytes from 192.168.17.152: icmp_seq=1 ttl=63 time=41.9 ms</span>
<span id="cb22-4">[root@vmi1403809 ~]# curl 192.168.17.152:8000</span>
<span id="cb22-5">curl: (7) Failed to connect to 192.168.17.152 port 8000: No route to host</span>
<span id="cb22-6">[root@vmi1403809 ~]# nmap -sV 192.168.17.152</span>
<span id="cb22-7">Starting Nmap 7.91 ( https://nmap.org ) at 2023-08-19 20:18 PDT</span>
<span id="cb22-8">Nmap scan report for 192.168.17.152</span>
<span id="cb22-9">Host is up (0.043s latency).</span>
<span id="cb22-10">Not shown: 999 filtered ports</span>
<span id="cb22-11">PORT   STATE  SERVICE VERSION</span>
<span id="cb22-12">22/tcp closed ssh</span>
<span id="cb22-13"></span>
<span id="cb22-14">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span>
<span id="cb22-15">Nmap done: 1 IP address (1 host up) scanned in 5.53 seconds</span></code></pre></div>
<p>The nmap scan is especially strange, considering I am using my laptop to test, which doesn’t have an ssh server running. My router however, does, but it also has an http server running (the web management interface), which nmap doesn’t seem to see. I am guessing my router is not playing the role of NAT properly.</p>
<p>Nope, I was wrong. The problem was not my router firewall, but rather my computer firewall. I forgot that unlike Arch Linux, the Arch Linux based linux distribution I was using, CachyOS did come with a firewall enabled.</p>
<p>After disabling the firewall:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">[root@vmi1403809 ~]# nmap -sV 192.168.17.152</span>
<span id="cb23-2">Starting Nmap 7.91 ( https://nmap.org ) at 2023-08-20 03:21 PDT</span>
<span id="cb23-3">Nmap scan report for 192.168.17.152</span>
<span id="cb23-4">Host is up (0.042s latency).</span>
<span id="cb23-5">Not shown: 999 closed ports</span>
<span id="cb23-6">PORT     STATE SERVICE VERSION</span>
<span id="cb23-7">8000/tcp open  http    SimpleHTTPServer 0.6 (Python 3.11.4)</span>
<span id="cb23-8"></span>
<span id="cb23-9">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span>
<span id="cb23-10">Nmap done: 1 IP address (1 host up) scanned in 7.78 seconds</span></code></pre></div>
<p>For testing purposes, I run a simple http server using <code>python -m http.server</code> which launches this service in port 8000.</p>
<p>Alright, upon later investigation, it appears I was both right and wrong.</p>
<p>The <code>iptables -A FORWARD -i wg-stack -o br2 -j ACCEPT</code> only accepts <em>forwarded</em> packets, giving it access to devices in the br2 vlan, whereas input in the one that makes it respond to ping probes or show servcies. This is actually good, because my router won’t be exposed to my rented server, only the subnet behind it will. Without a policy to accept input packets, the router won’t even respond to ping probes.</p>
<p>However, I do have one final thing to handle:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">root@unknown:/jffs# ./wg-stack.sh </span>
<span id="cb24-2">RTNETLINK answers: Network is unreachable</span></code></pre></div>
<p>However, when I run all the steps individually, this error doesn’t occur. This error occurs when I run the <code>ip link set mtu 1420 up dev wg-stack</code>, before the previous step in the script, assigning the ip address to the interface, isn’t done. I am guessing that the script runs too quickly, and some steps are run before the previous step is complete. I simply need to add a <code>sleep</code> command, which inserts an artificial wait in the process.</p>
<p>With all said and done, here is the script I have placed on my router:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/jffs/wg-stack.sh</strong></pre>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">modprobe wireguard</span>
<span id="cb25-2">sleep 2s</span>
<span id="cb25-3">ip link add wg-stack type wireguard</span>
<span id="cb25-4">sleep 2s</span>
<span id="cb25-5">wg setconf wg-stack /jffs/wg-stack-setconf</span>
<span id="cb25-6">sleep 2s</span>
<span id="cb25-7">ip -4 address add 10.10.11.0/24 dev wg-stack</span>
<span id="cb25-8">sleep 3s</span>
<span id="cb25-9">ip link set mtu 1420 up dev wg-stack</span>
<span id="cb25-10">sleep 2s</span>
<span id="cb25-11">iptables -A FORWARD -i wg-stack -o br2 -j ACCEPT</span></code></pre></div>
</div>
<p>And following the advice of the <a href="https://wiki.freshtomato.org/doku.php/wireguard_on_freshtomato#running_wireguard_at_boot">freshtomato wiki</a>, I have placed this script in the firewall section:</p>
<p><code>until [ $(ping -c 1 -A -W 5 -q google.com &amp;&gt;/dev/null &amp;&amp; echo 1 || echo 0) -eq 1 ]; do sleep 5; done; /jffs/wg-stack.sh</code></p>
<p>On my remote server, I can simply enable the wg-quick service</p>
<p><code>systemctl enable wg-quick@wg-stack</code></p>
<p>And now wireguard will be started automatically on both my router and the server.</p>
<p>Because my home server, is not accessible to the internet, I must proxy the connection through the contabo vps before I can get in. My ssh config uses the <code>ProxyJump</code> feature to proxy the connection from one vps into another.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>~/.ssh/config</strong></pre>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb26-1">Host moontron</span>
<span id="cb26-2">                HostName VPS IP</span>
<span id="cb26-3">                port 22</span>
<span id="cb26-4">                user root</span>
<span id="cb26-5">                IdentityFile /home/moonpie/.ssh/moontron</span>
<span id="cb26-6">Host moonstack</span>
<span id="cb26-7">                Hostname 192.168.17.197</span>
<span id="cb26-8">                port 22</span>
<span id="cb26-9">                user root</span>
<span id="cb26-10">                IdentityFile /home/moonpie/.ssh/moonstack</span>
<span id="cb26-11">                ProxyJump moontron</span></code></pre></div>
</div>
<p>With this, I can ssh into my <code>moonstack</code> machine from anywhere in the world.</p>
<p>And because ansible can read the ssh config, I can simply plug the host nicknames into my ansible inventory, and my ansible can configure them, from anywhere in the world.</p>
</section>
<section id="vps-networking" class="level3">
<h3 class="anchored" data-anchor-id="vps-networking">VPS Networking</h3>
<p>Of course, this now makes my kolla-ansible installation more complex. Because I have now have two servers, to distribute to, and I also to deal with having to wireguard into my servers in order to be able to ssh into them.</p>
<p>Beyond that, I have switched from a single node installation, to a multi node installation.</p>
<p>Now that I have ssh and networking set up, I need to select the features and functions of my nodes.</p>
<p>Kolla-ansible sorts nodes into 4 types.</p>
<ul>
<li>Control: These run the dashboards, api and the like.</li>
<li>Networking: This runs the loadbalancers, virtual networking, and the like</li>
<li>Compute: VM’s and containers are hosted here</li>
<li>Storage: Various types of storage are on this node.</li>
</ul>
<p>From the the <a href="https://opendev.org/openstack/kolla-ansible/src/branch/master/etc/kolla/globals.yml">kolla-ansible globals</a>:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb27-1"># This is the raw interface given to neutron as its external network port. Even</span>
<span id="cb27-2">    # though an IP address can exist on this interface, it will be unusable in most</span>
<span id="cb27-3">    # configurations. It is recommended this interface not be configured with any IP</span>
<span id="cb27-4">    # addresses for that reason.</span>
<span id="cb27-5">    #neutron_external_interface: "eth1"</span></code></pre></div>
<p>Based on this, it appears that if I attempt to use the singlular ethernet interface on my vps, then I will end up breaking my setup, as that ethernet interface will stop working normally.</p>
<p>I found something interesting on the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html#example-shared-interface">openstack docs</a>. Apparently, this setup is possible, but “non trivial” to set up persistently, however, it is automated by Kayobe.</p>
<p>I went through <a href="https://docs.openstack.org/kayobe/latest/deployment.html">kayobe’s documentation</a>, and found a <a href="https://www.youtube.com/watch?v=teWgCm6Aq1c">youtube tutorial</a>, and the deployment looks to be much more complex than kolla-ansible, which is frustrating to discover.</p>
<p>Despite Kolla-ansible’s claims of creating a bridge interface and virtual ethernet’s persistently being “non-trivial”, I think they are easier to set up than the alternative options available me.</p>
<p>Both <a href="https://docs.openstack.org/project-deploy-guide/openstack-ansible/latest/">openstack-ansible</a>, and kayobe, simply aren’t as well documented. So it’s back to networking.</p>
<p>I found a <a href="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking">useful article from Red Hat</a>, which is a very good overview of what virtual network interfaces I have available to me on a modern linux sysytem.</p>
<p>The two that it looks like I need to pick, are either macvlan, or bridge mode. Both of those modes allow you to create virtual ethernet interfaces</p>
<section id="macvtap" class="level4">
<h4 class="anchored" data-anchor-id="macvtap">Macvtap</h4>
<p>Because Rocky Linux uses networkmanager, I will use the nmcli tool to do stuff.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1">nmcli connection add type macvlan dev enp1s0 mode bridge tap yes ifname macvtap0</span>
<span id="cb28-2">....</span>
<span id="cb28-3"></span>
<span id="cb28-4"></span>
<span id="cb28-5">ip a</span>
<span id="cb28-6">....</span>
<span id="cb28-7">4: macvtap0@enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 500</span>
<span id="cb28-8">    link/ether 56:19:3c:7a:b7:e5 brd ff:ff:ff:ff:ff:ff</span>
<span id="cb28-9">    inet 192.168.122.78/24 brd 192.168.122.255 scope global dynamic noprefixroute macvtap0</span>
<span id="cb28-10">       valid_lft 3344sec preferred_lft 3344sec</span>
<span id="cb28-11">    inet6 fe80::2c2:9892:c942:1fec/64 scope link noprefixroute </span>
<span id="cb28-12">       valid_lft forever preferred_lft forever</span></code></pre></div>
<p>This simply creates a device and all, which is able to get ip’s from the external world, and in this case, the parent ethernet interface can still be used normally.</p>
<p>You can disable automatic configuration of ipv4/v6 with</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb29-1">nmcli connection modify macvlan-macvtap0 ipv6.method "disabled"</span>
<span id="cb29-2">nmcli connection modify macvlan-macvtap0 ipv4.method "disabled"</span></code></pre></div>
<p>Which I will probably need, as I won’t be paying for another ipv4 address.</p>
<p>The nice thing about using NetworkManager is that configuration using NetworkManager is persistent across reboots. Although I don’t want to jump to conclusions, it’s possible that “non-trivial to set up in a persistent manner” is based on older information.</p>
<p>I further expermimented with macvlan. Since openstack will probably be doing more advanced networking, I attempted to create another macvtap device with the parent being the already existing macvtap device. It got created, but it didn’t get internet access, nor did it automatically get it’s own ip address. I don’t know what this means when it comes to how openstack neutron will interact with it, as neutron may want to do something like that.</p>
<p>I found a <a href="https://desertislandit.wordpress.com/2016/02/08/neutron-a-flat-network-in-a-single-node-single-nic-openstack-environment-kilo-on-ubuntu-14-0-4/">wordpress blogpost</a> <a href="https://web.archive.org/web/20230824205310/https://desertislandit.wordpress.com/2016/02/08/neutron-a-flat-network-in-a-single-node-single-nic-openstack-environment-kilo-on-ubuntu-14-0-4/">archive</a>. In this blog, someone uses the openvswitch to create a bridge, in the necessary setup for neutron to be able to do stuff.</p>
<p>Based on what that setup looks like, it doesn’t look like neutron is given an interface that is a slave to the bridge, but it looks like an interface which is under the bridge is created for my machine to use normally, while neutron consumes the bridge itself for usage and creation of more virtual interfaces. However, this guide is for deploying openstack neutron on bare metal, and kolla-ansible works by deploying in docker containers.</p>
<p>I found <a href="https://docs.openstack.org/project-deploy-guide/openstack-ansible/newton/app-config-test.html">another relevant doc</a> on the openstack website, about using creating an all in one node using vlan’s, bridge interfaces. If I can figure out how do do this in networkmanager, I think it will actually work</p>
<p>The eth0.10 format creates a tagged vlan interface.</p>
<p>I found a relevant document <a href="https://docs.openstack.org/devstack/latest/guides/neutron.html">devstack with a single NIC</a>. Devstack is a way of testing openstack for development purposes and it seems that they’ve anticipated that people deploy openstack from devices like a laptop, which only have one NIC. Their method involves using Open vSwitch to create a bridge, making the main ethernet interface a slave to the bridge, and then configuring the bridge accordingly, giving the new slave an ip address, and using that.</p>
<p>However, I am still confused. The docs make it unclear: Do I give neutron a veth to use for it’s purposes, and use the bridge for network access, or do I give it the bridge, and use the veth created on the bridge to get internet connectivity for myself?</p>
<p>Based on the earlier linked devstack article, it looks like it’s not a linux bridge that’s created, but a openvswitch bridge that’s created, and then something akin to a veth is given to the host device to use for normal networking. However, kolla-ansible doesn’t seem to make this kind of setup too easy…</p>
<p>I did some testing, and I was able to add a macvtap interface on a veth interface.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">nmcli connection add type macvlan dev veth1 mode bridge tap yes ifname macvtap0 </span>
<span id="cb30-2">Connection 'macvlan-macvtap0' (d2ea3d24-f831-4508-b2cf-c448e64afe2a) successfully added.</span>
<span id="cb30-3">[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ ip a</span>
<span id="cb30-4">... irrelevant stuff omitted. </span>
<span id="cb30-5">7: macvtap0@veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 500</span>
<span id="cb30-6">    link/ether 66:4b:2e:a7:22:f2 brd ff:ff:ff:ff:ff:ff</span>
<span id="cb30-7">    inet 192.168.17.251/24 brd 192.168.17.255 scope global dynamic noprefixroute macvtap0</span>
<span id="cb30-8">       valid_lft 86395sec preferred_lft 86395sec</span>
<span id="cb30-9">    inet6 fe80::5541:1541:5340:ebbc/64 scope link noprefixroute </span>
<span id="cb30-10">       valid_lft forever preferred_lft forever</span>
<span id="cb30-11">[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ curl google.com --interface macvtap0</span>
<span id="cb30-12">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;</span>
<span id="cb30-13">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span>
<span id="cb30-14">&lt;H1&gt;301 Moved&lt;/H1&gt;</span>
<span id="cb30-15">The document has moved</span>
<span id="cb30-16">&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.</span>
<span id="cb30-17">&lt;/BODY&gt;&lt;/HTML&gt;</span>
<span id="cb30-18">[moonpie@cachyos-x8664 moonpiedumplings.github.io]$ </span></code></pre></div>
<p>Putting a macvtap interface on a veth interface shows that veth interfaces are more versatile than macvtap interfaces, able to do things like allocate more ip address to sub interfaces.</p>
<p>So the next test is to see if I can put a bridge interface on a veth interface. If I can put a bridge interface on a veth interface, than openstack neutron can put a bridge interface on a veth interface, meaning I can simply give neutron a veth to consume.</p>
<p>I attempted to add a bridge with the veth1 interface as a port, but the bridge sits forever on “configuring ip”.</p>
<p>So based on this experimentation, it seems as if that linux bridge is used as the main one.</p>
<p>There doesn’t appear to be a way to use an existing linux bridge as neutron’s interface, at least not with kolla-ansible. But this does give me a funny idea: what if I install kolla-ansible, lose network connectivity, and then use VNC access to the VPS to finish the configuration manually?</p>
<p>I don’t think this would work though. I can’t guarantee that network connectivity will be maintained for the entirity of the setup, and if the connection was broken halfway through, then the entire thing could shatter.</p>
<p>Based on the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html#openvswitch-ml2-ovs">kolla docs</a> and the <a href="https://github.com/openstack/kolla-ansible/blob/master/etc/kolla/globals.yml#L161">git repo</a>, it seems like kolla-ansible does support linuxbridge.</p>
<p>So I have two options: nested bridges, or setting up the main bridge and giving it to openstack, or somehow configuring the main openstack bridge in the middle of the install. I could modify the ansible playbooks to add the necessary veth interfaces in the middle of the install, but the issue is that kolla-ansible deploys everything in docker, and from a cursory look through, I can’t immediately figure out how to configure stuff outside the docker containers.</p>
<p>The next thing I will try is having a macvtap interface be a port of a bridge, as I haven’t tried that yet. If it works, I can play with the bridge, and see if I can do the veth interface trick, but rather than on a normal bridge, on a bridge that’s on a macvtap interface.</p>
<p>I did further testing with macvtap. On a debian libvirt virtual machine, using the NAT networking in order to make testing easy, I created a a macvtap interface and then plugged it into a bridge. However, it sat at “configuring ip” forever. But, if I manually assigned it an ip, then I could access it remotely, like from the host machine, from the bridges new ip, but I couldn’t do the reverse. Ping and curl, when asked to use that interface, didn’t work.</p>
<p>I am wondering if this is a firewall issue. Maybe packet forwarding by sysctl or iptables isn’t enabled?</p>
<p>I attempted to add a veth interface to the bridge that has macvtap as a port. Same as the bridge, dhcp and auto configuring ip didn’t work, but I could give it what I believed to be a static ip — except I couldn’t access this static ip, or send stuff through it.</p>
<p>A bridge under macvtap doesn’t appear to work fully.</p>
<p>What about a bridge under a bridge? I created a bridge, plugged a veth into it, and made the veth on the other end a port of a new bridge. Rather than let it sit on “configuring ip”, I gave it a static ip. Same issue… until I ran:</p>
<pre><code>root@debian:/home/moonpie# iptables -I DOCKER-USER -j ACCEPT
root@debian:/home/moonpie# curl google.com --interface bridge1
&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;
&lt;H1&gt;301 Moved&lt;/H1&gt;
The document has moved
&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;&lt;/HTML&gt;
root@debian:/home/moonpie# </code></pre>
<p>In this case, bridge0 is my primary bridge, and bridge1 is the “bridge under the bridge”. I added an iptables rule to accept EVERYTHING, and it worked, making me think that the firewall is the issue for macvtap/lan as well.</p>
<p>I attempted to create a veth interface attached to the bridge interface, and I was suprised to see that it already got it’s own public ip. So apparently, it was iptables getting in the way. However, an iptables policy of “literally accept everything” isn’t very secure, so I need to isolate the necessary rules to have a nested bridge work.</p>
<p>I am guessing that it’s probably something related to packet forwarding, and I need to configure iptables to happily send the packets from a difference ip through the main bridge without touching them.</p>
<p>Alright, so after creating a macvtap interface, I realize something: it can send requests out, but I can’t actually access it.</p>
</section>
<section id="bridge-veth" class="level4">
<h4 class="anchored" data-anchor-id="bridge-veth">Bridge + Veth</h4>
<p>I experimented with bridges. Using cockpit’s networkmanager configuration allows you to seamlessly create a bridge which you can still use as a normal ethernet interface for some reason. It even preserves existing ip configuration. But gives me an unanswered question: If bridges are more featureful by default, and can also be used for normal connectivity, why not <em>always</em> use a bridge? More features are better, right?</p>
<p>Anyway, I was able to create a veth pair, enslave one to the bridge, and then the nonenslaved veth interface could be used as a normal ethernet interface.</p>
<p>Steps:</p>
<p>Use cockpit-networkmanager to create a bridge, and add the ethernet interface as a port.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">sudo ip link add veth0 type veth peer name veth1</span>
<span id="cb32-2">sudo ip link set veth0 master br0</span>
<span id="cb32-3">sudo ip link set veth0 up</span>
<span id="cb32-4">sudo ip link set veth1 up</span>
<span id="cb32-5">sudo nmcli connection add type ethernet ifname veth1 con-name veth1</span>
<span id="cb32-6">sudo nmcli connection up veth1</span></code></pre></div>
<p>And then that interface can be used normally. It got it’s own ip via dhcp from my router, and now my computer’s ethernet interface has two ip’s.</p>
<p>But this isn’t good enough for me. <code>ip</code> is not persistent (although it is scriptable, and I can rerun every boot), unlike NetworkManager configurations.</p>
<p>How can I create a veth interface using networkmanager?</p>
<p>I did some searching around, and it seems like at some point, <a href="https://networkmanager.dev/blog/networkmanager-1-30/">networkmanager added this option</a>. To create a veth interface, you must set the property, veth.peer when you create an interface.</p>
<p>So like so (tested and working)</p>
<p><code>nmcli con add type veth ifname veth0 con-name veth0 veth.peer veth1</code></p>
<p>And to add a veth interface to a bridge using nmcli:</p>
<p><code>nmcli connection add type bridge-slave ifname veth1 master bridge0</code></p>
<p>Nope, this doesn’t seem to work.</p>
<p>That creates a new connection, and breaks a lot. Now trying:</p>
<p><code>nmcli connection modify veth1 master bridge0</code></p>
<p>It didn’t work, because veth1 seems not to be managed by networkmanager.</p>
<p>Or alternatively, maybe I can create a veth already enslaved to a bridge.</p>
<p>I tried this <code>nmcli con add type veth ifname veth0 con-name veth0 peer veth1 master bridge0</code>, but it didn’t work because the wrong veth was added to the bridge. veth0 is added to the bridge, but veth1 is not managed by networkmanager. How can I create a veth interface with the unmanaged veth peer added to the bridge?</p>
<p>Or maybe I am going about this the wrong way. It appears I can force NetworkManager to manage interfaces by using (from <a href="https://old.reddit.com/r/linuxquestions/comments/jemh39/how_can_i_force_networkmanager_to_manage_a_veth/">this reddit post</a>):</p>
<p><code>nmcli device set $IFNAME managed yes</code></p>
<p>Once I do this, I can simply use cockpit to add the device to the bridge as a bridge member. And a reboot… and my veth1 device gets nuked.</p>
<p>So it seems I need to edit NetworkManager configurations to make it that the change is permanent.</p>
<p>But there might be an easier method. Looking at the udev rules:</p>
<div class="sourceCode" id="cb33" data-filenmae="/usr/lib/udev/rules.d/85-nm-unmanaged-rules" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">... (shorted for brevity)</span>
<span id="cb33-2">...</span>
<span id="cb33-3"># Virtual Ethernet device pair. Often used to communicate with a peer interface</span>
<span id="cb33-4"># in another net namespace and managed by libvirt, Docker or the like.</span>
<span id="cb33-5"># Generally we don't want to mess with those. One exception would be the</span>
<span id="cb33-6"># full system containers, like LXC or LXD. LXC containers run via libvirt</span>
<span id="cb33-7"># don't use udev, so this doesn't apply. LXD does, though. To deal with the</span>
<span id="cb33-8"># LXD situation, let's treat the devices called eth* as regular ethernet.</span>
<span id="cb33-9">ENV{ID_NET_DRIVER}=="veth", ENV{INTERFACE}!="eth[0-9]*", ENV{NM_UNMANAGED}="1"</span></code></pre></div>
<p>These udev rules are set up in a way that veth devices named <code>eth*</code> will end up being managed by NetworkManager. This definitely seems exploitable.</p>
<p>So I do: <code>nmcli con add type veth ifname veth0 con-name veth0 veth.peer eth1</code></p>
<p>and sure enough, both interfaces are managed by NetworkManager. Using the web ui, I can add the “veth0” interface to the bridge, and it gets it’s own ip and everything. So what’s happening here?</p>
<p>By default, NetworkManager does not manage veth interfaces. But it does manage any interface it does create. When creating a veth interface using NetworkManager, it ends up being a weird scenario where only the main interface is managed, but the peer created is not, and I couldn’t do anything with it. But now I can.</p>
<p>I created a macvtap interface on top of the eth0 interface and it automatically get’s it’s own ipv4 address. I can curl using the –interface macvtap0 option, and I can access services hosting on this machine via the ip address this interface has.</p>
<p>In addition to all this, it persists past a reboot.</p>
<p>Now for the ultimate test: Nested bridging.</p>
<p>Steps (assuming <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/consistent-network-interface-device-naming_configuring-and-managing-networking">predictable network interface names</a> are enabled, because then the names eth0 and eth1 are unused):</p>
<ol type="1">
<li><p>Create eth0 via cockpit and enslave the singular “physical” interface to it using the ui.</p></li>
<li><p><code>nmcli con add type veth ifname veth1 con-name veth1 veth.peer eth1</code></p></li>
<li><p>add veth1 as a port to eth0 via cockpit.</p></li>
<li><p>Use cockpit to disable automatic ip addresses for your bridge, while keeping it enabled.</p></li>
</ol>
<p>And now you have two network interfaces. Now I will attempt to do this again, creating a bridge on another bridge.</p>
<p>And it works. <code>eth1</code>, gets internet access. I can also create a macvtap interface on the nested bridge, which works as I’d expect there as well.</p>
<p>This setup even persists a reboot.</p>
<p>Now?</p>
<p>To do it all again but with a naming scheme that doesn’t suck.</p>
<p>To do it all again, but with docker ipables rules getting in the way at the same time.</p>
<p>Or maybe I can use podman to deploy instead of docker?</p>
<p>I went through the docs and they say nothing. But the <a href="https://github.com/openstack/kolla-ansible/blob/375ecdde07e2bae25179b2454560389097f0573b/tools/validate-docker-execute.sh#L4">source code</a> does say something. In the <a href="https://github.com/openstack/kolla-ansible/blob/375ecdde07e2bae25179b2454560389097f0573b/tools/validate-docker-execute.sh#L4">container engine</a> part of the ansible configuration, there is an option to set what container engine is being used. This means I can set podman instead of docker.</p>
<p>However, this feels… A bit too far from standard practice. I will first see if I can get docker working.</p>
<p>Here is the iptables chains with docker installed:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb34-1">root@debian:/home/moonpie# iptables -L</span>
<span id="cb34-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb34-3">target     prot opt source               destination         </span>
<span id="cb34-4"></span>
<span id="cb34-5">Chain FORWARD (policy DROP)</span>
<span id="cb34-6">target     prot opt source               destination         </span>
<span id="cb34-7">DOCKER-USER  all  --  anywhere             anywhere            </span>
<span id="cb34-8">DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere            </span>
<span id="cb34-9">ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</span>
<span id="cb34-10">DOCKER     all  --  anywhere             anywhere            </span>
<span id="cb34-11">ACCEPT     all  --  anywhere             anywhere            </span>
<span id="cb34-12">ACCEPT     all  --  anywhere             anywhere            </span>
<span id="cb34-13"></span>
<span id="cb34-14">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb34-15">target     prot opt source               destination         </span>
<span id="cb34-16"></span>
<span id="cb34-17">Chain DOCKER (1 references)</span>
<span id="cb34-18">target     prot opt source               destination         </span>
<span id="cb34-19"></span>
<span id="cb34-20">Chain DOCKER-ISOLATION-STAGE-1 (1 references)</span>
<span id="cb34-21">target     prot opt source               destination         </span>
<span id="cb34-22">DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere            </span>
<span id="cb34-23">RETURN     all  --  anywhere             anywhere            </span>
<span id="cb34-24"></span>
<span id="cb34-25">Chain DOCKER-ISOLATION-STAGE-2 (1 references)</span>
<span id="cb34-26">target     prot opt source               destination         </span>
<span id="cb34-27">DROP       all  --  anywhere             anywhere            </span>
<span id="cb34-28">RETURN     all  --  anywhere             anywhere            </span>
<span id="cb34-29"></span>
<span id="cb34-30">Chain DOCKER-USER (1 references)</span>
<span id="cb34-31">target     prot opt source               destination         </span>
<span id="cb34-32">RETURN     all  --  anywhere             anywhere            </span></code></pre></div>
<p>And here is the iptables rules without docker installed:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb35-1">root@debian:/home/moonpie# iptables -L</span>
<span id="cb35-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb35-3">target     prot opt source               destination         </span>
<span id="cb35-4"></span>
<span id="cb35-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb35-6">target     prot opt source               destination         </span>
<span id="cb35-7"></span>
<span id="cb35-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb35-9">target     prot opt source               destination         </span></code></pre></div>
<p>Oh. That’s interesting. For whatever reason, docker takes the default forward policy of accept and throws it out the window. Why?</p>
<p>Since I will be using firewalld as my firewall while it is running, here are the iptables rules with firewall-cmd activated, but no docker:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">root@debian:/home/moonpie# iptables -L</span>
<span id="cb36-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb36-3">target     prot opt source               destination         </span>
<span id="cb36-4"></span>
<span id="cb36-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb36-6">target     prot opt source               destination         </span>
<span id="cb36-7"></span>
<span id="cb36-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb36-9">target     prot opt source               destination         </span></code></pre></div>
<p>Uh oh. Shouldn’t firewall-cmd change the iptables default input and forward policy to drop? What’s going on here?</p>
<p>Okay, I’m going to forget the firewall for now. This is a bit too complex of an install.</p>
<p>I did more research, and kolla-ansible has a <a href="https://github.com/openstack/kolla-ansible/blob/df44a7fb16249e2e04b661aac82fb5b6b9f4dac9/doc/source/reference/deployment-and-bootstrapping/bootstrap-servers.rst">bootrstap</a> which happens before deploying openstack itself. This bootstrap phase does stuff like install docker. So my idea is to run the bootstrap phase before I configure the ethernet interfaces, so that everything is set up properly without docker interfering.</p>
<p>I attempted to do this, by creating a rocky linux virtual machine, and running the kolla all in one installation on it. Interestingly:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb37-1">ASK [openstack.kolla.baremetal : Set firewall default policy] *************************************************************************************************************************</span>
<span id="cb37-2">skipping: [localhost]</span>
<span id="cb37-3"></span>
<span id="cb37-4">TASK [openstack.kolla.baremetal : Check if firewalld is installed] *********************************************************************************************************************</span>
<span id="cb37-5">ok: [localhost]</span>
<span id="cb37-6"></span>
<span id="cb37-7">TASK [openstack.kolla.baremetal : Disable firewalld] ***********************************************************************************************************************************</span>
<span id="cb37-8">changed: [localhost] =&gt; (item=firewalld)</span></code></pre></div>
<p>Kolla disables firewalld. I guess I don’t have to worry about that.</p>
<p>It gets most of the way through, but then fails at:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">ASK [openstack.kolla.docker : Write docker config] ************************************************************************************************************************************</span>
<span id="cb38-2"> Blah blah blah, lots of python errors, they are always messy</span>
<span id="cb38-3"> </span>
<span id="cb38-4"> original message: Interface 'eth0' not present on host 'localhost'"}</span>
<span id="cb38-5">``</span>
<span id="cb38-6"></span>
<span id="cb38-7">So apparently, the bootstrap step of this does more than just install docker and disable firewall. Apparently it tries to actually configure the network interfaces. </span>
<span id="cb38-8"></span>
<span id="cb38-9">So I am going to switch to set up "two" interfaces, make kolla believe that I have two, and then give them to docker. </span>
<span id="cb38-10"></span>
<span id="cb38-11">I created a bridge, called "eth0" and a veth attached to it called "eth1". </span>
<span id="cb38-12"></span>
<span id="cb38-13">By default, eth0 is the main interface, and eth1 is the neutron external interface. </span>
<span id="cb38-14"></span>
<span id="cb38-15">I run the bootstrap steps again, and it works without complaining. The prechecks don't complain as well. Now, it's time for the deployment. </span>
<span id="cb38-16"></span>
<span id="cb38-17">It goes all the way until:</span>
<span id="cb38-18"></span>
<span id="cb38-19">```{.default}</span>
<span id="cb38-20">RUNNING HANDLER [loadbalancer : Wait for haproxy to listen on VIP] *********************************************************************************************************************</span>
<span id="cb38-21">fatal: [localhost]: FAILED! =&gt; {"changed": false, "elapsed": 300, "msg": "Timeout when waiting for :61313"}</span>
<span id="cb38-22"></span>
<span id="cb38-23">PLAY RECAP *****************************************************************************************************************************************************************************</span>
<span id="cb38-24">localhost                  : ok=61   changed=38   unreachable=0    failed=1    skipped=106  rescued=0    ignored=0   </span></code></pre></div>
<p>Why did this fail? I’m guessing because I did not set the vip address in globals.yml, for high availability.</p>
<p>But I’m not creating a cluster rigth now, and my two node cluster won’t be able to use high availability either.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/kolla/globals.yml</strong></pre>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This should be a VIP, an unused IP on your network that will float between</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the hosts running keepalived for high-availability. If you want to run an</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All-In-One without haproxy and keepalived, you can set enable_haproxy to no</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in "OpenStack options" section, and set this value to the IP of your</span></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'network_interface' as set in the Networking section below.</span></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#kolla_internal_vip_address: "10.10.10.254"</span></span></code></pre></div>
</div>
<p>So I can disable high availibility, which I will do and try again.</p>
<p>Except I’ve encountered an issue when attempt to get this setup. Although eth1 works normally, eth0 (the bridge) will not send any requests. Curl or ping simply time out. However, even more strangely, I can still access cockpit via the ip address that it has setup.</p>
<p>For whatever reason, this bridge setup behaves different on debian vs on rocky linux. Even after a reboot, it still doesn’t work.</p>
<p>Change of plans. Rather than attempting to get away with the bridge also being able to act as a normal interface, I think I will just create two veths attatch them to a singular bridge which does not get an ip address.</p>
<p>So I create one bridge, create two veth pairs (eth1-veth1, and eth0-veth0), and attempt to curl using eth0. Nothing. I reboot. Same result.</p>
<p>What?</p>
<p>ip route:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb40-1">root@debian:/home/moonpie# ip route</span>
<span id="cb40-2">default via 192.168.122.1 dev eth1 proto dhcp src 192.168.122.97 metric 101 </span>
<span id="cb40-3">default via 192.168.122.1 dev eth0 proto static metric 425 </span>
<span id="cb40-4">192.168.122.0/24 dev eth1 proto kernel scope link src 192.168.122.97 metric 101 </span>
<span id="cb40-5">192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.4 metric 425 </span></code></pre></div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">[moonpie@rocky ~]$ ip route</span>
<span id="cb41-2">default via 192.168.122.1 dev eth1 proto dhcp src 192.168.122.228 metric 101 </span>
<span id="cb41-3">default via 192.168.122.1 dev eth0 proto static metric 425 </span>
<span id="cb41-4">192.168.122.0/24 dev eth1 proto kernel scope link src 192.168.122.228 metric 101 </span>
<span id="cb41-5">192.168.122.0/24 dev eth0 proto kernel scope link src 192.168.122.111 metric 425 </span></code></pre></div>
<p>iptables:</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">[moonpie@rocky ~]$ sudo iptables -L</span>
<span id="cb42-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb42-3">target     prot opt source               destination         </span>
<span id="cb42-4"></span>
<span id="cb42-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb42-6">target     prot opt source               destination         </span>
<span id="cb42-7"></span>
<span id="cb42-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb42-9">target     prot opt source               destination       </span></code></pre></div>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb43-1">root@debian:/home/moonpie# sudo iptables -L</span>
<span id="cb43-2">Chain INPUT (policy ACCEPT)</span>
<span id="cb43-3">target     prot opt source               destination         </span>
<span id="cb43-4"></span>
<span id="cb43-5">Chain FORWARD (policy ACCEPT)</span>
<span id="cb43-6">target     prot opt source               destination         </span>
<span id="cb43-7"></span>
<span id="cb43-8">Chain OUTPUT (policy ACCEPT)</span>
<span id="cb43-9">target     prot opt source               destination         </span></code></pre></div>
<p>Both have firewalls disabled. The only noticable difference between the two is the version of the linux kernel in use. Debian is using <code>Linux debian 6.1.0-11-amd64</code>, whereas rocky is using <code>Linux rocky 5.14.0-284.25.1.el9_2.x86_64</code>.</p>
<p>There are several things to test. The first is to test a different kernel version, because this could be a kernel bug, relating to linux bridges.</p>
<p>Another thing to test is if this is a networkmanager bug, so I could attempt to not use networkmanager to create bridges, and instead use ip.</p>
<p>So the first thing I try is a newer kernel. The <a href="http://elrepo.org/tiki/HomePage">ELrepo</a> is an unofficial repo for Red Hat Enterprise Linux (RHEL, or EL), and clones, like my rocky linux. The steps to add it are on the linked page.</p>
<p>Then, I nabbed the <a href="http://elrepo.org/tiki/kernel-ml"><code>kernel-ml</code></a> package, which is the latest stable mainline linux kernel. Now, my rocky linux virtual machine is using <code>Linux rocky 6.5.1-1.el9.elrepo.x86_64</code>.</p>
<p>And same thing.</p>
<p>So it’s probably not a kernel bug. Probably. The possibility that the RHEL, or the ELRepo kernel has some difference that causes this bug, is very low.</p>
<p>When looking at the cockpit page for networking, I see that eth0 (my bridge) is receiving data, but the sending data stays at 0. Strange.</p>
<p>It probably would have to be a difference between the network configuration between the two distros. Either networkmanager is configured differently by default, or there is a bug in the networking stack.</p>
<p>For example, in debian:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/NetworkManager/NetworkManager.conf</strong></pre>
</div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode ini code-overflow-wrap code-with-copy"><code class="sourceCode ini"><span id="cb44-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">root@debian:/etc/NetworkManager# cat NetworkManager.conf </span></span>
<span id="cb44-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[main]</span></span>
<span id="cb44-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plugins</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ifupdown,keyfile</span></span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ifupdown]</span></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I changed this from false to true to force NetworkManager to manage every single thing, including the ethernet interface which it didn't do by default. </span></span>
<span id="cb44-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">managed</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span></code></pre></div>
</div>
<p>On the other hand, rocky has everything in this file commented out.</p>
<p>And yup. When I change the relevant options in rocky’s NetworkManager.conf, it works now.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/NetworkManager/NetworkManager.conf</strong></pre>
</div>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb45-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">.....</span></span>
<span id="cb45-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">.....</span></span>
<span id="cb45-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[main]</span></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default is: </span></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plugins=keyfile,ifcfg-rh</span></span>
<span id="cb45-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commented out, of course. I added ifupdown and didn't remove ifcfg-rh, just in case it's needed, but it shouldn't be. </span></span>
<span id="cb45-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">plugins</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">keyfile,ifcfg-rh,ifupdown</span></span>
<span id="cb45-8"></span>
<span id="cb45-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ifupdown]</span></span>
<span id="cb45-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">managed</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb45-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">.....</span></span>
<span id="cb45-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">....</span></span></code></pre></div>
</div>
<p>And it works now:</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb46-1">[root@rocky moonpie]# ping google.com -I eth0 -c 1</span>
<span id="cb46-2">PING google.com (142.250.72.174) from 192.168.122.111 eth0: 56(84) bytes of data.</span>
<span id="cb46-3">64 bytes from lax17s50-in-f14.1e100.net (142.250.72.174): icmp_seq=1 ttl=113 time=4.81 ms</span>
<span id="cb46-4"></span>
<span id="cb46-5">--- google.com ping statistics ---</span>
<span id="cb46-6">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span id="cb46-7">rtt min/avg/max/mdev = 4.808/4.808/4.808/0.000 ms</span>
<span id="cb46-8">[root@rocky moonpie]# ping google.com -I eth1 -c 1</span>
<span id="cb46-9">PING google.com (142.250.72.174) from 192.168.122.150 eth1: 56(84) bytes of data.</span>
<span id="cb46-10">64 bytes from lax17s50-in-f14.1e100.net (142.250.72.174): icmp_seq=1 ttl=113 time=14.9 ms</span>
<span id="cb46-11"></span>
<span id="cb46-12">--- google.com ping statistics ---</span>
<span id="cb46-13">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span id="cb46-14">rtt min/avg/max/mdev = 14.887/14.887/14.887/0.000 ms</span></code></pre></div>
<p>Why does this work now?</p>
<p>Just kidding, this setup doesn’t survive a reboot. But it survives a reboot on debian?</p>
<p>Okay, I played around a little. The correct order is:</p>
<ol type="1">
<li>Edit NetworkManager.conf</li>
<li>Reboot</li>
<li>Then do bridge changes.</li>
<li>Reboot just to make sure they persist.</li>
</ol>
<p>And this persists beyond a reboot.</p>
<p>Now I will test an all in one installation on a virtual machine.</p>
<p>So I set it up… and same issue. I think I may need both a newer kernel, and the nmcli changes.</p>
<p>I install a newer kernel again, and it works. Wow. I think I may actually be encountering a bug. Fascinating.</p>
<p>But that’s besides the point. Now I will attempt to do an all in one installation of openstack using kolla ansible.</p>
<p>The main difficulty I am anticipating is the fact that installing docker changes the forward networking rules, from the default accept to a policy of drop.</p>
<p>But lucky me, that appears to be a debian thing. My network setup still works even after running the bootstrap step.</p>
<p>I even ran the pre run and the deploy steps, and they worked fine until I ran out of memory.</p>
<p>After adding more memory to the virtual machine, it worked:</p>
<p>After going to the <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html#using-openstack">“Using Openstack”</a>, and running the post deploy steps to create an admin password, I have an openstack system:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/horizonlogin.jpg" class="img-fluid"></p>
</section>
</section>
</section>
</section>
<section id="deploying-and-using-openstack" class="level1">
<h1>Deploying and Using Openstack</h1>
<p>Edit: I later found another <a href="https://www.keepcalmandrouteon.com/post/kolla-os-part-1/">blog post</a> about deploying openstack with a veth and it seems they did many of the same steps I did.</p>
<p>I have no idea how to use this thing. I thought it would work similarly to proxmox, where I can just upload an iso and then go through the installation process. It seems to be more complex than that.</p>
<p>The first thing I did was attempt to create a network. It asked me for the physical network name, so I attempted to put “eth1” in that box. Apparently, you don’t put the physical interface there. The default physical interface for neutron is called “physnet1”. I put physnet1 there, and attempted to create an “instance” or virtaul machine with that network in use…</p>
<p>But adding that network was not an option. What?</p>
<p>Now that I got openstack set up in a virtual machine, I did a lot of experimenation with openstack. The first thing I did was to use kolla-ansible’s <a href="https://github.com/openstack/kolla-ansible/blob/da2d8e8b83e696795f4b9c774fc7e6787a1d700e/tools/init-runonce">init-runonce</a> script which creates an image for use with the cloud, and some demo networks.</p>
<p>However, for some reason, this init-runonce script creates the “public” network with the completely wrong ip subnet. It creates the public subnet with a 10.0.1.0/24, when in actuality, my public subnet is the libvirt default NAT subnet, 192.168.122.0/24.</p>
<p>I played a bit more with the init-runonce script, but nothing worked.</p>
<p>Eventually, I decided to create a provider network on my own. I first sourced <code>/etc/kolla/admin-openrc.sh</code> because this was the only way I could get openstack to authenticate properly.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb47-1">openstack network create --external --share \</span>
<span id="cb47-2">  --provider-physical-network physnet1 --provider-network-type flat \</span>
<span id="cb47-3">  libvirtnat</span></code></pre></div>
<p>I then associated the correct subnet, and gateway in the ui. And voila, my virtual machine has internet access. One way. I can ping and curl google.com, but I can’t do the opposite.</p>
<p>The issue was security groups. By default, block all ingress traffic, but allow all egress traffic. By allowing icmp (ping packets) ingress traffic, I found that I could now ping the VPS I had created.</p>
<p>To allow all traffic, I can create a security group in the UI, with the “other protocol” selected, and the -1 wildcard on what protocol of traffic to accept. Now, I fully access my VPS.</p>
<p>On the other hand, I could also just disable firewall on all my VPS’s and use the security groups instead for granular control. Since you can have multiple security groups (what happens if they have conflicting rules?), maybe I could have security rules per service, and then just add an instance to security rules as needed.</p>
<p>Anyway, so now the other question I have: With provider networks, do I need to have the networking components and the compute components on the same node?</p>
<p>That would be the next thing to test. Thankfully, kolla-ansible has <a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">multinode</a> deployment instructions as well as single node.</p>
<p>The other thing I need to consider is how to set static ip’s for the virtual machines, from openstack itself. By default, <em>openstack</em> appears to take over the role of DHCP provider, meaning there is a chance that any ip’s it gets/sets for anything would conflict with my router.</p>
<p>To create an openstack subnet on my provider network, which uses the external dhcp server:</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb48-1">openstack network set --no-dhcp libvirt-nat</span></code></pre></div>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb49-1">openstack subnet create --network libvirtnat --subnet-range 192.168.122.0/24 --gateway 192.168.122.1 libvirt-subnet</span></code></pre></div>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb50-1">openstack port create --network libvirtnat --fixed-ip subnet=libvirt-subnet,ip-address=192.168.122.1 --disable-port-security dhcp-port</span></code></pre></div>
<p>But after I did this, I noticed something. Regardless of whether I had a port or a subnet used, the interface ip address did not match the actual ip address in use by the virtual machine. Openstack reporting the wrong ip address, but I could find the correct one by using nmap and scanning the entire libvirt nat subnet, or using <code>ip a</code> in the virtual machine.</p>
<p>Actually, I don’t even have internet acess when not using this port. For some reason, attempting to put a virtual machine on the public subnet, doesn’t give it any actual internet access.</p>
<p>I tried something else. In the cockpit networkmanager interface, I realized that I been simply leaving the eth1, the neutron external interface, still active, with an ip address, and everything. And other times, I had been disabling it entirely from networkmanager. Rather than disable it, I simply set just ipv4 and ipv6 addresses to disabled, while still keeping the little toggle in cockpit set to on.</p>
<p>With this setup, The ip adddress that openstack reported this instance getting, and the ip address on the instance itself matched.</p>
<p>Also, the subnet had dhcp enabled, using openstack’s dhcp to assign an ip address, from the reserved pool.</p>
<p>But this ip still isn’t static.</p>
<p>Except, maybe I don’t need to worry about that. I did some searching around, and on <a href="https://www.reddit.com/r/openstack/comments/10qcgq9/instance_gets_dhcp_from_external_source_neutron/j6psise/">reddit</a> someone mentioned how neutron port security rules prevent an openstack VM from gaining any ip other than the one it has been allocated.</p>
<p>So basically, each VM get’s a port on the subnet (and the port includes a mac address), and openstack’s dhcp server uses the mac address to give the same port the same ip address every time.</p>
<p>In order to avoid conflict between the</p>
<section id="monitoring" class="level2">
<h2 class="anchored" data-anchor-id="monitoring">Monitoring</h2>
<p>https://github.com/openstack-exporter/openstack-exporter</p>
</section>
<section id="cinder" class="level2">
<h2 class="anchored" data-anchor-id="cinder">Cinder</h2>
<p>Configuring cinder seems to require more than simply enabling the service, according to the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/storage/cinder-guide.html">kolla-ansible docs</a>. I’ve selected the nfs storage backend, so I followed the instructions, but there is no nfs service available.</p>
<p><code>sudo dnf install nfs-utils</code> makes the service available to me.</p>
<p>And the docs are wrong, the name of the nfs system service is not nfs or nfsd, but actually:</p>
<p><code>systemctl enable --now nfs-server</code>, at least on rocky linux.</p>
<p>Cinder seems to be the volume mount feature that a minimal openstack install is missing. With it, I can do things like the volume mounts that I expected openstack to have by default.</p>
</section>
<section id="nova" class="level2">
<h2 class="anchored" data-anchor-id="nova">Nova</h2>
<p><a href="https://docs.openstack.org/nova/latest/">Main openstack doc for nova</a></p>
<section id="lxc" class="level3">
<h3 class="anchored" data-anchor-id="lxc">LXC</h3>
<p>Nova is one of the default services. By default, it uses libvirt to configure qemu + kvm. This is not satisfactory for me, since I have an nvidia gpu and it is a bit easier to use with containers, such as docker or lxc. Because I don’t have a “server” gpu, I won’t be able to get access to vgpu, a feature which enables you to split a gpu between multiple virtual machines.</p>
<p>However, it is possible to split a gpu between multiple containers even without any special features.</p>
<p>One interesting thing is that lxc and docker are just a frontend for a bunch of linux kernel features, so all you need is a supported kernel. According to the <a href="https://wiki.archlinux.org/title/Libvirt#Server">arch wiki</a> article for libvirt, you don’t need to install any lxc related tools to actually use libvirt with lxc, you simply point libvirt at the <code>lxc:///</code> connection. Note Arch linux doesn’t split packages, so everything libvirt needs is probably in one package. On ubuntu, for example, the <a href="https://docs.openstack.org/nova/latest/admin/configuration/hypervisor-lxc.html">openstack nova-lxc</a> article mentions how on ubuntu, another package is needed to be installed.</p>
<p>But is it even possible to configure a multi hypervisor openstack cloud? One <a href="https://www.reddit.com/r/openstack/comments/8hr93t/is_openstack_multihypervisor_configuration_kvm/dym7dtj/">reddit commenter</a> says no. In addition to that, the <a href="https://docs.openstack.org/nova/latest/configuration/config.html#libvirt.virt_type">libvirt_virt_type</a> is of the type “string” rather than the type “list”. This means that I would only be able to put one item here, either kvm or lxc.</p>
<p>One thing I could consider doing is running a privileged container on the main compute node, and then make it another compute node which another virtualization type.</p>
<p>The main issue with such a setup is how I would handle networking devices. If I run another container on the main compute node, then running it in privileged mode gives it access to <em>all</em> devices, which means all networking devices.</p>
<p>No wait, this isn’t actually an issue because I can just configure it so that the container uses different network interfaces. It will still see them, which might cause issues, but it won’t be using them.</p>
<p>So how can I run a privileged container with systemd?</p>
<p>I found a <a href="https://developers.redhat.com/blog/2019/04/24/how-to-run-systemd-in-a-container">relevant article</a> from Red Hat.</p>
</section>
<section id="gpu-passthrough" class="level3">
<h3 class="anchored" data-anchor-id="gpu-passthrough">GPU passthrough</h3>
<p>However, even if I do that, then</p>
<p><a href="https://docs.openstack.org/nova/latest/admin/pci-passthrough.html">PCI device passthrough</a></p>
<p>Based on this doc, it looks like I need to create flavors for virtual machines, which have the allocated gpu’s set up.</p>
<p>I may also want <a href="https://docs.openstack.org/kolla-ansible/latest/reference/compute/libvirt-guide.html#host-vs-containerised-libvirt">an external libvirt</a> daemon, because that may be easier to set up pci device passthrough and whatnot.</p>
<p>I found a <a href="https://www.reddit.com/r/openstack/comments/16g7lmj/kolla_ansible_pci_passthrough/">reddit post</a> where someone was asking for help about PCI passthrough with kolla-ansible, but no one has replied as of yet.</p>
<p>A few days later, they replied to their own post.</p>
<blockquote class="blockquote">
<p>Just in case anyone searches for this in the future: the file in /etc/kolla/config/nova needs to be named nova-compute.conf (NOT nova.conf) and then it will be added to the configuration.</p>
</blockquote>
</section>
</section>
<section id="zun-1" class="level2">
<h2 class="anchored" data-anchor-id="zun-1">Zun</h2>
<p>Zun is the container service. <a href="https://docs.openstack.org/kolla-ansible/latest/reference/compute/zun-guide.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/reference/compute/zun-guide.html</a>.</p>
<p>Configuring this is pretty easy, but it should be noted that the user running kolla-ansible must be a member of the docker group, and I don’t know how to set that up before docker is installed, so you have to run bootstrap first, and then set up users and groups.</p>
<p>According to <a href="https://docs.openstack.org/zun/latest/configuration/policy.html">zun’s policy rules</a> it is not possible to create privileged containers by default. Also, <a href="https://blueprints.launchpad.net/zun/+spec/support-zun-create-privileged">Ubuntu’s launchpad</a> has something about this as well.</p>
<p>One thing I am thinking about is how to passthrough gpu’s and other things to containers. If I desire to do something like an AI trainig on docker containers (since a lot is done on kubernetes nvidia clusters), then I would end up using Zun for it.</p>
<p>I found an article in <a href="https://github.com/openstack/zun/blob/master/specs/pci-device-model.rst">zun’s git</a> saying that it was in the works, but that document is literally 5 years old…</p>
<p>I also found another <a href="https://blueprints.launchpad.net/zun/+spec/support-pcipassthroughfilter">6 year old document about zun</a>. In this doc, it says that pci passthrough has been implemented for zun.</p>
<p>Because the docs are unclear, I decided to go through the source code.</p>
<p>The source code for the <a href="https://github.com/openstack/zun/blob/master/zun/conf/pci.py">pci config options for zun</a></p>
<p>And here is the source code for the <a href="https://github.com/openstack/nova/blob/master/nova/conf/pci.py">pci config options for nova</a>.</p>
<p>Because they are the exact same thing, I am guessing I can use the configuration options <a href="https://docs.openstack.org/nova/latest/admin/pci-passthrough.html">here</a> and <a href="https://docs.openstack.org/nova/latest/configuration/config.html#pci.alias">here</a>.</p>
<p>Oh, I found something better. The <a href="https://docs.openstack.org/zun/latest/configuration/sample-config.html">sample zun configuration</a> has a pci passthrough options.</p>
<p>However, the zun step kept failing when I attempted to use kolla-ansible. Apparentlly the master’s release won’t be supporting zun for a while, because they have to update a lot of dependencies or something like that. Here is the <a href="https://github.com/openstack/kolla-ansible/commit/fdc3b122c1039d93190e68d925af21d459b4a4bf">git commit</a> with relevant changes.</p>
<p>Because of the above, I decided to switch to the 2023.1 release of kolla-ansible, rather than the master release, which it was probably a bad idea to be using.</p>
</section>
<section id="cyborg" class="level2">
<h2 class="anchored" data-anchor-id="cyborg">Cyborg</h2>
<p>Cyborg is management of “hardware acceletors”, like FGPA’s, or in my case, gpu’s.</p>
<p>The configuration is here:</p>
<p>However, given the ability to do PCI passthrough with zun and nova already, I don’t think I will need this service.</p>
</section>
<section id="skyline" class="level2">
<h2 class="anchored" data-anchor-id="skyline">Skyline</h2>
<p>Skyline is the next gen web ui for openstack. By default, only horizon, the older ui is installed.</p>
<p>According to this <a href="https://docs.openstack.org/skyline-console/latest/install/docker-install-ubuntu.html">doc</a> skyline serves on 9999 by default. But according to this <a href="https://docs.openstack.org/skyline-console/latest/configuration/skyline-console-settings.html">doc</a> skyline serves on port 8088 by default. But:</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb51-1">nmap scan report for 192.168.122.111</span>
<span id="cb51-2">Host is up (0.000092s latency).</span>
<span id="cb51-3">Not shown: 990 closed tcp ports (reset)</span>
<span id="cb51-4">PORT     STATE SERVICE         VERSION</span>
<span id="cb51-5">22/tcp   open  ssh             OpenSSH 8.7 (protocol 2.0)</span>
<span id="cb51-6">80/tcp   open  http            Apache httpd</span>
<span id="cb51-7">3306/tcp open  mysql           MySQL 5.5.5-10.11.5-MariaDB-log</span>
<span id="cb51-8">4567/tcp open  tram?</span>
<span id="cb51-9">5000/tcp open  http            Apache httpd</span>
<span id="cb51-10">8000/tcp open  http            Apache httpd</span>
<span id="cb51-11">8022/tcp open  ssh             OpenSSH 8.7 (protocol 2.0)</span>
<span id="cb51-12">9090/tcp open  ssl/zeus-admin?</span>
<span id="cb51-13">9998/tcp open  distinct32?</span>
<span id="cb51-14">9999/tcp open  http            nginx</span></code></pre></div>
<p>Since only 9999 is up, I decided to visit it, but it timed out.</p>
<p>I think the issue is that I’m running out of ram. It might also be CPU, but the monitoring reports that ram is full, although I have a lot of cpu leftover.</p>
</section>
<section id="magnum-1" class="level2">
<h2 class="anchored" data-anchor-id="magnum-1">Magnum</h2>
<p><a href="https://docs.openstack.org/kolla-ansible/latest/reference/containers/magnum-guide.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/reference/containers/magnum-guide.html</a></p>
<p>Seems to be pretty simple to deploy. Needs an insecure option for autoscaling though, which doesn’t look too good.</p>
</section>
<section id="neutron" class="level2">
<h2 class="anchored" data-anchor-id="neutron">Neutron</h2>
<p>The documentation for configuring neutron using kolla-ansible is <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html">here</a>.</p>
<p>I want to enable provider networks for speed for the ipv4 subnet of my router, but I still don’t understand how neutron external subnets, and neutron networking in general works. The main question is this: Can I put virtual machines on an external subnet that is only available to a different networking node?</p>
<p>It should be possible.</p>
<p>To list the openstack physical networks, you can run:</p>
<p><code>openstack network agent list --agent-type L2 agent</code></p>
<p>To list L3 agents:</p>
<p><code>openstack network agent list --agent-type L3 agent</code></p>
<p>I am guessing I can just list all the agents at once.</p>
<p><code>openstack network set --binding:host_id=&lt;hostname&gt; &lt;network-name-or-ID&gt;</code></p>
<p>And to verify: <code>openstack network show &lt;network-name-or-ID&gt; -c binding:host_id</code></p>
<p>Just kidding, those commands were given by chatgpt and they fail. Running them returns:</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb52-1">(venv) [root@thoth ~]# openstack network agent list --agent-type L2 agent</span>
<span id="cb52-2">usage: openstack network agent list [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent]</span>
<span id="cb52-3">                                    [--max-width &lt;integer&gt;] [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending]</span>
<span id="cb52-4">                                    [--agent-type &lt;agent-type&gt;] [--host &lt;host&gt;] [--network &lt;network&gt; | --router &lt;router&gt;] [--long]</span>
<span id="cb52-5">openstack network agent list: error: argument --agent-type: invalid choice: 'L2' (choose from 'bgp', 'dhcp', 'open-vswitch', 'linux-bridge', 'ofa', 'l3', 'loadbalancer', 'metering', 'metadata', 'macvtap', 'nic', 'baremetal')</span></code></pre></div>
<p>And just listing all agents (in my 2 node install with both with the same subnets):</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb53-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb53-2">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb53-3">| ID                                   | Agent Type         | Host         | Availability Zone | Alive | State | Binary                    |</span>
<span id="cb53-4">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb53-5">| 2fb24192-27bc-4d4b-8263-cadc1a73c3b0 | DHCP agent         | network-node | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb53-6">| 429b16e3-bd4f-4507-ae78-6336a12b6b87 | Open vSwitch agent | network-node | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb53-7">| f7e2987b-a6e6-4677-b627-9a32e0508dc9 | Metadata agent     | network-node | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb53-8">| fd2a566d-1d47-470d-b0f6-49972b02813a | Open vSwitch agent | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb53-9">| ffa989a0-42b4-4184-ba8d-72106ee32c89 | L3 agent           | network-node | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb53-10">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span></code></pre></div>
<p><a id="asking-for-help"></a></p>
<p>I did another install, an all in one node (including networking), and a network node. The all-in-one node has both interfaces on the libvirt NAT subnet, “default”, but the network node has it’s neutron external interface on a different libvirt NAT subnet.</p>
<p>Here is the networking agent list:</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb54-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb54-2">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb54-3">| ID                                   | Agent Type         | Host         | Availability Zone | Alive | State | Binary                    |</span>
<span id="cb54-4">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb54-5">| 07aa201f-08b6-4dc9-ac1c-98af105ad53e | L3 agent           | main-node    | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb54-6">| 1afb9cd1-d1d0-4d59-ba58-f291868222da | Metadata agent     | network-node | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb54-7">| 349bbed8-3526-4070-affe-a47c2bbe5985 | DHCP agent         | main-node    | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb54-8">| 69b660b0-1bbc-4474-8668-71308486f3a8 | DHCP agent         | network-node | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb54-9">| a62c5d36-8101-4ca3-8479-358657684273 | Metadata agent     | main-node    | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb54-10">| b6221a20-3543-43c7-9a99-ce143a699702 | Open vSwitch agent | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb54-11">| c0bb80a4-c9e7-48a9-a56a-5fa279bfcef0 | Open vSwitch agent | network-node | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb54-12">| d212772f-4996-413c-b8ef-c1e6b5442b22 | L3 agent           | network-node | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb54-13">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span></code></pre></div>
<p>How can I ensure that the truly external network I create is attatched to a specific L3 agent?</p>
<p>Chatgpt says to use <a href="https://docs.openstack.org/neutron/latest/admin/ovn/availability_zones.html">availibility zones</a>.</p>
<p>However, one thing I am looking at that might be simpler is a multi regional deployment: <a href="https://docs.openstack.org/kolla-ansible/latest/user/multi-regions.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/user/multi-regions.html</a></p>
<p>I also tried a <a href="https://docs.openstack.org/kolla-ansible/latest/user/multi-regions.html">multi regional</a> deployment. In addition to not working, giving me any kinds of zones to specify, chatgpt possible</p>
<p>I did some searching around and I found an <a href="https://github.com/openstack/kolla-ansible/blob/7186f960d93f2e523a2052acd0287e176f7ac927/ansible/group_vars/all.yml#L1132">interesting option in the ansible variables</a>.</p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb55-1"># Set OVN network availability zones</span>
<span id="cb55-2">neutron_ovn_availability_zones: []</span></code></pre></div>
<p>However, I am guessing that I need to enable OVN to use this, so I followed the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html">kolla-ansible docs for this</a>.</p>
<p>I set the variable of neutron availibility zones to be edge, on my network only node, and main, on my main compute node. However, it seems like my variables were ignored:</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb56-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb56-2">+--------------------------------------+------------------------------+--------------+-------------------+-------+-------+----------------------------+</span>
<span id="cb56-3">| ID                                   | Agent Type                   | Host         | Availability Zone | Alive | State | Binary                     |</span>
<span id="cb56-4">+--------------------------------------+------------------------------+--------------+-------------------+-------+-------+----------------------------+</span>
<span id="cb56-5">| 1ca0eec3-22f3-4680-b4c6-2d6e97ab6b8b | DHCP agent                   | main-node    | nova              | :-)   | UP    | neutron-dhcp-agent         |</span>
<span id="cb56-6">| 3f9fffd2-c3f7-4841-910e-bc73ba95ab53 | L3 agent                     | main-node    | nova              | :-)   | UP    | neutron-l3-agent           |</span>
<span id="cb56-7">| 4a11630f-bbaf-4d8e-87d1-deb209e770fe | Open vSwitch agent           | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent  |</span>
<span id="cb56-8">| 820a9bbb-5279-4889-b511-979b1b7d327e | Open vSwitch agent           | network-node | None              | :-)   | UP    | neutron-openvswitch-agent  |</span>
<span id="cb56-9">| bf317078-bf85-488c-87c3-026a23c8793b | L3 agent                     | network-node | nova              | :-)   | UP    | neutron-l3-agent           |</span>
<span id="cb56-10">| e4e3d75b-55b5-4a1e-8bd2-632d8a37e5b9 | Metadata agent               | network-node | None              | :-)   | UP    | neutron-metadata-agent     |</span>
<span id="cb56-11">| ec64e75e-0e61-434e-908f-e4b9d670adbc | DHCP agent                   | network-node | nova              | :-)   | UP    | neutron-dhcp-agent         |</span>
<span id="cb56-12">| f5ea5528-e482-4609-ae33-09ef2d792b28 | Metadata agent               | main-node    | None              | :-)   | UP    | neutron-metadata-agent     |</span>
<span id="cb56-13">| main-node                            | OVN Controller Gateway agent | main-node    | main              | XXX   | UP    | ovn-controller             |</span>
<span id="cb56-14">| c484098d-fd7d-5d9c-81e5-be62657e571e | OVN Metadata agent           | main-node    | main              | XXX   | UP    | neutron-ovn-metadata-agent |</span>
<span id="cb56-15">+--------------------------------------+------------------------------+--------------+-------------------+-------+-------+----------------------------+</span>
<span id="cb56-16">(venv) [root@thoth ~]# openstack availability zone list</span>
<span id="cb56-17">+-----------+-------------+</span>
<span id="cb56-18">| Zone Name | Zone Status |</span>
<span id="cb56-19">+-----------+-------------+</span>
<span id="cb56-20">| internal  | available   |</span>
<span id="cb56-21">| nova      | available   |</span>
<span id="cb56-22">| nova      | available   |</span>
<span id="cb56-23">| nova      | available   |</span>
<span id="cb56-24">| nova      | available   |</span>
<span id="cb56-25">| main      | available   |</span>
<span id="cb56-26">+-----------+-------------+</span>
<span id="cb56-27">(venv) [root@thoth ~]# openstack availability zone list --network</span>
<span id="cb56-28">+-----------+-------------+</span>
<span id="cb56-29">| Zone Name | Zone Status |</span>
<span id="cb56-30">+-----------+-------------+</span>
<span id="cb56-31">| nova      | available   |</span>
<span id="cb56-32">| nova      | available   |</span>
<span id="cb56-33">| main      | available   |</span>
<span id="cb56-34">+-----------+-------------+</span></code></pre></div>
<p>And also, when I look in the UI, to create a network, it only lists the “nova” availibility zone hint.</p>
<p>What happened to my edge availability zone?</p>
<p>Anyway, I decided to do more searching. Apparently, the neutron_ovn_zones are set up <a href="https://github.com/openstack/kolla-ansible/blob/7186f960d93f2e523a2052acd0287e176f7ac927/ansible/roles/ovn-controller/tasks/setup-ovs.yml#L17">here</a>, which is ran as long as the host is a member of the <code>ovn-network-controller</code> group, which is a <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/inventory/multinode#L743">child of the “network” group</a>. Based on this, I don’t think I need to enable OVN in order to use OVN availability zones. It seems like some portion of OVN is deployed, but only the whole thing is used as a network backend if you enable it.</p>
<p>So because of this, I attempted to do another deployment with without setting OVN, but just availability zones.</p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb57-1">(venv) [root@thoth ~]# openstack network agent list</span>
<span id="cb57-2">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb57-3">| ID                                   | Agent Type         | Host         | Availability Zone | Alive | State | Binary                    |</span>
<span id="cb57-4">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb57-5">| 750d6eb8-a89b-495e-86ab-65a9235d963c | Open vSwitch agent | network-node | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb57-6">| 7921c839-1935-4d29-888d-8efae2f31aff | L3 agent           | main-node    | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb57-7">| 7cb4df27-5d40-429d-816e-8336d7a9867c | Metadata agent     | network-node | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb57-8">| ad40304b-b078-434d-bb6d-8e4087f7c7e1 | Open vSwitch agent | main-node    | None              | :-)   | UP    | neutron-openvswitch-agent |</span>
<span id="cb57-9">| b9770fe2-6a6a-4f77-9c5e-c0b058eb6966 | L3 agent           | network-node | nova              | :-)   | UP    | neutron-l3-agent          |</span>
<span id="cb57-10">| d02ba59c-cc43-4a5d-bff0-98bd3713ba53 | Metadata agent     | main-node    | None              | :-)   | UP    | neutron-metadata-agent    |</span>
<span id="cb57-11">| e22251c8-053d-47a7-8980-0e17e2b15341 | DHCP agent         | network-node | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb57-12">| f46c9a7d-d67b-49bf-9d7a-d9c268fd3229 | DHCP agent         | main-node    | nova              | :-)   | UP    | neutron-dhcp-agent        |</span>
<span id="cb57-13">+--------------------------------------+--------------------+--------------+-------------------+-------+-------+---------------------------+</span>
<span id="cb57-14">(venv) [root@thoth ~]# openstack availability zone list</span>
<span id="cb57-15">+-----------+-------------+</span>
<span id="cb57-16">| Zone Name | Zone Status |</span>
<span id="cb57-17">+-----------+-------------+</span>
<span id="cb57-18">| internal  | available   |</span>
<span id="cb57-19">| nova      | available   |</span>
<span id="cb57-20">| nova      | available   |</span>
<span id="cb57-21">| nova      | available   |</span>
<span id="cb57-22">| nova      | available   |</span>
<span id="cb57-23">+-----------+-------------+</span></code></pre></div>
<p>This is even worse, now it didn’t even create the main availability zone.</p>
<p>On the <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron.html#example-multiple-interfaces">kolla-ansible docs for neutron</a>, it mentions that if you have multiple physical networks, you need to name them differently.</p>
<p>The <a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">multinode documention</a> details how to an ansible inventory to declare different variables for each service. Using this, I can replace change the physical interface names from physnet1 to something else. I am thinking physnet4 and physnet6, because of ipv4 and ipv6.</p>
<p>I tried changing the bridge name, however, nothing changed.</p>
<p>According to the <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/neutron/templates/ml2_conf.ini.j2#L27">jinja2 template</a> which is used to generate the ml2-ini.conf</p>
<pre class="jinja2"><code>[ml2_type_flat]
{% if enable_ironic | bool %}
flat_networks = *
{% else %}
flat_networks = {% for interface in neutron_external_interface.split(',') %}physnet{{ loop.index0 + 1 }}{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}</code></pre>
<p>The bridge names variable is completely ignored, and the flat_networks variable is generated purely from <code>neutron_external_interface</code> variable.</p>
<p>Although never directly stated, I think the docs are assuming that every network (and probably openstack, since neutron is also ran on the compute nodes) will have access to the exact same physical networks. However, in my setup, not every node will have access to the same networks. I think I have to use node-specific configurations to, to ensure that openstack understands that the physical network that my VPS has access to, and the one my server has access to, are not the same.</p>
<p>One thing I am thinking of trying is simply deploying openstack, editing <code>/etc/kolla/neutron-server/ml2_conf.ini</code>, and then rebooting, and seeing if that works. However, I don’t even now if this will actually work, so I will have to test.</p>
<p>Now I’ve encountered a problem: this file does not exist on the pure network node. It only exists on the main node. Is it possible to configure koll-ansible to deploy this folder to all nodes?</p>
<p>I found the exact <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/neutron/tasks/config.yml#L167">playbook where the jinja2 template is deployed</a>. I then did some more hunting and found out when this exact playbook is ran, <a href="https://github.com/openstack/kolla-ansible/blob/7186f960d93f2e523a2052acd0287e176f7ac927/ansible/roles/neutron/tasks/config.yml#L162">when servers are in the neutron-server group</a>.</p>
<p>But after looking throught the multinode inventory, I realized that it’s not network nodes that are in the neutron-server group, but rather <a href="https://github.com/openstack/kolla-ansible/blob/master/ansible/inventory/multinode#L288C5-L288C5">only the control nodes</a>.</p>
<p>Based on this, it seems like that directory is purely for the control nodes, which run neutron-server, the API.</p>
<p>Because of this, I decided to add my network node to the neutron-server hosts, which resulted in this directory being created on the server. I then edited the file, but when I tried to create network with the physical net name <code>physnet2</code> I got an error.</p>
<p>I found another <a href="https://github.com/openstack/kolla-ansible/blob/f64c86de1ddec947b7c5cf9d262346d7f0d8fce4/ansible/roles/neutron/templates/openvswitch_agent.ini.j2#L18">config file</a>, where the bridges seem to map to physical network names. I edited this file:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/kolla/neutron-openvswitch-agent/openvswitch-agent.ini</strong></pre>
</div>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb59-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ovs]</span></span>
<span id="cb59-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bridge_mappings </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> physnet2:br-ex</span></span></code></pre></div>
</div>
<p>But I still get the same error.</p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb60-1">(venv) [root@thoth kolla]# openstack network create --external --provider-physical-network physnet2 --provider-network-type flat public1</span>
<span id="cb60-2">Error while executing command: BadRequestException: 400, Invalid input for operation: physical_network 'physnet2' unknown for flat provider network.</span>
<span id="cb60-3">(venv) [root@thoth kolla]# openstack network create --external --provider-physical-network physnet1 --provider-network-type flat public1</span>
<span id="cb60-4">+---------------------------+--------------------------------------+</span>
<span id="cb60-5">| Field                     | Value                                |</span>
<span id="cb60-6">+---------------------------+--------------------------------------+</span>
<span id="cb60-7">| admin_state_up            | UP                                   |</span>
<span id="cb60-8">| availability_zone_hints   |                                      |</span>
<span id="cb60-9">| availability_zones        |                                      |</span>
<span id="cb60-10">| created_at                | 2023-09-26T03:14:59Z                 |</span>
<span id="cb60-11">| description               |                                      |</span>
<span id="cb60-12">| dns_domain                | None                                 |</span>
<span id="cb60-13">| id                        | 378f8457-c50f-4554-91cf-905d9ec08ac7 |</span>
<span id="cb60-14">| ipv4_address_scope        | None                                 |</span>
<span id="cb60-15">| ipv6_address_scope        | None                                 |</span>
<span id="cb60-16">| is_default                | False                                |</span>
<span id="cb60-17">| is_vlan_transparent       | None                                 |</span>
<span id="cb60-18">| mtu                       | 1500                                 |</span>
<span id="cb60-19">| name                      | public1                              |</span>
<span id="cb60-20">| port_security_enabled     | True                                 |</span>
<span id="cb60-21">| project_id                | 1e28ab734f2d45d986259ee44a54ff42     |</span>
<span id="cb60-22">| provider:network_type     | flat                                 |</span>
<span id="cb60-23">| provider:physical_network | physnet1                             |</span>
<span id="cb60-24">| provider:segmentation_id  | None                                 |</span>
<span id="cb60-25">| qos_policy_id             | None                                 |</span>
<span id="cb60-26">| revision_number           | 1                                    |</span>
<span id="cb60-27">| router:external           | External                             |</span>
<span id="cb60-28">| segments                  | None                                 |</span>
<span id="cb60-29">| shared                    | False                                |</span>
<span id="cb60-30">| status                    | ACTIVE                               |</span>
<span id="cb60-31">| subnets                   |                                      |</span>
<span id="cb60-32">| tags                      |                                      |</span>
<span id="cb60-33">| tenant_id                 | 1e28ab734f2d45d986259ee44a54ff42     |</span>
<span id="cb60-34">| updated_at                | 2023-09-26T03:14:59Z                 |</span>
<span id="cb60-35">+---------------------------+--------------------------------------+</span>
<span id="cb60-36">(venv) [root@thoth kolla]# </span></code></pre></div>
<p>Although creating a network with the physical network <code>physnet1</code> works, <code>physnet2</code> doesn’t work.</p>
<p>But then, I did something that did work. I edited <code>/etc/kolla/neutron-server/ml2_conf.ini</code> on the <strong>main</strong> node, to contain <code>physnet1,physnet</code>. This worked, and then I could create a network with <code>physnet2</code>.</p>
<p>But if I put an instance on it, does it actually work? Well, I tried to create an image, and it failed but the openstack error is very vague. I have gotten this error due to not enough resources in the past, but based on some quick research, it can happen because of networks not being set up properly, either.</p>
<p>I decided to look at the logs:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>main-node:/var/logs/kolla/nova/nova-compute.log</strong></pre>
</div>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb61-1">...</span>
<span id="cb61-2">2023-09-26 09:48:40.783 7 ERROR nova.compute.manager [instance: 0ef0f1be-e4aa-4140-89af-4402f992f18b] nova.exception.PortBindingFailed: Binding failed for port ee3ee85b-6edf-4ace-a921-10fcca3637b3, please check neutron logs for more information.</span>
<span id="cb61-3">....</span></code></pre></div>
</div>
<p>Well, that error is pretty explicit. What I am going to do is redeploy, but without the having two servers with the <code>neutron-server</code> role, and see if that works.</p>
<p>So I did the same thing, with only one neutron server, edited openvswitch.ini, and then attempted to create an instance on physnet2. It failed.</p>
<p>I then created a network on physnet1, and created an instance on that network. It worked, getting an ip which I could access externally and all. I could also do the same with a floating ip on that network, and it would get external internet access, and I could reach it externally. So at least I have this system halfway working.</p>
<p>Rather than attempting to put a virtual machine directly on an external network, I instead sought to allocate it a floating ip address. Same error.</p>
<p>I decided to search the configuration directories for more related to this:</p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb62-1">[root@main-node /etc/kolla]# find . -type f -exec grep -H 'physnet' {} +</span>
<span id="cb62-2">./neutron-server/ml2_conf.ini:flat_networks = physnet1,physnet2</span>
<span id="cb62-3">./neutron-openvswitch-agent/openvswitch_agent.ini:bridge_mappings = physnet1:br-ex</span>
<span id="cb62-4"></span>
<span id="cb62-5">[root@network-node /etc/kolla]# find . -type f -exec grep -H 'physnet' {} +</span>
<span id="cb62-6">./neutron-openvswitch-agent/openvswitch_agent.ini:bridge_mappings = physnet2:br-ex</span></code></pre></div>
<p>So I can’t be missing a config file, since find seems not to find anything but those two files that I already edited.</p>
<p>So, I decided to do something that I probably should have done from the very beginning: I decided to test with a sole network node, with the main node no longer having that role.</p>
<p>And it didn’t work. I’m not sure yet, but I’m guessing that the default method I was attempting to use for external network interfaction, provider networks, requires that the virtual machine be on the same host as the network is one, since it works by giving virtual machines direct physical access to networks.</p>
<p>What I did, that works (mostly from <a href="https://github.com/openstack/kolla-ansible/blob/master/tools/init-runonce">init-runonce</a>, the sample setup script):</p>
<ol type="1">
<li><code>openstack network create --external --provider-physical-network physnet1 --provider-network-type flat public1</code></li>
</ol>
<ul>
<li>or just do it from the UI, create a flat network with the name, physnet1</li>
</ul>
<ol start="2" type="1">
<li>In the horizon UI, give this subnet the proper options. That’s way easier than trying to edit the command given by init-runonce.</li>
<li><code>openstack network create demo-net</code></li>
</ol>
<ul>
<li>Create a subnet in the horizon UI</li>
</ul>
<ol start="4" type="1">
<li><code>openstack router create demo-router</code></li>
<li><code>openstack router add subnet demo-router demo-subnet</code></li>
<li><code>openstack router set --external-gateway public1 demo-router</code></li>
</ol>
<ul>
<li>Note: according to <a href="https://github.com/openstack/kolla-ansible/blob/master/tools/init-runonce#L131">init-runonce</a>, the command is different for ipv6 external networks.</li>
</ul>
<p>Then, you can create an instance on that internal subnet. After the instance is created, you should be able to allocate it a floating ip address. When security groups were set up properly, I could ping and nmap it.</p>
<p>However, I encountered a hiccup already: The virtual machine does not see it’s ip address, and cannot bind to it for stuff. But that’s a problem for after I verify that this setup works on my full, two network node setup.</p>
<p>I attempted to set it up this way, but unlike my single network node setup, my virtual machine has no internet access. In addition to that, the floating ip cannot be accessed externally (no ping or nmap).</p>
<p>At this point, I am very confused, so I decided to send an email to the <a href="https://wiki.openstack.org/wiki/Mailing_Lists">openstack mailing list</a>.</p>
<p>I searched first, and I found <a href="https://lists.openstack.org/pipermail/openstack-discuss/2022-December/031522.html">a scenario similar to mine</a>. This person had an issue where, when they tried to add more bridges after they have already been deployed, using kolla-ansible’s reconfigure feature and editing the kolla yaml files. Although not the same to my situation, I will look at the logs and see if I am getting similar errors, or the like.</p>
<p>A few days later, I changed nothing except for updating the kolla-ansible deployment scripts (I recreated the venv). And it worked.</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/networkingworking.jpg" class="img-fluid"></p>
<p>I can use floating ip’s to put virtual machine’s on the network located on the network-node.</p>
<p>Now, at first there was an error when I attempted to put the virtual machine directly on the provider network, but then I changed that network to be a “shared” network and it worked. I think this is what I was missing when I attempted to do it originally, but there are too many variables for me to be able to isolate properly.</p>
<p>Anyway, now I can do both provider and floating ip on the main node. Provider networks are more performant, apparently.</p>
<p>However, one reddit user says that <a href="https://www.reddit.com/r/openstack/comments/zkogoe/ipv6_is_not_working_when_ml2_port_security_is/">ipv6 does not work when port security is enabled</a>. I need to investigate this more closely.</p>
<section id="ipv6" class="level3">
<h3 class="anchored" data-anchor-id="ipv6">IPv6</h3>
<p>I began to test to see if I could create an ipv6 floating ip:</p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb63-1">(venv) [root@intmain-node ~]# openstack floating ip create public1</span>
<span id="cb63-2">Error while executing command: BadRequestException: 400, Bad floatingip request: Network d5eaee4c-5a21-48f6-8b7b-a73f956bbeb9 does not contain any IPv4 subnet.</span></code></pre></div>
<p>Acording to the <a href="https://docs.openstack.org/neutron/latest/admin/config-ipv6.html#nat-floating-ips">docs</a>, floating ip addresses do not support ipv6.</p>
<p>I asked around, and apparently, you are supposed to use <a href="https://docs.openstack.org/neutron/latest/admin/config-subnet-pools.html">subnet pools</a> for this.</p>
<p>I first attempted to create one with my libvirt nat subnet:</p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb64-1">(venv) [root@intmain-node ~]# openstack subnet pool create --share --pool-prefix fd00::0/8  --default-prefix-length 8 demo-subnetpool6</span>
<span id="cb64-2">BadRequestException: 400: Client Error for url: http://192.168.124.112:9696/v2.0/subnetpools, Illegal prefix bounds: default_prefixlen=8, min_prefixlen=64.</span></code></pre></div>
<p>Apparently, openstack doesn’t support prefix lengths smaller than /64. That’s perfectly ok, as my “production” deployment will have that subnet. But my libvirt nat subnet, I made it a /8, which probably wasn’t a good idea.</p>
<p>I later changed my libvirt subnet to be smaller, but the subnet pools appeared to behave similarly to normal subnets, with me not being able to put a virtual machine on the remote network.</p>
<p>Chatgpt suggests that I do a more complex setup, where I basically create a physical network, subnet pool, and then allocate a portion of that subnet pool to a non-external network? I recorded the commands it gave so I can replicate them:</p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb65-1">openstack subnet pool create --default-prefix-length &lt;Prefix_Length&gt; --pool-prefix &lt;CIDR&gt; --name external-pool</span>
<span id="cb65-2">openstack network create --external --provider-network-type flat --provider-physical-network &lt;Physical_Network&gt; --provider-segment &lt;Segment_ID&gt; external-net</span>
<span id="cb65-3">openstack subnet create --network external-net --subnet-pool external-pool --no-dhcp external-subnet</span>
<span id="cb65-4">openstack network create my-project-net</span>
<span id="cb65-5">openstack subnet create --network my-project-net --subnet-pool external-pool my-project-subnet</span>
<span id="cb65-6">openstack server create --flavor &lt;Flavor&gt; --image &lt;Image&gt; --nic net-id=my-project-net my-vm</span></code></pre></div>
<p>I was attempting to do this from the UI, where I noticed that there was now an option to create a subnet from an existing pool, rather than specifying a number. But It fails with:</p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb66-1"> Error: Failed to create subnet "None" for network "demo-sixnet". Details</span>
<span id="cb66-2">Failed to allocate subnet: Cannot allocate requested subnet from the available set of prefixes. Neutron server returns request_ids: ['req-dccfaaae-c4e6-4bbc-99cc-3e5a9a49a467']</span></code></pre></div>
<p>I don’t know why this happens yet. I tried with both a /64, which is the same as the subnet above, and several smaller values, like /128, the smallest it would let me work with, and it still failed.</p>
<p>I found an interesting <a href="https://superuser.openinfra.dev/articles/disable-nat-ipv4-openstack/">article from the openinfra blog</a> (<a href="https://web.archive.org/web/20231015073139/https://superuser.openinfra.dev/articles/disable-nat-ipv4-openstack/">archive</a>) about how to disable NAT for the ipv4 subnets, but it appears to be written for the older openstack, before the unified cli.</p>
<p>According to the blog, however, it says that the address scopes are <em>mandatory</em> if you want to have this setup. Here are the <a href="https://docs.openstack.org/mitaka/networking-guide/config-address-scopes.html">mikata (older release)</a>, and here are the <a href="https://docs.openstack.org/neutron/latest/contributor/internals/address_scopes.html">latest</a> docs from the openstack docs.</p>
<p>Based on the address scope guide, I tried following that. But when I get to one of the later steps:</p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb67-1">(venv) [root@intmain-node ~]# openstack subnet create --ip-version 6 --ipv6-ra-mode slaac --ipv6-address-mode slaac --subnet-pool subnet-pool-ip6 --prefix-length 128 --network network2 subnet-ip6-2</span>
<span id="cb67-2">HttpException: 500: Server Error for url: http://192.168.124.112:9696/v2.0/subnets, Failed to allocate subnet: Insufficient prefix space to allocate subnet size /128.</span></code></pre></div>
<p>Both /64 and /128 give me the same error. On one hand, I want to increase the size of my libvirt subnet, however, then that would not be representative of my real scenario, where I will only have a /64 subnet.</p>
<p>Linked in the address scopes doc, is a <a href="https://www.youtube.com/watch?v=j5hy11YlSOU">video</a>. That video is not very helpful, but in links to it’s <a href="https://www.slideshare.net/eyepv6/deploying-ipv6-in-openstack-environments">presentation</a>, hosted on a site called slideshare. Slideshare recommends similar presentations, and I saw two others, <a href="https://www.slideshare.net/ritchey98/openstack-neutron-ipv6-lessons">this one</a>, and <a href="https://www.slideshare.net/vietstack/deploying-ipv6-on-openstack">this one</a>.</p>
<p>Both articles mention that with SLAAC (what is slaac?), only a /64 prefix is used.</p>
<p>Anyway, I still lack understanding of why this is ahppenign. Maybe a /64 is the minimum size I can allocate? But then why would the UI have options for smaller subnet sizes? Anyways, I am going to test it out by chaging my libvirt subnet to be something bigger, like a /56.</p>
<p>I attempted to upsize my subnet to a /64, but I kept getting an error. The error was somethign about dnsmasq (dhcp server), and it requiring a minimum subnet prefix size of /64. I turned off dhcpv6, and only then was I able to create an ipv6 /56 subnet. Only tangentally related, but maybe the openstack is having a similar issue?</p>
<p>I tried creating a subnet with dhcp disabled, same issue.</p>
<p>Another thing I will attempt to experiment with is working with ports directly. I might be able to create a port on a subnet, and directly attatch it to a virtual machine.</p>
<p>I attempted to connect a port from the ipv6 subnet to a virtual machine directly:</p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode default code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb68-1">Unexpected API Error. Please report this at http://bugs.launchpad.net/nova/ and attach the Nova API log if possible. &lt;class 'nova.exception_Remote.PortBindingFailed_Remote'&gt; (HTTP 500)</span></code></pre></div>
<p>I will have to investigate the logs futher, but I suspect that it simply isn’t possible to allocate ports to machines that aren’t on the same network.</p>
<p>Another person mentioned how they used <a href="https://docs.openstack.org/neutron/latest/admin/config-bgp-dynamic-routing.html">BGP</a> to get this working, but I don’t know what BGP is. It seems this setup requires address scopes.</p>
<p>I spent some time talking on discord (did I link the openstack discord here?). I was told it’s not possible, by someone who seems pretty knowledgable. They said that with ipv6, devices are expected, and recommended to have a unique ip address. Link to <a href="https://datatracker.ietf.org/doc/html/rfc5902">relevant doc</a>.</p>
<p>However, I still find this hard to believe, since some <a href="https://blogs.infoblox.com/ipv6-coe/you-thought-there-was-no-nat-for-ipv6-but-nat-still-exists/">blog posts</a>, mention the existance of an ipv6 nat.</p>
<p>I have a new idea: the router has a subnet, and this subnet is exposed via a vpn. Packets are forwarded to this subnet. Because this subnet is located on the same physical node, there is no need to worry about the more compex pieces of openstack networking.</p>
<p>One reddit user <a href="https://www.reddit.com/r/WireGuard/comments/lwkksi/using_ipv6_from_a_vps_provider_in_my_home_network/">says that this is possible if ebtables are disabled</a>.</p>
<p>Okay, later the person I was talking to on discord mentioned that it is indeed possible, but not with NAT, but instead with BGP.</p>
<blockquote class="blockquote">
<p>Yes as the flow will be: ipv6 address X is on node A but to reach it you need to contact me router A (on network node).</p>
</blockquote>
<p>I asked what to search for since docs aren’t too good, and they said:</p>
<blockquote class="blockquote">
<p>Openstack neutron OVN/OVS BGP north/south traffic ipv6 🙂 Should give you plenty documentation.</p>
</blockquote>
<p>I asked further about doing this with just OVS, since OVN seems to add more complications and is not enabled by default in kolla-ansible.</p>
<blockquote class="blockquote">
<p>OVN is still OpenVSwitch but with a different approach and structure, thought about it as OVS 2.0.</p>
</blockquote>
<blockquote class="blockquote">
<p>And yes you can achieve what you want with OVS instead of OVN.</p>
</blockquote>
<p>From the openstack docs: <a href="https://docs.openstack.org/neutron/2023.1/admin/config-bgp-floating-ip-over-l2-segmented-network.html" class="uri">https://docs.openstack.org/neutron/2023.1/admin/config-bgp-floating-ip-over-l2-segmented-network.html</a> but it seems to mainly apply to ipv4.</p>
<p>Also: <a href="https://docs.openstack.org/neutron/latest/admin/config-bgp-dynamic-routing.html" class="uri">https://docs.openstack.org/neutron/latest/admin/config-bgp-dynamic-routing.html</a></p>
<p><a href="https://www.youtube.com/watch?v=yUOsN2ka1Gk">Youtube video</a>, and the slides are <a href="https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-assets-prod/presentation-media/20170508-IPv6-Lessons.pdf">in pdf here</a></p>
<p>I also desire to enable vpn-as-a-service. But <a href="https://docs.openstack.org/kolla-ansible/latest/reference/networking/neutron-extensions.html#neutron-vpnaas-vpn-as-a-service">according to the docs</a>, that’s not too difficult to set up.</p>
</section>
</section>
<section id="multi-node-install" class="level2">
<h2 class="anchored" data-anchor-id="multi-node-install">Multi Node Install</h2>
<p>A multi node install is documented here: <a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html" class="uri">https://docs.openstack.org/kolla-ansible/latest/user/multinode.html</a></p>
<p>For convinience purpose, I will have my inventory git tracked, in the same repo as my blog.</p>
<p>One thing I am confused about, is where does the globals.yml file go? In the all in one installation, it goes on the single server, which you both deploy from, and to. But if I am deploying to a different machine, do I put this file on the machines I am deploying to, or the machines I am deploying from?</p>
<p>The other thing I am concerned about is how virtual machines will interact to being on a different node than the primary networking node. If I have a compute node, which doesn’t have access to an external subnet, and a networking node that does, then can I have a virtual machine on the external subnet that only the networking node has access to?</p>
<p>I have created multiple machines and an ansible inventory.</p>
<p>But apparently, the deployment host actually is configured a bit, since I got this error:</p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb69-1">fatal: [localhost]: FAILED! =&gt; {</span>
<span id="cb69-2">    "assertion": "ansible_facts.distribution in host_os_distributions",</span>
<span id="cb69-3">    "changed": false,</span>
<span id="cb69-4">    "evaluated_to": false,</span>
<span id="cb69-5">    "msg": "Host OS distribution Archlinux is not supported. Supported distributions are: CentOS, Debian, openEuler, Rocky, Ubuntu"</span>
<span id="cb69-6">}</span></code></pre></div>
<p>I decided to ignore this and power through anyways.</p>
<p>However, for the post deploy step, I needed to create the /etc/openstack directory and chown it to user so that sudo permissions aren’t needed to modify it.</p>
<p>Also, based on my testing, the globals.yml file goes on the deployment host.</p>
<p>So I deployed a two node openstack install, and I attempt to create a virtual machine, but I get an error. It’s one of those incomprehensible python errros, but after looking at my virtual machine, they appear to be out of ram.</p>
<p>This is weird, because I don’t think I have anything enabled but the core openstack services. Currently, I have just two vps’s, a network node with 3 GB of ram and a compute node with 6 Gb of ram.</p>
<p>Because of the ram usage, I can’t properly test. In order to get more ram, I decided to install libvirt on my “moonstack”, which is going to be the openstack compute node. I find this highly ironic (and not the openstack component), since I am basically setting up my server to run virtual machines in an easier manner to prototype for doing so in a harder manner.</p>
<p>Using a combination of cockpit-machines, ssh proxy jumping, and virt-manager’s ability to manage a remote I managed to deploy an all in one, and a network node. Besides the default services, I also enabled magnum, zun (and kuryr, container networking), and cinder (via nfs).</p>
<p>Here is the memory usage for both nodes:</p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb70-1">[root@network-node ~]# free -m</span>
<span id="cb70-2">               total        used        free      shared  buff/cache   available</span>
<span id="cb70-3">Mem:            7486        2190        2105          15        3538        5295</span>
<span id="cb70-4">Swap:           7883           0        7883</span></code></pre></div>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb71-1">[root@main-node ~]# free -m</span>
<span id="cb71-2">               total        used        free      shared  buff/cache   available</span>
<span id="cb71-3">Mem:            7486        6816         273          61         857         669</span>
<span id="cb71-4">Swap:           7883          77        7806</span></code></pre></div>
<p>Good. The network node seems to have ample free space, meaning all of my fancy networking will fit just fine on my 8 GB of ram VPS.</p>
<p>The main node seems to be a little… strangled, but 8 GB is nothgin compared to the 128 GB teh actual install will have.</p>
<p>Now I need to test openstack network interactions.</p>
<p>I upgraded the main node to have 16 GB of ram, and I did an all in one installation + a network node. The network node has a second virtio interface, which is attatched to a different NAT subnet. The point of this is to test how openstack networking works when not all network nodes have their neutron external interfaces on the same subnet.</p>
<p>Ram usage:</p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb72-1">[root@network-node ~]# free -m</span>
<span id="cb72-2">               total        used        free      shared  buff/cache   available</span>
<span id="cb72-3">Mem:            7486        2198        2102          14        3532        5287</span>
<span id="cb72-4">Swap:           7883           0        7883</span>
<span id="cb72-5">[root@main-node ~]# free -m</span>
<span id="cb72-6">               total        used        free      shared  buff/cache   available</span>
<span id="cb72-7">Mem:           15350        8221         558          90        7025        7129</span>
<span id="cb72-8">Swap:           7883           1        7882</span></code></pre></div>
</section>
<section id="ipv6-on-contabo" class="level2">
<h2 class="anchored" data-anchor-id="ipv6-on-contabo">Ipv6 on Contabo</h2>
<p>More vps networking, I can’t believe it.</p>
<p>As I get closer to a deployment, I need to make sure that I have the ipv6 addresses available.</p>
<p><a href="https://contabo.com/blog/ipv6-now-available-for-all-our-customers/" class="uri">https://contabo.com/blog/ipv6-now-available-for-all-our-customers/</a></p>
<p>According to this article, contabo makes an entire /112 range of ipv6 addresses avaiable to their customers by default. That’s 65535 ip addresses.</p>
<p>Except this article seems to be outdated.</p>
<p>According to <a href="https://contabo.com/en/customer-support/faq/#how-can-i-use-ipv6-on-my-server-at-contabo">a newer FAQ</a>, the range seems to be /64.</p>
<p><a href="https://contabo.com/blog/adding-ipv6-connectivity-to-your-server/" class="uri">https://contabo.com/blog/adding-ipv6-connectivity-to-your-server/</a></p>
<p>According to the above article, contabo has already added ipv6 support, and you simply look at the vps control page to see your available ipv6 address. However, there is no such box on my vps control page.</p>
<p>I think this may have something to do with the fact that campus internet is not ipv6 capable, so maybe there is no need to show it to me since I would not be able to access it.</p>
<p>Or it could do with the fact that this article is from 2013 and possible wildly out of date.</p>
<p>However, on the reverse DNS page, my vps’s ipv6 address is shown:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/ipv6.png" class="img-fluid"></p>
<p>So, inferring from that, I can tell that my vps’s ipv6 address is “2605:a141:2140:3809:0000:0000:0000:0001”. And if I get a /64 range, then I can tell my range is 2605:a141:2140:3809::/64. Of course, that’s not enough, I also need to know the default gate way for this network… The article above details it for a different subnet, but I don’t know for my own subnet.</p>
<p>There is a command, <code>enable_ipv6</code> which comes out of the box on the contabo servers, but it doesn’t do anthing:</p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb73-1">[root@vmi1403809 ~]# which enable_ipv6</span>
<span id="cb73-2">alias enable_ipv6='sed -i "/net.ipv6.conf.all.disable_ipv6.*/d" /etc/sysctl.conf &amp;&amp; sysctl -q -p &amp;&amp; echo 0 &gt; /proc/sys/net/ipv6/conf/all/disable_ipv6'</span>
<span id="cb73-3">        /usr/bin/sed</span>
<span id="cb73-4">        /usr/sbin/sysctl</span>
<span id="cb73-5">        /usr/bin/echo</span></code></pre></div>
<p>All it does is change the sysctl parameters to enable ipv6, and it doesn’t actually set it up. Without knowing my default gateway, nothing I do with ipv6 will be able to access the internet.</p>
<p>Using cockpit and networkmanager, I set my ipv6 address to what was above. The default gateway was fe80::1, which was noted <a href="https://contabo.com/blog/adding-ipv6-connectivity-to-your-server/">here</a>. I tried to ping it and nmap it but I diddn’t see anything.</p>
<p>For DNS, rather than using contabo’s DNS, I decided to go for google’s two public ipv6 dns’s, <code>2001:4860:4860::8844</code>, and <code>2001:4860:4860::8888</code>. These are noted on <a href="https://developers.google.com/speed/public-dns/docs/using">google’s developer docs</a>.</p>
<p>Sure enough, when I proxy into my server (I used ssh with the -D option), and go to <a href="https://test-ipv6.com/" class="uri">https://test-ipv6.com/</a> I get this result:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server-2/images/serveripv6.jpg" class="img-fluid"></p>
<p>My server has a public ipv6 address now. And if I can give this interface a public ipv6 address, then openstack will definitely be able to give any virtual interfaces it creates public ipv6 addresses.</p>
<p>Later, I realized that the way openstack allocates floating ip addresses, is by contacting an external dhcp server, so I have to create my own dhcp server.</p>
<p>In addition to that, if I want to access the ipv6 services from my VPS, then I will need to have an ipv6 address configured.</p>
<p>The arch wiki has some instructions for setting up <a href="https://wiki.archlinux.org/title/Dnsmasq">dnsmasq</a>, a lightweight, easy to configure dhcp server.</p>
<p>For testing, I decided to use the subnet <code>fd00::/8</code> for the private ipv6 subnet I will be testing on.</p>
</section>
<section id="network-interfaces" class="level2">
<h2 class="anchored" data-anchor-id="network-interfaces">Network interfaces</h2>
<p>So I realized something. According to the <a href="https://docs.openstack.org/kolla-ansible/latest/admin/production-architecture-guide.html">kolla-ansible architechture guide</a>, ansible cannot recognize interface names with dashes. So because of this, I’ve decided to rename the wireguard interface from wg-stack to wgstack.</p>
<p>Another thing that looks a bit confusing is the <code>dns_interface</code> option, which appears to be used by designate for external dns requests. By default, this interface defaults to the same as the “network_interface”, which will not have public internet access on my vps (since I am using the wireguard as that interface). However, since I won’t be installing designate, it shouldn’t be too much of an issue?</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/projects/build-server-2/index.html</guid>
  <pubDate>Wed, 02 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building my own Server Part 1 — Hardware</title>
  <link>https://moonpiedumplings.github.io/projects/build-server/index.html</link>
  <description><![CDATA[ 



<section id="hardware" class="level1">
<h1>Hardware</h1>
<section id="selection" class="level2">
<h2 class="anchored" data-anchor-id="selection">Selection</h2>
<p>I wanted a machine for experimenting with devops and deep learning. That means plenty of ram, cpu, and a modest gpu.</p>
<p>I was very careful with my selection, and here is what I ended up with:</p>
<ul>
<li>Dell Precision Tower Server 7910, with 2X intel xeon E5 2687 v4. Came with 32 GB of ram.</li>
<li>More memory, when added, I will get a total of 128 GB of ECC memory.</li>
<li>Nvidia rtx 4070 GPU, 12 GB vram.</li>
</ul>
</section>
<section id="building" class="level2">
<h2 class="anchored" data-anchor-id="building">Building</h2>
<p>Here is the inside of my server:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/insides.jpg" class="img-fluid"></p>
<p>Anyway, I need to figure out where to put the GPU. The computer has several PCIe slots, and I want the fastest one.</p>
<p>Up top:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/toppcie.jpg" class="img-fluid"></p>
<p>And below:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/belowpcie.jpg" class="img-fluid"></p>
<p>I need to figure out what each of these pcie ports is. What do the numbers and color mean?</p>
<p>To catalog them:</p>
<ul>
<li>Three black PCIe3x16 slots (all 75W)</li>
<li>One blue PCIe3x16 75W + ext 225 w</li>
<li>One black PCIe2x4 25 W</li>
<li>One tan PCI slot</li>
</ul>
<p>I think it is safe to assume that the color is related to wattage, not PCIe protocol. Since the computer comes with the necessary power plug that the nvidia gpu wants, it is safe to assume that any of the PCIe3x16 are optimal, although I will try to place the gpu in the best spot for cooling.</p>
<p>I found a <a href="https://www.dell.com/community/Desktops-General-Read-Only/What-is-the-meaning-of-the-blue-PCIe-slot-on-the-Dell-T7910/td-p/5153034">forum post</a> (<a href="https://web.archive.org/web/20230804052739/https://www.dell.com/community/Desktops-General-Read-Only/What-is-the-meaning-of-the-blue-PCIe-slot-on-the-Dell-T7910/td-p/5153034">wayback archive</a>) where someone asked this exact question.</p>
<p>An unsourced answer replied that the blue pcie slot was the primary gpu slot, so since I only have one gpu, that is where I put it.</p>
<p>I found the <a href="https://www.dell.com/support/manuals/en-us/precision-t7910-workstation/precision_t7910_om_pub/additional-information?guid=guid-ba746105-ecbd-4bb4-9fcc-b78681607aab&amp;lang=en-us">manual</a> for my system online, but it doesn’t seem to label each pci port in images.</p>
<p>I also did research into some youtube videos.</p>
<p><a href="https://www.youtube.com/watch?v=jPDYT0XW6Rs">General review</a></p>
<p><a href="https://www.youtube.com/watch?v=b499mGPEwVg">Memory upgrading process</a></p>
<p>The important thing to note about the memory upgrading process is that the memory shroud (cover) does not interfere with other processes.</p>
<p>Anyway, I also did more research, attempting to find more manuals and whatnot.</p>
<p>Linked on <a href="https://www.dell.com/support/home/en-us/product-support/product/precision-t7910-workstation/docs">this page</a> I found a <a href="https://dl.dell.com/topicspdf/precision-t7910-workstation_owners-manual_en-us.pdf">proper manual</a> which gave visual instructions on how to do things like remove the memory shroud.</p>
</section>
<section id="gpu" class="level2">
<h2 class="anchored" data-anchor-id="gpu">GPU</h2>
<p>However, I am trying to add the gpu, so I can get monitor output, so I can run testing suites to ensure the computer is in proper working order.</p>
<p>The GPU, is inserted:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/gpuin.jpg" class="img-fluid"></p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/gpuscrewed.jpg" class="img-fluid"></p>
<p>After plugging the gpu power in:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/gpuwithpower.jpg" class="img-fluid"></p>
<p>I can turn the machine on and get monitor output:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/monitoroutput.jpg" class="img-fluid"></p>
<p>Next step is to run the system diagnostics on the memory I currently have. Thankfully, I have an extra keyboard I can connect it to.</p>
</section>
<section id="hard-drives" class="level2">
<h2 class="anchored" data-anchor-id="hard-drives">Hard Drives</h2>
<p>Now that I had the GPU installed I could get video output and see what the BIOS is saying. I installed two hard drives, and got an error: “Alert Hard drive not found”.</p>
<p>I decided to pause on the hard drives, and run the built in memory test. The memory, and cpu tests ran without error, however, I got an error about not being able to find the hard drives</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/noharddrives.jpg" class="img-fluid"></p>
<p>Just to make sure that the issue was a hardware issue, and not the BIOS merely complaining about not seeing a bootable device, I booted into a live USB and ran lsblk:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/manjarolsblk.jpg" class="img-fluid"></p>
<p>I messed around with moving around the hard drive positions, unplugging and plugging in cables, no dice. This issue is definitely at the hardware level, however, and there are several causes:</p>
<ul>
<li>Bad cable. I only have a single cable, an SAS connector on both sides.</li>
<li>No power to the hard drives. I will test to see if they light up later.</li>
<li>Motherboard not working. Maybe the motherboard plug isn’t working, but I tried both of them…</li>
</ul>
<p>It’s definitely not defective hard drives, as this happens with both of the hard drives I am testing with, both of which are new. However, they rely on the same cable and same power supply (they attatch to a seperate board which has a cable connecting that to the motherboard and another connecting it to the power supply)</p>
<p>Upon doing some further research, I found a related <a href="https://youtu.be/Qa3qvzEjDyE?t=197">youtube video</a>. According to this video, the port I am trying to attatch this to is controlled by the RAID controller, so RAID must be enabled, although I can use RAID 0 for RAID without any of the special RAID features or complications.</p>
<p>I enabled the RAID controller, and now the BIOS can see the hard drives:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/biosseedrives.jpg" class="img-fluid"></p>
<p>However, when I actually inspect these drives via a live usb, they don’t appear to be mountable properly.</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/livecantseedrives.jpg" class="img-fluid"></p>
<p>It sees the hard drives as 0 byte, empty drives, which I can’t do anything.</p>
<p>I need to get into the raid controller bios.</p>
<p>I found a relevant <a href="https://dl.dell.com/manuals/all-products/esuprt_software/esuprt_it_ops_datcentr_mgmt/enterprise-client-solution-resources_white-papers_en-us.pdf">manual</a> which says that when booting, pressing Control + I to enter the raid configuration screen.</p>
<p>I am wondering if there is an option to bypass raid entirely, as I have no need for any of it’s features, and striped will limit me to the size of the smallest disk.</p>
<p>Alright, since I skimmed the manual, I missed something. There are actually three different ways to get to the raid controller interface, depending on what raid controller you have installed. I tested all methods, but the only one that worked was entering the boot options menu, and then going to device configuration.</p>
<p>Then, I was met with a screen like this:</p>
<p><img src="https://moonpiedumplings.github.io/projects/build-server/images/deviceconfig.jpg" class="img-fluid"></p>
<p>I browsed around a little bit, and although it could see the physical drives, there was no option to create a volume or do anything with the disks. I think this is because I have two different disks, an nvme SSD, and a sata HDD.</p>
<p>This is frustrating. I (might) need to buy another disk, or buy parts to make the disks work via a SATA connection.</p>
<p>I did more research and found a relevant <a href="https://www.dell.com/support/kbdoc/en-us/000146646/how-to-manage-your-onboard-lsi-3008-raid-controllers-in-the-unified-extensible-firmware-interface-uefi-configuration-of-your-dell-system">support article</a> (<a href="https://web.archive.org/web/20230808171810/https://www.dell.com/support/kbdoc/en-us/000146646/how-to-manage-your-onboard-lsi-3008-raid-controllers-in-the-unified-extensible-firmware-interface-uefi-configuration-of-your-dell-system">wayback machine</a>) detailing how to use the raid controller and it seems I missed something. It’s seems that creating volume is not in the drives section, but rather in controller configuration.</p>
<p>Apparently, there is also a command line software designed to work with this raid controller (that works on linux, of course).</p>
<p><a href="https://docs.broadcom.com/doc/12353382">Manual</a> (<a href="http://web.archive.org/web/20230808175803/https://docs.broadcom.com/doc/12353382">wayback machine</a>)</p>
<p><a href="https://www.broadcom.com/support/download-search?pg=Legacy%2BProducts&amp;pf=Legacy%2BProducts&amp;pn=SAS%2B9311-8i%2BHost%2BBus%2BAdapter&amp;pa=All&amp;po=&amp;dk=&amp;pl=&amp;l=false">Relevant support page by broadcom</a></p>
<p><a href="https://www.ibm.com/support/pages/sas3ircu-command-line-utility-storage-management-v17000000-linux-ibm-system-x">Downloads by IBM</a></p>
<p><a href="https://support.huawei.com/enterprise/en/doc/EDOC1000004186/917a9193/downloading-and-installing-sas3ircu">Guides by Huawei</a></p>
<p>But I don’t really want to use raid. I just want to pass through the disks, or something like that. Upon doing some research, I might be able to put the card into Host Bus Adapter (HBA) mode. In this mode, it will just pass through the disks.</p>
<p>Based on some precursory research, this may not be an options in the settings that it comes with, and I may need to <a href="https://www.servethehome.com/flash-lsi-sas-3008-hba-e-g-ibm-m1215-mode/">flash the firmware</a> (<a href="http://web.archive.org/web/20230605105352/https://www.servethehome.com/flash-lsi-sas-3008-hba-e-g-ibm-m1215-mode/">wayback link</a>)</p>
<p>Firmware flashing is scary. Unlike playing with operating systems, if done wrong, firmware flashing can brick (make useless) devices. So I will have to research very carefully.</p>
<p>So first, what is this “IT” mode I keep seeing when I research how to passthrough devices. IT mode stands for “initiator target” and it presents each drive individually to the host.</p>
<p>“IR” stands for integrated RAID, when raid is integrated into the motherboard. I don’t have this.</p>
<p>And finally, “HBA” stands for host bus adapter mode. Devices that do this (they can be more than just drive connectors) connect any other kind of device to the motherboard directly.</p>
<p>So I have to find the relevant “IT” firmware.</p>
<p>But first, I need out exactly what device I have.</p>
<p>According to the output of lspci, the controller is: <code>01:00.0 Serial Attached SCSI controller: Broadcom / LSI SAS3008 PCI-Express Fusion-MPT SAS-3 (rev 02)</code></p>
<p>I found a relevant <a href="https://www.youtube.com/watch?v=A54VuVNVX5M">youtube video</a> which applies to my exact server model (T7910), but it doesn’t list where to find the files, and the flashing utility.</p>
<p>Based on some research, it seems that the SAS 3008 and the SAS 9300 HBA have the same hardware, just differing firmware. According to <a href="https://www.storagereview.com/review/supermicro-lsi-sas3008-hba-review">one article</a>, “Supermicro LSI SAS3008 HBAs (which share the same controller as the LSI 9300-8i HBAs)”.</p>
<p>The drivers for this can be found on the <a href="https://www.broadcom.com/site-search?page=1&amp;per_page=100&amp;q=9300_8i_Package">broadcom website</a></p>
<p>I will need to do research into what the “phases” are. I think they are releases/versions? Anyway, I downloaded the P15 version, and I went through it. It appears to contain all the rom files that will be flashed to the device.</p>
<ul>
<li>SAS9300_8i_IT.bin</li>
<li>mptsas3.rom</li>
<li>mpt3x64.rom</li>
</ul>
<p>However, this zip archive appears to only contain the windows flashing utilities. I need to find the linux flashing utility.</p>
<p>Alright, I’ve located the sas3flash binaries: <a href="https://www.broadcom.com/site-search?q=sas3flash_p15">broadcom website</a>. Here, there are linux sas3flash binaries, as well as uefi binaries, which people seem to like, but I don’t really want to use as I don’t want to have to learn how to interact with the UEFI console, and attatched disks, and whatnot. I’d rather use the familer linux command line interface and tools.</p>
<p>Based on looking at <code>sas3flash -help</code>, I should be able to use the same commands as the uefi binary, following the instructions on the flash the firmware guide linked above.</p>
<p>I booted from a live usb, and attempted to flash the rom.</p>
<p>On the first step of flashing the firmware, wiping it, I get an error.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">./sas3flash -c 0 -o -e 6 -l log7 </span>
<span id="cb1-2">    Adapter Selected is a Avago SAS: SAS3008(C0)</span>
<span id="cb1-3"></span>
<span id="cb1-4">    Executing Operation: Erase Flash</span>
<span id="cb1-5"></span>
<span id="cb1-6">    Erasing Flash Region...</span>
<span id="cb1-7"></span>
<span id="cb1-8">    ERROR: Erase Flash Operation Failed!</span>
<span id="cb1-9"></span>
<span id="cb1-10">    Resetting Adapter...</span>
<span id="cb1-11">    Reset Successful!</span>
<span id="cb1-12"></span>
<span id="cb1-13">    Due to Exception Command not Executed. IOCStatus=0x47ca, IOCLogInfo=0x0</span>
<span id="cb1-14">    Finished Processing Commands Successfully.</span>
<span id="cb1-15">    Exiting SAS3Flash.</span></code></pre></div>
<p>I suspect this error is related to me not messing around with the jumper cables before hand, but I can’t find them.</p>
<p>I also can’t flash the IT firmware, and I am assuming this is because it requires that you wipe the firmware first.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">./sas3flash -o -f SAS9300_8i_IT.bin -b mptsas3.rom -b mpt3x64.rom -l flashing.log </span>
<span id="cb2-2">    Adapter Selected is a Avago SAS: SAS3008(C0)</span>
<span id="cb2-3"></span>
<span id="cb2-4">    Executing Operation: Flash Firmware Image</span>
<span id="cb2-5"></span>
<span id="cb2-6">        Firmware Image has a Valid Checksum. </span>
<span id="cb2-7">        Firmware Version 16.00.10.00</span>
<span id="cb2-8">        Firmware Image compatible with Controller. </span>
<span id="cb2-9"></span>
<span id="cb2-10">        Valid NVDATA Image found. </span>
<span id="cb2-11">        NVDATA Major Version 0e.01 </span>
<span id="cb2-12">        Checking for a compatible NVData image... </span>
<span id="cb2-13"></span>
<span id="cb2-14">        NVDATA Device ID and Chip Revision match verified.</span>
<span id="cb2-15">        NVDATA Versions Compatible.</span>
<span id="cb2-16">        Valid Initialization Image verified.</span>
<span id="cb2-17">        Valid BootLoader Image verified.</span>
<span id="cb2-18"></span>
<span id="cb2-19">        ERROR: Cannot Flash IT Firmware over IR Firmware!</span>
<span id="cb2-20"></span>
<span id="cb2-21">        Firmware Image Validation Failed! </span>
<span id="cb2-22"></span>
<span id="cb2-23">    Due to error remaining commands will not be executed.</span>
<span id="cb2-24">    Unable to Process Commands.</span>
<span id="cb2-25">    Exiting SAS3Flash.</span></code></pre></div>
<p>However, after doing some research, it appears that only the dos and efi versions of sas3flash are able to flash IT firmware over IR firmware, according to the official <a href="https://www.broadcom.com/support/knowledgebase/1211161501344/flashing-firmware-and-bios-on-lsi-sas-hbas">broadcom website</a>. ON that site, there is a compatibility table, meaning I need to use the either the efi version, or the dos version. I should have noticed how the existing guides used either the efi version or the dos version.</p>
<p>So I set up a USB with the efi version of the flasher, and I attempted to get into the boot menu… only for it not to work. I press F12, or F8 then F12The screen says something along the lines of “Entering the one time boot configuration”, before taking me to the “cannot find hard drive” screen. I have no idea why it’s not working, as it has worked before.</p>
<p>According to one <a href="https://forums.tomsguide.com/threads/cant-get-into-bios-or-windows-f2-and-f12-do-not-work.422868/">forum post</a>, the issue has something to do with the CD Rom drive, and I should try removing it. However, that question and suggestion is relating to laptops, not workstations, so it might not work for me.</p>
<p>Okay, I figured out what the issue was. I had unplugged the drives, but when I plugged them back in, they were not seated properly, and that made them get confused.</p>
<p>Now that I could get to the boot menu, I could boot my sas3flash efi file. Except I couldn’t. It simply errored. I attempted to boot on it on my laptop to make sure that it was not an issue with the desktop and not the efi setup, and it errored there as well.</p>
<p>However, after I booted to a linux distro, I found that I could see the drives, independent of the raid controller. For whatever, reason, my flashing appears to have worked, even if it didn’t. Now that I have drives installed, I can finally begin to set up the software.</p>
</section>
<section id="memory" class="level2">
<h2 class="anchored" data-anchor-id="memory">Memory</h2>
<p>This comes with two 16 gb sticks, one in each cpu.</p>
<p>I bought 6 more 16 GB ecc sticks, so I will have a total of 128 GB of memory.</p>
<p>In order to ensure that dual channel works, I will need to put them in the right spots. Now, the previous <a href="https://dl.dell.com/topicspdf/precision-t7910-workstation_owners-manual_en-us.pdf">manual</a> that I found has a chart detailing on the channel configuration, but that chart is very complex. Lower down in the manual, in the “errors and warnings” section, there is a error that could appear that makes things very clear to me.</p>
<p>“Warning: Non-optimal memory population detected. For increased memory bandwidth populate DIMM connectors with white latches before those with black latches.”</p>
<p>That makes things very simple for me.</p>
<p>I added the ram. And now my system won’t boot at all. I don’t get any monitor output. I asked around, and someone mentioned that it could be dust in the ram socket cores, so I will have to take them out, blow the dust out, and then reseat the ram.</p>
<p>The same user helping me also said that it might be an issue with extreme memory profiles (xmp), a feature that adjusts how memory works on intel cpus, and that I should disable it from a working bios.</p>
<p>Okay, I figured out what the issue was. The issue was that I did not seat the memory properly.</p>
<p>Once I had set the memory, I ran the memory test built in to the bios, and after some time it finished without any errors.</p>


</section>
</section>

 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/projects/build-server/index.html</guid>
  <pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating my server config, first nix, then ansible</title>
  <link>https://moonpiedumplings.github.io/projects/nixos-vps/index.html</link>
  <description><![CDATA[ 



<section id="what-i-want-to-do" class="level1">
<h1>What I want to do:</h1>
<p>I want to automate my install with nixos</p>
</section>
<section id="nixos" class="level1">
<h1>Nixos</h1>
<p>I possess a small (5 GB of ram, 3 cores) virtual private server (vps), which I use for some things, such as meshcentral. However, for maintainence purposes, I want to change it to nixos. I already started on a nixos config, which can be found on github: <a href="https://github.com/moonpiedumplings/nixos-configs">nixos-configs</a>.</p>
<p>Anyway, the config is fairly simple, and a copy of my current vps config, but as code.</p>
<section id="deployment-attempts" class="level2">
<h2 class="anchored" data-anchor-id="deployment-attempts">Deployment attempts</h2>
<p>However, I now want to deploy this. I am currently using <a href="https://webdock.io">webdock.io</a> as my VPS provider, which doesn’t officially support nixos. So I want to convert an existing ubuntu install in place to a nixos installation, without physical access to the machine.</p>
<p>I have tried multiple tools and they have not worked, but I am now trying <a href="https://github.com/numtide/nixos-anywhere">nixos-anywhere</a> for this.</p>
<p>Here is my config as of 7/14/2023</p>
<details>
<summary>
Show .nix file
</summary>
<details>
<summary>
flake.nix
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>flake.nix</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">github</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">NixOS/nixpkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">github</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">nix-community/disko</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">follows</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nixpkgs"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">outputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>@<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">attrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixosConfigurations</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hetzner-cloud</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.lib.nixosSystem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">specialArgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">modules</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">modulesPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">imports</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-13">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modulesPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/installer/scan/not-detected.nix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-14">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#(modulesPath + "/profiles/qemu-guest.nix") #not a qemu vm</span></span>
<span id="cb1-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try to fit the lxd-vm config in here</span></span>
<span id="cb1-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#https://github.com/mrkuz/nixos/blob/c468d9772b7a84ab8e38cc4047bc83a3a443d18f/modules/nixos/virtualization/lxd-vm.nix#L4</span></span>
<span id="cb1-17">            disko.nixosModules.disko</span>
<span id="cb1-18">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-19">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devices</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">./disk-config.nix</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.lib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-22">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">boot</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">loader</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">efi</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">efiSysMountPoint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/boot/efi"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">boot</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">loader</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grub</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devices</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodev"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">efiSupport</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#efiInstallAsRemovable = true;</span></span>
<span id="cb1-27">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-28">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">networking</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">usePredictableInterfaceNames</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">interfaces</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-31">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">eth0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-32">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">useDHCP</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ipv4</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">addresses</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">address</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"93.92.112.130"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prefixLength</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}];</span></span>
<span id="cb1-34">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-35">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">defaultGateway</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-37">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">interface</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eth0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-38">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">address</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"93.92.112.1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-39">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-40">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-41">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">services</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openssh</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-43">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">enable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-44">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">settings</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-45">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PasswordAuthentication</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-46">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#PermitRootLogin = "prohibit-password"; # this is the default</span></span>
<span id="cb1-47">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-48">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openFirewall</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-49">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-50">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cockpit</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-51">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">enable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-52">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openFirewall</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-54">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-55"></span>
<span id="cb1-56">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">moonpie</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-57">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">isNormalUser</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraGroups</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wheel"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable ‘sudo’ for the user.</span></span>
<span id="cb1-59">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#packages = with pkgs; [];</span></span>
<span id="cb1-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">initialHashedPassword</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$j9T$ZGDLrUl6VP4AiusK96/tx0$1Xb1z61RhXYR8lDlFmJkdS8zyzTnaHL6ArNQBBrEAm0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># may replace this with a proper secret management scheme later</span></span>
<span id="cb1-61">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openssh</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">authorizedKeys</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">keys</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDEQDNqf12xeaYzyBFrOM2R99ciY9i0fPMdb4J64XpU3Tjv7Z5WrYx+LSLCVolzKktTfaSgaIDN8+vswixtjaAXkGW2glvTD0IwaO0N4IQloov3cLZa84I7lkj5jIkZiXJ2zHJZ8bQmayUrSj2yBwYJ61QLs+R0hpEZHfRarBU9vphykACdM6wxSj0YVkFnGlKBxZOZipW6OoKjEkFOHOSH6DYrX3V/TqALYC62iH6jEiLIycxey1vfwkywfsP9V9GlGYHutdwgAgeaN3xUnL8+X6vkQ8cbC2jEuVopodsAAArFYZLVdfAcNc17WYq5y+FX3schGpTo89SZ4Uh9gd4b45h9Hq7h6p7hBF8UCkyqSKnFiPjDJxv5yuY+rYeZ9aJSeCJUYrb1xyOreWnJkhDuYff/1NCewWL8sfuD9IC9BXWBwhxoA/OUfV9KvDBZmYoThlh86ZCQ+uqCR1DIKa1YhPMlT6gzUY01yoMj+B93RpUBUW5LqLDVCL7Qujh/0ns= moonpie@cachyos-x8664"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-62">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-63">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">root</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openssh</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">authorizedKeys</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">keys</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-64">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change this to your ssh key</span></span>
<span id="cb1-65">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCg+VqYIph1uiO243+jqdKkSOiw4hAyNWwVeIgzu7+KStY2Dji/Dzn1gu5LGj71jj/dW2Q8FpAC4WXWX5alqUJpK58HwN/d86BpnNPAxjDBOtYN2Znf3Y4108OKhEyaaKpiPSpADW5b/FW+Ki+ftMxRs9cUWuysTxoYDeX9BkTtpar5ChYaoMEkD//tUbqLx9wVFIQ4YdbVajgupUW3S2LRqCAgGBf0eTMYoZbNJHjSNlje7m9UJQOqvXJtiGdoYAqYQdHZfkCLKC1qBw6bl0ZHVkETTKr6tC89ZaZlKfZfGZqgCvyW0VzwYHwRmcOBndZgdOkEHQS/VIYmp91v1G58KMfuSBEKyUJoRVjo6lvbPHIsrGC1vNKLRiRYKGfo1lJ/qFIiq5NNfvmoYZMy+4A6jMohesTdA4yP7nwyz1o9jWmDIHeGJxZCfdYJyQ/IslesR3ACjUYAporCIk3U71f1qB7QOJAErF7+3Q6ZdOHNPPu7sURf2zMn/Q6mWktTxxU= moonpie@localhost.localdomain"</span></span>
<span id="cb1-66">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-67">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})</span></span>
<span id="cb1-68">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-70">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-71"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</details>
<details>
<summary>
disk-config.nix
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>disk-config.nix</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disks</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/sda"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disk</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">device</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">builtins</span>.elemAt disks <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disk"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">content</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-7">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">partitions</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ESP</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-10">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EF00"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100M"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">content</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-13">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filesystem"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-14">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vfat"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-15">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mountpoint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/boot/efi"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-17">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">root</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-19">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">content</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-21">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filesystem"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-22">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ext4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-23">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mountpoint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-25">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-26">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-28">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</details>
</details>
<p>In the direcotry where this is, I run the nixos-anywhere command:</p>
<p><code>nix run github:numtide/nixos-anywhere -- --flake .#hetzner-cloud moonpie@ip -i nixos-vps</code></p>
<p>My ssh identity file is named <code>nixos-vps</code>.</p>
<p>But this config doesn’t work. Although my effort to set up the grub bootloader seemed to have prevailed, and the terminal output said it had succeeded, I cannot access the device. I think it is an issue with network connection.</p>
<p>For those who may be attempting to help me, or look at my work, here is a copy of the files I am working with, updated live on every push to the github repo for this blog.</p>
<details>
<summary>
Show files
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>flake.nix</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">github</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">NixOS/nixpkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">github</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">nix-community/disko</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">follows</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nixpkgs"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">outputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>@<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">attrs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixosConfigurations</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hetzner-cloud</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.lib.nixosSystem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">specialArgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">modules</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">modulesPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">imports</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-13">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modulesPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/installer/scan/not-detected.nix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-14">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#(modulesPath + "/profiles/qemu-guest.nix") #not a qemu vm</span></span>
<span id="cb3-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try to fit the lxd-vm config in here</span></span>
<span id="cb3-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#https://github.com/mrkuz/nixos/blob/c468d9772b7a84ab8e38cc4047bc83a3a443d18f/modules/nixos/virtualization/lxd-vm.nix#L4</span></span>
<span id="cb3-17">            disko.nixosModules.disko</span>
<span id="cb3-18">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-19">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disko</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devices</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">./disk-config.nix</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.lib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-22">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">boot</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">loader</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">efi</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">efiSysMountPoint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/boot/efi"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">boot</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">loader</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grub</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devices</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodev"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">efiSupport</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#efiInstallAsRemovable = true;</span></span>
<span id="cb3-27">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-28">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">networking</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">usePredictableInterfaceNames</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">interfaces</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-31">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">eth0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-32">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">useDHCP</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-33">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ipv4</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">addresses</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">address</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"93.92.112.130"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prefixLength</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}];</span></span>
<span id="cb3-34">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-35">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">defaultGateway</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-37">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">interface</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eth0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">address</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"93.92.112.1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-39">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-40">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-41">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">services</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openssh</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-43">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">enable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-44">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">settings</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-45">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PasswordAuthentication</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-46">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#PermitRootLogin = "prohibit-password"; # this is the default</span></span>
<span id="cb3-47">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-48">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openFirewall</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-49">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-50">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cockpit</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-51">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">enable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-52">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openFirewall</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-53">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-54">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-55"></span>
<span id="cb3-56">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">moonpie</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-57">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">isNormalUser</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">extraGroups</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wheel"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable ‘sudo’ for the user.</span></span>
<span id="cb3-59">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#packages = with pkgs; [];</span></span>
<span id="cb3-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">initialHashedPassword</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$j9T$ZGDLrUl6VP4AiusK96/tx0$1Xb1z61RhXYR8lDlFmJkdS8zyzTnaHL6ArNQBBrEAm0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># may replace this with a proper secret management scheme later</span></span>
<span id="cb3-61">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openssh</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">authorizedKeys</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">keys</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDEQDNqf12xeaYzyBFrOM2R99ciY9i0fPMdb4J64XpU3Tjv7Z5WrYx+LSLCVolzKktTfaSgaIDN8+vswixtjaAXkGW2glvTD0IwaO0N4IQloov3cLZa84I7lkj5jIkZiXJ2zHJZ8bQmayUrSj2yBwYJ61QLs+R0hpEZHfRarBU9vphykACdM6wxSj0YVkFnGlKBxZOZipW6OoKjEkFOHOSH6DYrX3V/TqALYC62iH6jEiLIycxey1vfwkywfsP9V9GlGYHutdwgAgeaN3xUnL8+X6vkQ8cbC2jEuVopodsAAArFYZLVdfAcNc17WYq5y+FX3schGpTo89SZ4Uh9gd4b45h9Hq7h6p7hBF8UCkyqSKnFiPjDJxv5yuY+rYeZ9aJSeCJUYrb1xyOreWnJkhDuYff/1NCewWL8sfuD9IC9BXWBwhxoA/OUfV9KvDBZmYoThlh86ZCQ+uqCR1DIKa1YhPMlT6gzUY01yoMj+B93RpUBUW5LqLDVCL7Qujh/0ns= moonpie@cachyos-x8664"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-62">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-63">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">users</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">root</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">openssh</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">authorizedKeys</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">keys</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-64">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change this to your ssh key</span></span>
<span id="cb3-65">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCg+VqYIph1uiO243+jqdKkSOiw4hAyNWwVeIgzu7+KStY2Dji/Dzn1gu5LGj71jj/dW2Q8FpAC4WXWX5alqUJpK58HwN/d86BpnNPAxjDBOtYN2Znf3Y4108OKhEyaaKpiPSpADW5b/FW+Ki+ftMxRs9cUWuysTxoYDeX9BkTtpar5ChYaoMEkD//tUbqLx9wVFIQ4YdbVajgupUW3S2LRqCAgGBf0eTMYoZbNJHjSNlje7m9UJQOqvXJtiGdoYAqYQdHZfkCLKC1qBw6bl0ZHVkETTKr6tC89ZaZlKfZfGZqgCvyW0VzwYHwRmcOBndZgdOkEHQS/VIYmp91v1G58KMfuSBEKyUJoRVjo6lvbPHIsrGC1vNKLRiRYKGfo1lJ/qFIiq5NNfvmoYZMy+4A6jMohesTdA4yP7nwyz1o9jWmDIHeGJxZCfdYJyQ/IslesR3ACjUYAporCIk3U71f1qB7QOJAErF7+3Q6ZdOHNPPu7sURf2zMn/Q6mWktTxxU= moonpie@localhost.localdomain"</span></span>
<span id="cb3-66">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-67">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})</span></span>
<span id="cb3-68">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-70">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-71"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>disk-config.nix</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disks</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/sda"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disk</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-3">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">device</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">builtins</span>.elemAt disks <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disk"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">content</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">partitions</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ESP</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-10">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EF00"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100M"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">content</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-13">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filesystem"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-14">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vfat"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mountpoint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/boot/efi"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-16">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-17">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">root</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-19">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-20">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">content</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-21">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filesystem"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-22">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ext4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mountpoint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-24">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-25">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-26">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-28">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</details>
</section>
</section>
<section id="i-give-up-ansible" class="level1">
<h1>I give up, ansible</h1>
<p>I’ve gotten started on the ansible vps configs, and they are public on github: <a href="https://github.com/moonpiedumplings/ansible-vps-config" class="uri">https://github.com/moonpiedumplings/ansible-vps-config</a></p>
<p>Lately, for my job, I am currently to create a proxmox image using packer. I am starting with a debian image, and then using ansible to configure the image, using public proxmox repos. Although not really ready for public or production usage yet, my repo of this can be found <a href="https://github.com/moonpiedumplings/proxmox-maas/">here</a>.</p>
<p>Here I am going to begin documenting my initial research and documentation, before I shift to a seperate github repo, which I can apply CI/CD to.</p>
<p>Ansible is a configuration as code system written in python. It is distro agnostic, meaning it supports ubuntu.</p>
<p>Ansible appears to support <a href="https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.html">configuring docker-compose</a>, so it will be very easy to convert my server to that.</p>
<p>However, this and other modules I am looking at aren’t part of the preinstalled modules. To install them, you must use ansible-galaxy to install them, which isn’t part of older versions of ansible. Ansible 2.9 or later is required. I’m not too worried about getting the latest version of ansible, because I can get it either from pip/pipx or from nix.</p>
<p>To install a collection, like the docker/docker compose collections:</p>
<p><code>ansible-galaxy collection install community.docker</code></p>
<p>Can I automate this, like in github actions? I may need to, if I want to set up a CI/CD system for this.</p>
<p>This will provide docker to me.</p>
<section id="scaffolding-and-beginnings" class="level2">
<h2 class="anchored" data-anchor-id="scaffolding-and-beginnings">Scaffolding and Beginnings</h2>
<p>An example docker-compose, from the official ansible documentation:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Remove flask project</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.docker.docker_compose</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project_src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> flask</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> absent</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Start flask project with inline definition</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.docker.docker_compose</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Not default. Will pull images upon every rerun.</span></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # rebuilds if a change to the dockerfile contents are detected. If a rebuild, then will attempt to pull a newer version fo the image, but not otherwise</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always </span></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> present</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # default, but to be noted. </span></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        #Docker compose goes here. But can I have multiple projects?</span></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> flask</span></span>
<span id="cb5-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">definition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">db</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres</span></span>
<span id="cb5-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">web</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ playbook_dir }}/flask"</span></span>
<span id="cb5-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python manage.py runserver 0.0.0.0:8000"</span></span>
<span id="cb5-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ playbook_dir }}/flask:/code"</span></span>
<span id="cb5-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8000:8000"</span></span>
<span id="cb5-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">links</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> db</span></span></code></pre></div>
<p>Ansible also offers an image for managing direct parts of docker, like images.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Pull an image</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.docker.docker_image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pacur/centos-7</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pull</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # Select platform for pulling. If not specified, will pull whatever docker prefers.</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> amd64</span></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Build image and with build args</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.docker.docker_image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> myimage</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /path/to/build/dir</span></span>
<span id="cb6-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # key value args </span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_volume</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /var/log/myapp</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">listen_port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8080</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Dockerfile_name</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> build</span></span></code></pre></div>
<p>Ansible also seems to support <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/git_module.html">managing git repos</a>, which I can use to automate. I’ve decided to write an example using the features that I would utilize.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Git checkout</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.git</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://foosball.example.com'</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /home/moonpie</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> release-0.22</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # can be branch, tag, or sha1 hashshum of the repo.</span></span></code></pre></div>
<p>This will enable me to write docker-compose’s, Dockerfiles, or other things and put them in a git repo, which I can then clone and use later.</p>
<p>In addition to that, I also need a way to keep the system updated, for security purposes. Because I am using ubuntu, I will use the ansible apt module.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> update the system to latest distro packages</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update-cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # equivlaent of apt-get update</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upgrade</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> safe</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # conservative, safe upprade.full/dist upgrades all packages to latest, but I will have to research the difference between the two. </span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoclean</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # cleans not installed packages from the cache</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoremove</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # delete uneeded dependencies</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # deletes all packages from the cache</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb8-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> update the distribution itself? Still working on this one</span></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Hmmm, the format for apt repos is currently changing.</span></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> manage apt_repo</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> #since apt key is deprecated, this an an alternative around it.</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">block</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> somerepo |no apt key</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.get_url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://download.example.com/linux/ubuntu/gpg</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/apt/keyrings/somerepo.asc</span></span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> somerepo | apt source</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt_repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64 signed-by=/etc/apt/keyrings/myrepo.asc] https://download.example.com/linux/ubuntu {{ ansible_distribution_release }} stable"</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> present</span></span>
<span id="cb8-25"></span>
<span id="cb8-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> The newer deb822 format is better</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # however, this isn't used by my ubuntu install. </span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deb822_repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">types</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> deb</span></span>
<span id="cb8-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uris</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://download.example.com/linux/ubuntu</span></span>
<span id="cb8-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suites</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{ ansible_distribution_release }}'</span></span>
<span id="cb8-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">components</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> stable</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">architectures</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> amd64</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signed_by</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://download.example.com/linux/ubuntu/gpg</span></span>
<span id="cb8-35"></span>
<span id="cb8-36"></span>
<span id="cb8-37"></span>
<span id="cb8-38"></span>
<span id="cb8-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Reboot the system</span></span>
<span id="cb8-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reboot</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # However, when I tested this for my current project at my internship, it didn't work. The ssh did not reconnect. </span></span></code></pre></div>
</section>
<section id="ansible-inventory" class="level2">
<h2 class="anchored" data-anchor-id="ansible-inventory">Ansible Inventory</h2>
<p>Ansible has multiple ways to configure ssh keys. One way is to explicitly specify a ssh private key file in your inventory file:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">your_remote_host1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible_user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> your_username1</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible_password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> your_password1</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible_ssh_private_key_file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /path/to/your_private_key1</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">your_remote_host2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible_user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> your_username2</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # and so on</span></span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible_ssh_common_args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-o StrictHostKeyChecking=no'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Disables auto reject of unkown hosts.</span></span></code></pre></div>
<p>Another way is to specify the private key in your <code>~/.config/ssh/config</code> file.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">Host your_remote_host1</span>
<span id="cb10-2">  HostName your_remote_host1.example.com</span>
<span id="cb10-3">  User your_username</span>
<span id="cb10-4">  IdentityFile /path/to/your_private_key</span>
<span id="cb10-5"></span>
<span id="cb10-6">Host your_remote_host2</span>
<span id="cb10-7">  HostName your_remote_host2.example.com</span>
<span id="cb10-8">  User your_username</span>
<span id="cb10-9">  IdentityFile /path/to/another_private_key</span></code></pre></div>
<p>You can also specify the private key on the command line, with the –private-key=/path/to option.</p>
<p>I am searching for the most CI/CD friendly way to do this. Tbh, it may be lazy, but for a single machine, I may simply ssh into the machine, git clone the repo, and use ansible’s local mode, which runs an ansible playbook on the local machine.</p>
<p>Here is my current ansible inventory. Because I am only configuring one host, it is extremely simple.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>inventory.yml</strong></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">office</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span></code></pre></div>
</div>
<p>And here is my ssh config file, censored of course.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>~/.ssh/config</strong></pre>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Host office</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        HostName {server ip or hostname goes here}</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        port 22</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        user moonpie</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        IdentityFile /home/moonpie/.ssh/office-vps</span></span></code></pre></div>
</div>
<p>Now, I can test if my hosts are up with a simple ansible command.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">[nix-shell:~/vscode/ansible-vps-config]$ ansible all -i inventory.yml -m ping</span>
<span id="cb13-2">office | SUCCESS =&gt; {</span>
<span id="cb13-3">    "ansible_facts": {</span>
<span id="cb13-4">        "discovered_interpreter_python": "/usr/bin/python3"</span>
<span id="cb13-5">    },</span>
<span id="cb13-6">    "changed": false,</span>
<span id="cb13-7">    "ping": "pong"</span>
<span id="cb13-8">}</span></code></pre></div>
<p>The “ping: pong” part means that it discoverd my server, and it is ready for me to configure it if I so wish.</p>
</section>
<section id="dry-runs-and-testing" class="level2">
<h2 class="anchored" data-anchor-id="dry-runs-and-testing">Dry runs and Testing</h2>
<p>Now, after some tinkering with syntax, I’ve gotten ansible to do a dry run without complaining:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">[nix-shell:~/vscode/ansible-vps-config]$ ansible-playbook --check -i inventory.yml main.yml --ask-become-pass</span>
<span id="cb14-2">BECOME password: </span>
<span id="cb14-3"></span>
<span id="cb14-4">PLAY [all] *********************************************************************************************************</span>
<span id="cb14-5"></span>
<span id="cb14-6">TASK [Gathering Facts] *********************************************************************************************</span>
<span id="cb14-7">ok: [office]</span>
<span id="cb14-8"></span>
<span id="cb14-9">TASK [docker-compose : Meshcentral] ********************************************************************************</span>
<span id="cb14-10">included: /home/moonpie/vscode/ansible-vps-config/roles/docker-compose/tasks/compose-files/meshcentral.yml for office</span>
<span id="cb14-11"></span>
<span id="cb14-12">TASK [docker-compose : Meshcentral] ********************************************************************************</span>
<span id="cb14-13">ok: [office]</span>
<span id="cb14-14"></span>
<span id="cb14-15">TASK [docker-compose : npm] ****************************************************************************************</span>
<span id="cb14-16">included: /home/moonpie/vscode/ansible-vps-config/roles/docker-compose/tasks/compose-files/npm.yml for office</span>
<span id="cb14-17"></span>
<span id="cb14-18">TASK [docker-compose : npm] ****************************************************************************************</span>
<span id="cb14-19">changed: [office]</span>
<span id="cb14-20"></span>
<span id="cb14-21">TASK [sys-maintain : update the system to latest distro packages] **************************************************</span>
<span id="cb14-22">changed: [office]</span>
<span id="cb14-23"></span>
<span id="cb14-24">PLAY RECAP *********************************************************************************************************</span>
<span id="cb14-25">office                     : ok=6    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span></code></pre></div>
<p>The <code>--ask-become-pass</code> asks me for the sudo password on my server, in case my user doesn’t have permission to do passwordless sudo.</p>
<p>Since this is a dry run, it simply tells me what will be changed, but doesn’t actually change it. For some reason, it didn’t update one of the docker containers although it did update the other. I discoverd this was because I was missing something in my compose file.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> npm</span></span>
<span id="cb15-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.docker.docker_compose</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb15-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb15-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> npm</span></span>
<span id="cb15-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">definition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span></span>
<span id="cb15-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jc21/nginx-proxy-manager'</span></span>
<span id="cb15-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unless-stopped</span></span>
<span id="cb15-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'80:80'</span></span>
<span id="cb15-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'81:81'</span></span>
<span id="cb15-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'443:443'</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          # - '53:53'</span></span>
<span id="cb15-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb15-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /home/{{ ansible_user_id }}/npm/data:/data</span></span>
<span id="cb15-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /home/{{ ansible_user_id }}/npm/letsencrypt:/etc/letsencrypt</span></span>
<span id="cb15-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">external</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb15-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mine</span></span></code></pre></div>
<p>For the image portion, I needed <code>image: 'jc21/nginx-proxy-manager:latest'</code>. this will ensure that every time I rerun the ansible playbook, docker will attempt to update the container versions.</p>
<p>Now, I can run just the docker-compose part of my using a the tags feature.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">[nix-shell:~/vscode/ansible-vps-config]$ ansible-playbook --check -i inventory.yml main.yml --ask-become-pass --tags docker-compose</span>
<span id="cb16-2">BECOME password: </span>
<span id="cb16-3"></span>
<span id="cb16-4">PLAY [all] *********************************************************************************************************</span>
<span id="cb16-5"></span>
<span id="cb16-6">TASK [Gathering Facts] *********************************************************************************************</span>
<span id="cb16-7">ok: [office]</span>
<span id="cb16-8"></span>
<span id="cb16-9">TASK [docker-compose : Meshcentral] ********************************************************************************</span>
<span id="cb16-10">included: /home/moonpie/vscode/ansible-vps-config/roles/docker-compose/tasks/compose-files/meshcentral.yml for office</span>
<span id="cb16-11"></span>
<span id="cb16-12">TASK [docker-compose : Meshcentral] ********************************************************************************</span>
<span id="cb16-13">changed: [office]</span>
<span id="cb16-14"></span>
<span id="cb16-15">TASK [docker-compose : npm] ****************************************************************************************</span>
<span id="cb16-16">included: /home/moonpie/vscode/ansible-vps-config/roles/docker-compose/tasks/compose-files/npm.yml for office</span>
<span id="cb16-17"></span>
<span id="cb16-18">TASK [docker-compose : npm] ****************************************************************************************</span>
<span id="cb16-19">changed: [office]</span>
<span id="cb16-20"></span>
<span id="cb16-21">PLAY RECAP *********************************************************************************************************</span>
<span id="cb16-22">office                     : ok=5    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>nix</category>
  <category>linux</category>
  <category>ansible</category>
  <guid>https://moonpiedumplings.github.io/projects/nixos-vps/index.html</guid>
  <pubDate>Fri, 14 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>First job, an internship at cirrascale</title>
  <link>https://moonpiedumplings.github.io/blog/cirrascale-intern/index.html</link>
  <description><![CDATA[ 



<p>Cirrascale is a San Diego company that offers managed cloud computing, targeted at AI. Before my vacation, I took a tour of their hosting center. It honestly had me awestruck, seeing rack upon rack of water cooled servers.</p>
<p>2023-7-10</p>
<p>First day. It was pretty nice. My skills with managing linux, containers, and virtual machines came in handy. I took initiative and stepped up when a task was offered, which was tough because I was so new. My heart was literally racing and I felt so nervous, but I didn’t take on more than I could handle and I made good progress on it in that same day. In addition to that, I collaborated with the other interns on things. Overall, it was a lot of fun, and the people were very friendly.</p>
<p>2023-7-12</p>
<p>In the last two days I feel like I have done a lot, despite being so new. I helped another intern install Ubuntu linux, and I am now working on another project, creating a proxmox image with packer to deploy using maas.</p>
<p>2023-8-1</p>
<p>Since then, I have completed created an image, although I haven’t tested yet. In addition to that, I got to post all my code on github:</p>
<p><a href="https://github.com/moonpiedumplings/proxmox-maas" class="uri">https://github.com/moonpiedumplings/proxmox-maas</a></p>
<p>2023-8-26</p>
<p>Alright, my original intention was for this to be a regular or semi regular type blog thing, but that was very boring, as most days were simply spent grinding away at whatever problems I was working on.</p>
<p>So I’m just going to put an overview and reflection here, after I have done the internship.</p>
<p>I worked on two major projects, which ate up the majority of my time.</p>
<p>The first was <a href="https://github.com/moonpiedumplings/proxmox-maas">proxmox-maas</a>. Maas is an automated deployment method created by canonical, and it allows you to deploy configured ubuntu servers to virtual machines, or usually more valuably, bare metal machines. In Cirrascale, they were using Maas to deploy Ubuntu, and using MAAS to configure things like networking on these machines. MAAS can deploy other operating systems, but you have to create an image which it can deploy. I created a proxmox image, so that they could deploy it to bare metal machines rapidly.</p>
<p>The other project I created was assisting in planning a setup where they use rancher to deploy kubernetes. I started out with my notes on onedrive, but eventually I got annoyed and put them on <a href="https://moonpiedumplings.github.io/rancher-ops/">github sites</a>. I created a simple docker-compose file to allow people to quickly up rancher for testing purposes, and I noted it on that page. In addition to that, I also documented installing k3s clusters with calico rather than rancher, installing vcluster, installing kata-containers, and other kubernetes management operations.</p>
<p>Overall, it was a great learning experience. I had an abstract understanding of what production environments required, but it was cool to work with those in production environments.</p>



 ]]></description>
  <category>linux</category>
  <guid>https://moonpiedumplings.github.io/blog/cirrascale-intern/index.html</guid>
  <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Increasing my security</title>
  <link>https://moonpiedumplings.github.io/blog/more-security/index.html</link>
  <description><![CDATA[ 



<p>Previously, I’ve been very lax with security. But as I go into the world, and will be leaving my devices unattended, and as what is on my computers becomes more valuable than game site logins, I now need to put actual effort into securing my devices.</p>
<section id="the-laptops" class="level1">
<h1>The laptops</h1>
<p>In a <a href="../switch-to-opensuse">previous blogpost</a>, I detailed how I set up my laptop with secure boot and disk encryption.</p>
<p>The perfomance impact from disk encyrption is very minimal. This means that if I lose my laptop, then other people won’t get access to my data.</p>
<p>Secure boot protects against <a href="https://en.wikipedia.org/wiki/Evil_maid_attack">evil maid attacks</a>. For example, someone could physical access to my machine to replace the kernel with a malicious one, but they can’t with secure boot enabled since it only allows for booting of a validated kernel.</p>
<p>And finally, I set a bios password. This prevents people from disabling secure boot.</p>
</section>
<section id="the-usbs." class="level1">
<h1>The USB’s.</h1>
<p>Previously, I just carried my USB’s, and my hard drive arround, with all the data on them unencrypted. That won’t do, because if I lose a USB, it means that people can look at the saved logins, or even get access to my logged in session</p>
<p>I first attempted to use the transparent encryption feature of the <a href="https://en.wikipedia.org/wiki/F2FS">f2fs filesystem</a>. Transparent encryption makes it so that you can use the filesystem normally, but data is encrypted on the drive. However, opensuse seems to have lacking f2fs support, so this didn’t work.</p>
<p>I then attempted to use <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS</a> to encrypt a spare USB I had, so I could move data over. However, for some reason, the LUKS USB wouldn’t mount. I experimented with LUKS encryption in other places, but trying to encrypt something in place resulted in data loss, so I ended up giving up.</p>
<p>In addition to this, I began to experience the frustrations with trying to encrypt every single thing on a device. So I decided to only encrypt sensitive data.</p>
<p>I decided to use the <a href="https://github.com/rfjakob/gocryptfs">gocryptfs</a> tool to create encrypted folders on USB’s and hard drive’s. It stores the config file in the directory to be encrypted, enabling portability to any device that has gocrypt.</p>
<p>In addition to this, it might be possible to use access the USB’s, encrypted folder and all, by either using gocryptfs via <a href="https://github.com/termux/termux-app">termux</a>, an app to give you a linux terminal on android, or via <a href="https://github.com/hardcore-sushi/DroidFS">DroidFS</a>. However, I haven’t tested them, and these tools may not be able to access the USB devices.</p>
<section id="cleaning" class="level2">
<h2 class="anchored" data-anchor-id="cleaning">Cleaning</h2>
<p>I needed to clean the data off of the USB’s. However due to USB’s unique method of data storage, simply deleting the data isn’t enough. I decided to overwrite the data once for a more secure erase. However, it wasn’t practical to overwrite whole files, so I have to find the sensitive data, so that I can delete it. This is much faster than overwriting everything.</p>
<p><code>find . -type f -regex '.*mozilla.*\.\(json\|db\|sqlite\)$'</code></p>
<p>This uses a regex to find anything ending in .json, .db, or .sqlite, that is also has a parent or grandfather directory with the name mozilla in it.</p>
<p><code>find . -type f -regex ''.*mozilla.*\.\(json\|db\|sqlite\)$' -exec &lt;securedeletecommand&gt; {} \;</code></p>
<p>With this, I can run my secure delete command on my USB’s. I think I am going to use <a href="https://srm.sourceforge.net/">srm</a> a command line tool that is compatible with the <code>rm</code> file remover standard util.</p>
<p><code>srm -rfsv</code> is the command I will use.</p>
<p><code>find . -type f -regex '.*mozilla.*\.\(json\|db\|sqlite\)$' -exec srm -rfsv {} \;</code></p>
<p>And this will clean my external storage quite nicely, while not touching other databases or json files that don’t have sensitive data.</p>
</section>
</section>
<section id="yubikeys" class="level1">
<h1>Yubikey’s</h1>
<p>My father had a few spare <a href="https://en.wikipedia.org/wiki/YubiKey">yubikey</a>’s he could lend to me. Yubikey’s are a hardware authentication device, used for things like two factor authentication (2FA). Many services, like my college, support this as an alternative method of 2FA. Because I didn’t have them set up yet, I was forced to install yet another app for 2FA on my phone. I don’t have these things set up, but I will soon. I probably won’t use the Yubikey as a method of unlocking encrypted drives, as it is somewhat redudant.</p>
<section id="virtual-fido-device" class="level2">
<h2 class="anchored" data-anchor-id="virtual-fido-device">Virtual FIDO Device</h2>
<p>I may also consider a virtual Fido2 device, to emulate a yubikey, if I don’t really want to keep them plugged in. Here are a few projects I found:</p>
<p><a href="https://github.com/bulwarkid/virtual-fido" class="uri">https://github.com/bulwarkid/virtual-fido</a></p>
<p><a href="https://github.com/psanford/tpm-fido" class="uri">https://github.com/psanford/tpm-fido</a></p>
<p><a href="https://github.com/danstiner/rust-u2f" class="uri">https://github.com/danstiner/rust-u2f</a></p>


</section>
</section>

 ]]></description>
  <category>cybersecurity</category>
  <guid>https://moonpiedumplings.github.io/blog/more-security/index.html</guid>
  <pubDate>Wed, 05 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Git</title>
  <link>https://moonpiedumplings.github.io/guides/git/index.html</link>
  <description><![CDATA[ 



<p>Still writing</p>
<section id="what-is-git" class="level1">
<h1>What is git?</h1>
<p>Git is a version control system. At it’s core, it is simply a tool to make management of codebases, or the files and folders that make up code, easier.</p>
<p>A long time ago, before verson control systems, when people manipulated codebases by copying around folders. When another person wanted to merge their changes into the code that someone else was working on, they had to copy and paste it in.</p>
<p>Obviously, this sucked. Now, we have version control, and git is the most popular one, used by the most popular code forge site, github.</p>
</section>
<section id="how-to-use-git" class="level1">
<h1>How to use git</h1>
<section id="get-your-code-git-clone" class="level2">
<h2 class="anchored" data-anchor-id="get-your-code-git-clone">Get your code: git clone</h2>
<p>The most basic, starting command.</p>
<p><code>git clone repositoryurl</code></p>
<p>Git has it’s own protocol, but https works as well, and it’s easier to use.</p>
<p>Because of this, you can use the url of the website that hosts the code as your code url.</p>
<p><code>git clone https://github.com/moonpiedumpling/moonpiedumpling.github.io/</code></p>
<p>↑ That’s the url of the repository for this website.</p>
</section>
<section id="save-code-to-git" class="level2">
<h2 class="anchored" data-anchor-id="save-code-to-git">Save code to git</h2>
<p>Code stored in a git repo exists in four states: unsaved changes, unstaged changes, staged changes, and committed changes, gone through in that order.</p>
<p>First, you open up a file and edit some code. Then you save your changes to the file. However, <em>git</em> doesn’t save your changes. The changes become unstaged changes, meaning git doesn’t even see them.</p>
<p>To stage changes:</p>
<p><code>git add file/folder</code></p>
<p>So to stage everything in the repository: <code>git add .</code></p>
<p>Now, git sees your changes, but it still hasn’t saved them. They are staged changes, meaning that git can see them in order to commit them.</p>
<p><code>git commit -m "message here"</code> commits your changes with a commit message, which makes keeping track of what you did easier, especially when you need to revert changes.</p>
<p>You can commit everything in one go using <code>git commit -am</code>, which is more convinient if you don’t need to stage changes.</p>
<p><code>git status</code> shows staged and unstaged changes.</p>
</section>
<section id="interact-with-a-remote-repository" class="level2">
<h2 class="anchored" data-anchor-id="interact-with-a-remote-repository">Interact with a remote repository</h2>
<p>To upload your changes to a remote repository: <code>git push</code></p>
<p>Pretty simple. Although you can push to a specific repo.</p>
<p><code>git push remoterepourl</code></p>
<p>And to bring changes from a remote repo down: <code>git pull</code></p>
</section>
<section id="viewing-and-undoing-changes" class="level2">
<h2 class="anchored" data-anchor-id="viewing-and-undoing-changes">Viewing and undoing changes</h2>
<p>If you make a small change, you can just copy and paste stuff around to undo it. But if you are working on a large app, and a massive feature you intended to add didn’t work out, trying to just delete the code won’t really work out.</p>
<p>That’s where git comes in.</p>
<section id="to-view" class="level3">
<h3 class="anchored" data-anchor-id="to-view">To view</h3>
<p><code>git log</code> shows the changes. <code>q</code> quits, and <code>/</code> searches. When searching, <code>n</code> to go to the next found string, and <code>N</code> (capital N) to go to the previous. It uses vim keybindings. Each change is noted by their SHA1 hash.</p>
<p>But this kind of sucks, so I recommend using a graphical interface to view changes. This is one function of “git forges”, websites like <a href="https://github.com/">github</a>, where they give you a graphical interface to view changes. However, there are locally installed applications with similar features, like gitg.</p>
</section>
<section id="to-revert-to-a-change" class="level3">
<h3 class="anchored" data-anchor-id="to-revert-to-a-change">To revert to a change</h3>
<p><code>git revert HEAD</code> creates a new commit that undoes the previous commit.</p>
<p><code>git revert &lt;SHA1 HASH&gt;</code> creates a new commit that reverts all the way back to the commit designated by the SHA1 hash of a commit.</p>
<p><code>git reset SHA1</code> has a similar feature, except it simply moves backwards in commits. If you make new commits, this results in a nonlinear search commit history. You’ll create a tree, or an octopus. Some people don’t like this, because it can be a bit of a pain to manage.</p>
</section>
</section>
</section>
<section id="how-to-actually-use-git" class="level1">
<h1>How to <em>actually</em> use git</h1>
<p>Yeah, saving and undoing things isn’t anything special. Your average word processor has these features. Carefully managed backups allow you to undo to any state you want. There are probably a thousand or more ways to send folders of whatever over the network.</p>
<section id="branches" class="level2">
<h2 class="anchored" data-anchor-id="branches">Branches</h2>
<p>Branches are one of the killer features of version control. Basically, each branch is it’s own copy of the codebase, which can be worked on without affecting other branches.</p>
<p><code>git checkout -b &lt;branch name&gt;</code> creates a new branch.</p>
<p><code>git checkout &lt;branch name&gt;</code> switches to a branch.</p>
<p>Then, commit away. Switching to another branch and only the changes applied to that branch are present.</p>
<p>In the wild, branches are commonly used to manage versioning. An older version, but still maintained version of a program will be kept in another branch, so people can still work on it.</p>
<p><code>git checkout</code> manipulates the repository state. To manipulate branches, you must use <code>git branch</code>:</p>
<p><code>git branch -d &lt;branch name&gt;</code> deletes a branch.</p>


</section>
</section>

 ]]></description>
  <category>git</category>
  <guid>https://moonpiedumplings.github.io/guides/git/index.html</guid>
  <pubDate>Wed, 28 Jun 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
