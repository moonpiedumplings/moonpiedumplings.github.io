---
title: "Automating my server config, first nix, then ansible"
description: ""
date: "2023-7-14"
categories: [nix, linux, ansible]
execute:
  freeze: false
---

# What I want to do:

I want to automate my install with nixos

## Nixos

I possess a small (5 GB of ram, 3 cores) virtual private server (vps), which I use for some things, such as meshcentral. However, for maintainence purposes, I want to change it to nixos. I already started on a nixos config, which can be found on github: [nixos-configs](https://github.com/moonpiedumplings/nixos-configs).

Anyway, the config is fairly simple, and a copy of my current vps config, but as code. 

## Deployment attempts

However, I now want to deploy this. I am currently using [webdock.io](https://webdock.io) as my VPS provider, which doesn't officially support nixos. So I want to convert an existing ubuntu install in place to a nixos installation, without physical access to the machine. 

I have tried multiple tools and they have not worked, but I am now trying [nixos-anywhere](https://github.com/numtide/nixos-anywhere) for this. 

Here is my config as of 7/14/2023

<details><summary>Show .nix file</summary>

<details><summary>flake.nix</summary>

```{.nix filename="flake.nix"}
{
  inputs.nixpkgs.url = github:NixOS/nixpkgs;
  inputs.disko.url = github:nix-community/disko;
  inputs.disko.inputs.nixpkgs.follows = "nixpkgs";

  outputs = { self, nixpkgs, disko, ... }@attrs: {
    nixosConfigurations.hetzner-cloud = nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      specialArgs = attrs;
      modules = [
        ({modulesPath, ... }: {
          imports = [
            (modulesPath + "/installer/scan/not-detected.nix")
            #(modulesPath + "/profiles/qemu-guest.nix") #not a qemu vm
            # try to fit the lxd-vm config in here
            #https://github.com/mrkuz/nixos/blob/c468d9772b7a84ab8e38cc4047bc83a3a443d18f/modules/nixos/virtualization/lxd-vm.nix#L4
            disko.nixosModules.disko
          ];
          disko.devices = import ./disk-config.nix {
            lib = nixpkgs.lib;
          };
          boot.loader.efi.efiSysMountPoint = "/boot/efi";
          boot.loader.grub = {
            devices = [ "nodev" ];
            efiSupport = true;
            #efiInstallAsRemovable = true;
          };
          networking = {
            usePredictableInterfaceNames = false;
            interfaces = {
              eth0 = {
                useDHCP = false;
                ipv4.addresses = [{ address = "93.92.112.130"; prefixLength = 24; }];
              };
            };
            defaultGateway = {
                interface = "eth0";
                address = "93.92.112.1";
            };
          };
          services = {
            openssh = {
                enable = true;
                settings = {
                    PasswordAuthentication = false;
                    #PermitRootLogin = "prohibit-password"; # this is the default
                };
                openFirewall = true;
            };
            cockpit = {
                enable = true;
                openFirewall = true;
            };
          };

          users.users.moonpie = {
            isNormalUser = true;
            extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
            #packages = with pkgs; [];
            initialHashedPassword = "$y$j9T$ZGDLrUl6VP4AiusK96/tx0$1Xb1z61RhXYR8lDlFmJkdS8zyzTnaHL6ArNQBBrEAm0"; # may replace this with a proper secret management scheme later
            openssh.authorizedKeys.keys = [ "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDEQDNqf12xeaYzyBFrOM2R99ciY9i0fPMdb4J64XpU3Tjv7Z5WrYx+LSLCVolzKktTfaSgaIDN8+vswixtjaAXkGW2glvTD0IwaO0N4IQloov3cLZa84I7lkj5jIkZiXJ2zHJZ8bQmayUrSj2yBwYJ61QLs+R0hpEZHfRarBU9vphykACdM6wxSj0YVkFnGlKBxZOZipW6OoKjEkFOHOSH6DYrX3V/TqALYC62iH6jEiLIycxey1vfwkywfsP9V9GlGYHutdwgAgeaN3xUnL8+X6vkQ8cbC2jEuVopodsAAArFYZLVdfAcNc17WYq5y+FX3schGpTo89SZ4Uh9gd4b45h9Hq7h6p7hBF8UCkyqSKnFiPjDJxv5yuY+rYeZ9aJSeCJUYrb1xyOreWnJkhDuYff/1NCewWL8sfuD9IC9BXWBwhxoA/OUfV9KvDBZmYoThlh86ZCQ+uqCR1DIKa1YhPMlT6gzUY01yoMj+B93RpUBUW5LqLDVCL7Qujh/0ns= moonpie@cachyos-x8664" ];
          };
          users.users.root.openssh.authorizedKeys.keys = [
            # change this to your ssh key
            "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCg+VqYIph1uiO243+jqdKkSOiw4hAyNWwVeIgzu7+KStY2Dji/Dzn1gu5LGj71jj/dW2Q8FpAC4WXWX5alqUJpK58HwN/d86BpnNPAxjDBOtYN2Znf3Y4108OKhEyaaKpiPSpADW5b/FW+Ki+ftMxRs9cUWuysTxoYDeX9BkTtpar5ChYaoMEkD//tUbqLx9wVFIQ4YdbVajgupUW3S2LRqCAgGBf0eTMYoZbNJHjSNlje7m9UJQOqvXJtiGdoYAqYQdHZfkCLKC1qBw6bl0ZHVkETTKr6tC89ZaZlKfZfGZqgCvyW0VzwYHwRmcOBndZgdOkEHQS/VIYmp91v1G58KMfuSBEKyUJoRVjo6lvbPHIsrGC1vNKLRiRYKGfo1lJ/qFIiq5NNfvmoYZMy+4A6jMohesTdA4yP7nwyz1o9jWmDIHeGJxZCfdYJyQ/IslesR3ACjUYAporCIk3U71f1qB7QOJAErF7+3Q6ZdOHNPPu7sURf2zMn/Q6mWktTxxU= moonpie@localhost.localdomain"
          ];
        })
      ];
    };
  };
}
```

</details>

<details><summary>disk-config.nix</summary>

```{.nix filename="disk-config.nix"}
{ disks ? [ "/dev/sda" ], ... }: {
    disk = {
      sda = {
        device = builtins.elemAt disks 0;
        type = "disk";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              type = "EF00";
              size = "100M";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot/efi";
              };
            };
            root = {
              size = "100%";
              content = {
                type = "filesystem";
                format = "ext4";
                mountpoint = "/";
              };
            };
          };
        };
      };
    };
}
```

</details>

</details>

In the direcotry where this is, I run the nixos-anywhere command:

`nix run github:numtide/nixos-anywhere -- --flake .#hetzner-cloud moonpie@ip -i nixos-vps`

My ssh identity file is named `nixos-vps`. 

But this config doesn't work. Although my effort to set up the grub bootloader seemed to have prevailed, and the terminal output said it had succeeded, I cannot access the device. I think it is an issue with network connection. 


For those who may be attempting to help me, or look at my work, here is a copy of the files I am working with, updated live on every push to the github repo for this blog. 

<details><summary>Show files</summary>

```{python}
#| output: asis
#| echo: false

backticks = "`" * 3
print(f'''

{backticks}{{.nix filename="flake.nix"}}
{open('files/flake.nix', 'r').read()}
{backticks}

{backticks}{{.nix filename="disk-config.nix"}}
{open('files/disk-config.nix','r').read()}
{backticks}

''')
```

</details>


## I give up, ansible


Lately, for my job, I am currently to create a proxmox image using packer. I am starting with a debian image, and then using ansible to configure the image, using public proxmox repos. Although not really ready for public or production usage yet, my repo of this can be found [here](https://github.com/moonpiedumplings/proxmox-maas/). 

Here I am going to begin documenting my initial research and documentation, before I shift to a seperate github repo, which I can apply CI/CD to. 


Ansible appears to support [configuring docker-compose](https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.html), so it will be very easy to convert my server to that. 

An example docker-compose, from the official ansible documentation:

```{yaml}
tasks:
    - name: Remove flask project
      community.docker.docker_compose:
        project_src: flask
        state: absent

    - name: Start flask project with inline definition
      community.docker.docker_compose:
        project_name: flask
        definition:
            db:
              image: postgres
            web:
              build: "{{ playbook_dir }}/flask"
              command: "python manage.py runserver 0.0.0.0:8000"
              volumes:
                - "{{ playbook_dir }}/flask:/code"
              ports:
                - "8000:8000"
              links:
                - db
      register: output

```

Below is the main.yml, ansible file I am currently working with, updated every git push.

```{python}
#| output: asis
#| echo: false

backticks = "`" * 3
print(f'''

{backticks}{{.yaml filename="main.yml"}}
{open('ansible-files/main.yml', 'r').read()}
{backticks}

''')
```


