---
title: "Packaging Openstack on Nixos"
description: ""
date: "2023-6-11"
categories: [nix, hci]
execute:
  freeze: auto
---

## What is hyperconverged infrastrucuture?

[Hyperconverged infrastrucucture](https://en.wikipedia.org/wiki/Hyper-converged_infrastructure), is when multiple aspects of computing can all be managed from the same platform. This is usually done with virtualization, like virtualized servers, or virtualized storage. 

[Promox Virtual Environment](https://en.wikipedia.org/wiki/Proxmox_Virtual_Environment) is one of the most popular examples of this for homelabbers, or people who manage their own servers for personal use. It offers a web based interface to configure virtual machines, virtualized storage, and clustering. When researching what software to use to manage my server, I considered proxmox. 

Proxmox is based on debian linux, and is very tightly integrated into that ecosystem. It is nearly impossible to run proxmox on any other linux distro, and I disliked this inflexibility.

[Openstack](https://en.wikipedia.org/wiki/OpenStack) is an open source, public and private cloud solution, containing hyperconverged infrastructure, and more. It's used when people don't want to rely on external cloud solutions, like Amazon Web Services (AWS). For example, a university may decide that it is cheaper to manage and maintain their own cloud than to rely on AWS.

Openstack is massive, consisting of multiple components that must be installed and configured independently of eachother, yet set up to work with eachother. Becuase of this, openstack is usually deployed as configuration as code. The two most popular solutions, from my research, openstack-ansible, and kolla-ansible, work by deploying containerized, preconfigured installs of openstack, that connect to the bare metal portions of the system through standardized API's like libvirt, which are easy to configure on the base system using ansible. On the other hand, because openstack is much more complex, it is easy to simply make a preconfigured container image, and distribute it out for people to use. 

## What is Nixos?

Nixos is an operating system that uses  the nix package manager to install packages, but also the nix language for configuration. Because of this, it is a form of configuration as code. 

For example, I used nix's ability to create a shell environment to create a [shell environment with quarto on linux](../quarto-via-nix/) 

I asked, and searched around, looking for if there was a Nixos way to set up something like proxmox or openstack.

I first asked, but then I realized that I could search github for the nix programming language, and keywords I desired. I did so, and I found [someone's lxdware configurations](https://github.com/BSpwr/nixos-configuration/blob/main/bastion/services/lxdware.nix)

<details><summary>Show someone else's configs for lxdware on nixos</summary>

```{.nix .code-overflow-wrap}
{ config, pkgs, lib, ... }: {
  systemd.services.docker-create-network-lxdware = {
    enable = true;
    description = "Create lxdware docker network";
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = "yes";
      ExecStart = pkgs.writeScript "docker-create-network-lxdware" ''
        #! ${pkgs.runtimeShell} -e
        ${pkgs.docker}/bin/docker network create lxdware || true
      '';
    };
    after = [ "network-online.target" ];
    wantedBy = [ "multi-user.target" ];
  };

  virtualisation.oci-containers.containers."lxdware" = {
    autoStart = true;
    image = "docker.io/lxdware/dashboard:latest";
    volumes = [ "/services/lxdware/lxdware:/var/lxdware" ];
    dependsOn = [ "create-network-lxdware" ];
    extraOptions = [
      # networks
      "--network=lxdware"
      # labels
      "--label"
      "traefik.enable=true"
      "--label"
      "traefik.docker.network=lxdware"
      "--label"
      "traefik.http.routers.lxdware.rule=Host(`lxd.local.bspwr.com`)"
      "--label"
      "traefik.http.routers.lxdware.entrypoints=websecure"
      "--label"
      "traefik.http.routers.lxdware.tls=true"
      "--label"
      "traefik.http.routers.lxdware.tls.certresolver=letsencrypt"
      "--label"
      "traefik.http.routers.lxdware.service=lxdware"
      "--label"
      "traefik.http.routers.lxdware.middlewares=local-allowlist@file, default@file"
      "--label"
      "traefik.http.services.lxdware.loadbalancer.server.port=80"
    ];
  };
}
```

</details>

Lxdware is a web based frontend for LXD, a type of hyperconverged infrastructure. LXD is a daemon, or background process, for managing containers (ran via LXC), virtual machines, and to an extent, virtualized storage. It appealed to me, when I was searching for a hyperconverged infrastructure solution for my home lab.

![](https://lxdware.com/wp-content/uploads/2021/03/screenshot_instances-1024x542.png)

It's feature rich, and mature. However, I dislike the particular implementation used in the above configuration. They ran lxdware, in a docker container. This works, and probably works well, but this isn't a very nixos way of doing things. Nix offers reproducibility, so docker isn't needed, and is generally frowned upon because it brings some disadvantages. I wanted to configure lxdware using nix myself.

I later looked at openstack, because I wanted to see if there was an ideal way to configure this with nixos. Nix makes it so easy to configure so many other services, just a few lines of nix code in the `configuration.nix` file to set up webservers, or other services.

In fact, people even discussed this in a thread posted on the [Nixos discourse forums](https://discourse.nixos.org/t/deploying-nixos-openstack-cloud/21066)


> Is there anyone actively working on being able to run an OpenStack cloud using NixOS?
> Shouldn’t “we” be able to do what the Kayobe project does but without the Ansible stuff?
https://docs.openstack.org/kayobe/latest/configuration/reference/kolla-ansible.html 9


One person replied, saying that they had done a bit, but work had "rotten since". And indeed, when I searched around github, I found an old project, in a [github repo titled nixstack](https://github.com/hyphon81/Nixtack/tree/master/openstack)

This person, or group of people, had packaged openstack to be easy to enable. But as I read through the code, I realized that the app is from the era of python2, so this code is really old. 

## It begins

So I decided to package it myself. At least, that's my goal. It seems to be a massive project, but one user already did it, when I asked around on the discord.

![](images/someonelse.png)

They claimed they will open source it soon-ish, but right now, none of their work is public. 

So I decided to do it myself. I have the old templates as my guides, and I know it is possible because someone else has done it. 

After going through the code for nixstack, I experienced a pleasant suprise — openstack is purely a python application, and this means that it can be packages by nix's python packaging ecosystem.

Because openstack is purely a python application, all the dependencies are declared in the requirements.txt, located in the root of the git repo of each openstack component. 

Nixpkgs very large, but I don't know if they have all of the python packages. Luckily, I found a newer project, [pip2nix](https://github.com/nix-community/pip2nix), which seems to have been first created at around the same time the openstack on nix projects stopped development.  

I should be able to convert a requirements.txt into something nix can install natively, directly from the pypi repos, without having to worry about packages not being packages in nixpkgs. 


So I started by cloning the openstack keystone repository from github: [https://github.com/openstack/keystone](https://github.com/openstack/keystone)


I install and setup pip2nix and attempt to use it. It first complains about python36 being too old, but after I switch to the python39 version of pip2nix:

```{.default .code-overflow-wrap}
[nix-shell:~/vscode/keystone]$ pip2nix generate .
Processing /home/moonpie/vscode/keystone
... # lots of extraneous output
```

pip2nix generate seems to take the same inputs as pip, so to install a python package from the current working directory, you could usually do `pip install .`, but here I do a `pip2nix generate .` instead. This generates a python-packages.nix file with all the python packages, including openstack keystone. 


I played around with trying to install openstack keystone in a `nix-shell` environment.


```{.nix .code-overflow-wrap}
{
        pkgs ? import <nixpkgs> {}
} : 
with import ./python-packages.nix {inherit pkgs;};
let
        keystone-nix = callPackage keystone;
in
pkgs.mkShell {
        packages = [ keystone-nix ];
}

```
<details><summary>Show error</summary>

```{.default .code-overflow-wrap}
moonpie@localhost:~/vscode/keystone> nix-shell
error:
       … while calling the 'derivationStrict' builtin

         at /builtin/derivation.nix:9:12: (source not available)

       … while evaluating derivation 'nix-shell'
         whose name attribute is located at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/pkgs/stdenv/generic/make-derivation.nix:303:7

       … while evaluating attribute 'nativeBuildInputs' of derivation 'nix-shell'

         at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/pkgs/stdenv/generic/make-derivation.nix:347:7:

          346|       depsBuildBuild              = lib.elemAt (lib.elemAt dependencies 0) 0;
          347|       nativeBuildInputs           = lib.elemAt (lib.elemAt dependencies 0) 1;
             |       ^
          348|       depsBuildTarget             = lib.elemAt (lib.elemAt dependencies 0) 2;

       error: function 'anonymous lambda' called without required argument 'fetchurl'

       at /home/moonpie/vscode/keystone/python-packages.nix:4:1:

            3|
            4| { pkgs, fetchurl, fetchgit, fetchhg }:
             | ^
            5|
```

</details>

I remember getting a similar error when I was trying to package quarto, and I was told to use callPackage. I don't think I am using callPackage correctly here.

I tried tinkering with some [code that I got from searching github](https://github.com/srghma/lingualeo2anki/blob/master/default.nix)

```{.nix .code-overflow-wrap}
{
	pkgs ? import <nixpkgs> {}
} : 
with pkgs;
let
  python = python3;
  pythonPackages = python.pkgs;

  # generated with `pip2nix generate -r requirements.txt`
  generatePipPackages = import ./python-packages.nix {
    inherit pkgs;
    inherit (pkgs) fetchurl fetchgit fetchhg;
  };

  pipPackages =  generatePipPackages pipPackages pythonPackages;
in
pkgs.mkShell {
	packages = with pipPackages; [ keystone ];
}
```

But this errors:

<details><summary>Show error</summary>

```{.default .code-overflow-wrap}
moonpie@localhost:~/vscode/keystone> nix-shell
error:
       … while calling the 'derivationStrict' builtin

         at /builtin/derivation.nix:9:12: (source not available)

       … while evaluating derivation 'nix-shell'
         whose name attribute is located at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/pkgs/stdenv/generic/make-derivation.nix:303:7

       … while evaluating attribute 'nativeBuildInputs' of derivation 'nix-shell'

         at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/pkgs/stdenv/generic/make-derivation.nix:347:7:

          346|       depsBuildBuild              = lib.elemAt (lib.elemAt dependencies 0) 0;
          347|       nativeBuildInputs           = lib.elemAt (lib.elemAt dependencies 0) 1;
             |       ^
          348|       depsBuildTarget             = lib.elemAt (lib.elemAt dependencies 0) 2;

       (stack trace truncated; use '--show-trace' to show the full trace)

       error: attribute 'setuptools' missing

       at /home/moonpie/vscode/keystone/python-packages.nix:106:7:

          105|     propagatedBuildInputs = [
          106|       self."setuptools"
             |       ^
          107|       self."six"
```
</details>

I don't really know why this errors. 


So I did some more research, and looked at the [pip2nix docs](https://pip2nix.readthedocs.io/en/latest/getting_started.html#using-pip2nix-in-a-project) (which I was suprised they had because nix isn't the best documented). According to that, you can use `pip2nix scaffold --package projectName` to generate a `default.nix` which `nix-shell` will read and convert into a shell environment for you. 

So I did that. And I got the same error as above. I then did some searching on github for a similar issue, and found [one issue](https://github.com/nix-community/pip2nix/issues/83) where a replier said that the user had to add Cython to the requirements.txt, otherwise pip2nix would not add it to the package set. So I tried adding setuptools to the end of the requirements.txt, and pip2nix pretty much just ignored it, and didn't add it to the generated `python-packages.nix` file. Why? 

So I decied to add it to the generated `python-packages.nix` file manually, and I got an error, but that was probably because I had added `setuptools = pkgs.python310Packages.setuptools` when python39 was the version in use. This is because I didn't realize nix packaged python39, I thought they only had 310/311, however, upon later trying to regenerate packages, I now get a completely different error. 

<details><summary>Show error</summary>

```{.default .code-overflow-wrap}
moonpie@localhost:~/vscode/keystone> nix-shell
error:
       … in the left operand of the update (//) operator

         at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/lib/fixed-points.nix:69:64:

           68|   #
           69|   extends = f: rattrs: self: let super = rattrs self; in super // f self super;
             |                                                                ^
           70|

       … in the left operand of the update (//) operator

         at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/lib/fixed-points.nix:69:64:

           68|   #
           69|   extends = f: rattrs: self: let super = rattrs self; in super // f self super;
             |                                                                ^
           70|

       (stack trace truncated; use '--show-trace' to show the full trace)

       error: function 'anonymous lambda' called with unexpected argument 'self'

       at /nix/store/q300rswsxpr2kkng9azzsbfi9m8fdg50-nixpkgs/nixpkgs/pkgs/development/interpreters/python/passthrufun.nix:37:6:

           36|     # - applies overrides from `packageOverrides` and `pythonPackagesOverlays`.
           37|     ({ pkgs, stdenv, python, overrides }: let
             |      ^
           38|       pythonPackagesFun = import ./python-packages-base.nix {
```

</details>

I literally changed nothing. Except for adding setuptools to the start of the requirements.txt, but I still got a differing error than the one I got yesterday. 


I recloned the keystone repo (reverting back to the default requirements.txt file), and regenerated the nix files using pip2nix, however I still get the same error. Weird.

So later I did research into.


