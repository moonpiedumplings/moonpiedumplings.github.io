---
title: "Packaging Openstack on Nixos"
description: ""
date: "2023-6-11"
categories: [nix, hci]
execute:
  freeze: auto
---

## What is hyperconverged infrastrucuture?

[Hyperconverged infrastrucucture](https://en.wikipedia.org/wiki/Hyper-converged_infrastructure), is when multiple aspects of computing can all be managed from the same platform. This is usually done with virtualization, like virtualized servers, or virtualized storage. 

[Promox Virtual Environment](https://en.wikipedia.org/wiki/Proxmox_Virtual_Environment) is one of the most popular examples of this for homelabbers, or people who manage their own servers for personal use. It offers a web based interface to configure virtual machines, virtualized storage, and clustering. When researching what software to use to manage my server, I considered proxmox. 

Proxmox is based on debian linux, and is very tightly integrated into that ecosystem. It is nearly impossible to run proxmox on any other linux distro, and I disliked this inflexibility.

[Openstack](https://en.wikipedia.org/wiki/OpenStack) is an open source, public and private cloud solution, containing hyperconverged infrastructure, and more. It's used when people don't want to rely on external cloud solutions, like Amazon Web Services (AWS). For example, a university may decide that it is cheaper to manage and maintain their own cloud than to rely on AWS.

Openstack is massive, consisting of multiple components that must be installed and configured independently of eachother, yet set up to work with eachother. Becuase of this, openstack is usually deployed as configuration as code. The two most popular solutions, from my research, openstack-ansible, and kolla-ansible, work by deploying containerized, preconfigured installs of openstack, that connect to the bare metal portions of the system through standardized API's like libvirt, which are easy to configure on the base system using ansible. On the other hand, because openstack is much more complex, it is easy to simply make a preconfigured container image, and distribute it out for people to use. 

## What is Nixos?

Nixos is an operating system that uses  the nix package manager to install packages, but also the nix language for configuration. Because of this, it is a form of configuration as code. 

For example, I used nix's ability to create a shell environment to create a [shell environment with quarto on linux](../quarto-via-nix/) 

I asked, and searched around, looking for if there was a Nixos way to set up something like proxmox or openstack.

I first asked, but then I realized that I could search github for the nix programming language, and keywords I desired. I did so, and I found [someone's lxdware configurations](https://github.com/BSpwr/nixos-configuration/blob/main/bastion/services/lxdware.nix)

<details><summary>Show someone else's configs for lxdware on nixos</summary>

```{.nix .code-overflow-wrap}
{ config, pkgs, lib, ... }: {
  systemd.services.docker-create-network-lxdware = {
    enable = true;
    description = "Create lxdware docker network";
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = "yes";
      ExecStart = pkgs.writeScript "docker-create-network-lxdware" ''
        #! ${pkgs.runtimeShell} -e
        ${pkgs.docker}/bin/docker network create lxdware || true
      '';
    };
    after = [ "network-online.target" ];
    wantedBy = [ "multi-user.target" ];
  };

  virtualisation.oci-containers.containers."lxdware" = {
    autoStart = true;
    image = "docker.io/lxdware/dashboard:latest";
    volumes = [ "/services/lxdware/lxdware:/var/lxdware" ];
    dependsOn = [ "create-network-lxdware" ];
    extraOptions = [
      # networks
      "--network=lxdware"
      # labels
      "--label"
      "traefik.enable=true"
      "--label"
      "traefik.docker.network=lxdware"
      "--label"
      "traefik.http.routers.lxdware.rule=Host(`lxd.local.bspwr.com`)"
      "--label"
      "traefik.http.routers.lxdware.entrypoints=websecure"
      "--label"
      "traefik.http.routers.lxdware.tls=true"
      "--label"
      "traefik.http.routers.lxdware.tls.certresolver=letsencrypt"
      "--label"
      "traefik.http.routers.lxdware.service=lxdware"
      "--label"
      "traefik.http.routers.lxdware.middlewares=local-allowlist@file, default@file"
      "--label"
      "traefik.http.services.lxdware.loadbalancer.server.port=80"
    ];
  };
}
```

</details>

Lxdware is a web based frontend for LXD, a type of hyperconverged infrastructure. LXD is a daemon, or background process, for managing containers, virtual machines, and to an extent, virtualized storage. It appealed to me, when I was searching for a hyperconverged infrastrucure.