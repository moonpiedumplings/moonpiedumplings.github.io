---
title: "Linux Containerization Technology"
author: "Jeffrey Fonseca"
categories: [playground]
format: 
    revealjs:
        incremental: false
        theme: dark
        #center: true
execute:
  freeze: true
---

## What are containers?

::: {.scrollable style="font-size: 80%;"}
-   The operating system is made up of many building blocks, almost always placed unevenly
-   Container *runtimes* are a commmon platform that can be built off of
:::

::: notes
-   Given a lego car, can you build a house on top of it?
-   What if you put a platform on that lego car?
:::

::: center
![](https://static.packt-cdn.com/products/9781838646554/graphics/assets/9a7b4405-e9e4-431b-b068-0883d1189150.png){width=70% height=70% style="object-fit: cover;"}
:::

## History

-   OpenVZ: Built custom kernel to make containers
-   Did not update this custom kernel (2.6 is their stable, 3.10 is dev).
    -   Current Kernel is 6.5+

![](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.serveradminz.com%2Fblog%2Fwp-content%2Fuploads%2F2015%2F01%2Fopenvz_logo-1024x1022.jpg&f=1&nofb=1&ipt=18375d503a632a63ab2e71e78527cf8628f33ac8556c79f65197802705e707b0&ipo=images)

## Benefits and Downsides

-   Containers use less memory, because
    -   share the host kernel
    -   only contain what is necessary to use an application
    -   Identical parts of containers (layers) are shared in memory, saving more memory
-   Not as secure as virtual machines
    -   Container escape CVE's are rare but fatal
    -   Very easy to configure, but misconfigurations can be fatal
    -   CTF will be a container escape one (with no CVEs)

## LXC and modern containers

-   Many groups needed containers in mainline, so they contributed
    -   namespaces, cgroups (Google), seccomp, virtual filesystems, etc
-   Eventually, LXC was the first iteration of modern container software (IBM)
    -   Docker was based of off lxc, but eventually switched to their own runtime

## OS vs Application Type

* OS
    -   Designed to simulate a linux system
    -   Often used for virtual private servers
    -   E.G: LXC, Openvz
* Application
    -   Designed for ease of development and distribution of apps/services
    -   OCI based runners, like docker, podman, kubernetes, nomad

## OCI Standard

-   Not to be confused with Oracle Cloud
-   Open Container Initiative
    - Linux Foundation Project, by Docker, CoreOS, and others 
    - Standardized Format for application container images
-   Make distributing services very, very easy

## Most Popular: Docker and Kubernetes

-   Docker runs OCI images
    -   Docker Hub: Massive repository of images for every type of application
-   Kubernetes: Clustering software
    -   Can run OCI images across multiple machines at once

## Docker

-   Simple
-   One daemon that runs as root, that autostarts, and handles containers as services
-   Docker socket (/var/run/docker.sock), which can be served over the network, or mounted inside a container or vm (it's also a file)

## Docker (cont.)
*   Downside: Runs as root:
    -   Having access to the docker socket means you are effectively root
    -   Escaping a container as root means you are root on the host
* "One process, one container"

## Kubernetes

-   A.K.A "k8s"
-   Extremely powerful
-   Massively complex, many moving parts

![](images/kubearch.png)

## Kubernetes (cont.)

-   Different Distributions of Kubernetes

![](https://storage.googleapis.com/cdn.thenewstack.io/media/2017/11/5aa59276-kube-02.png)


## Others Container Orchetstrators

-   Docker Swarm Mode
    -   Literally docker, but across multiple machines
-   Hashicorp Nomad
    -   Integrates with many other Hashi products
    -   supports other, unorthox runtimes (e.g: qemu)

## Runtimes

::: {.scrollable style="font-size: 80%;"}

High level:

* Docker Engine (deprecated, docker now uses containerd + runc)
* Containerd
* Cri-o

Low Level

* runc
* crun (default of podman)
* Kata (virtual machine)
* NVIDIA

:::


## High Performance Computing (HPC)

-   Science needs reproducibility
    -   Simulations ran using programs need to be ran using the same code
-   Slurm, runs any *jobs* across a cluster, but is not reproducible
    -   By using slurm to run singularity/apptainer (OCI runtimes), you get more reproducibility in science
-   Kubernetes is used for machine learning
    -   NVIDIA provides OCI images with drivers for GPU's baked in

## Cloud
-   AWS, GCP, Oracle, etc offer containers as a service
-   Also offer managed kubernetes

![](images/cloud_types.jpg){.absolute width=70% height=70% left=0 right=0 style="margin: auto auto;"}


## When NOT to use containers
* Multi-langauge projects, e.g: replit
* Unprivileged environments (no unshare?)
* Multi-OS support (OCI runners use a virtual machine on non-linux)
* Security: Do not mistake containers with security


## CTF

- I will pass out virtual machines
- CTF IP: http://172.16.24.27
- On the virtual machine: http://vm-ip:3000
- Flags are in roots home directory
- Double container escape