---
title: "Can I include text from other files in quarto?"
description: ""
date: "2023-6-11"
categories: [playground]
execute:
  freeze: false
---

Just playing around with embeding quarto again.

```{.html .code-overflow-wrap}
<embed src="data/test.txt">
```

<embed src="data/test.txt">


```{.html .code-overflow-wrap}
<object type="text/plain" data="file.txt"></object>
```

<object type="text/plain" data="data/test.txt"></object>

Doesn't look quite right.

```{.default filename="quarto include function"}

{{< include data/test.txt >}}

```


{{< include data/test.txt >}}


This works. But how can I get formatted text? I would like to include code from files outside the main file, for ease of editing and modularity.


```{.html .code-overflow-wrap}
<script src=" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js "></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js"></script>

<link href=" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css " rel="stylesheet">

<pre><code class="language-python">import numpy as np</code></pre>
```


```{=html}
<script src=" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js "></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js"></script>

<link href=" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css " rel="stylesheet">

<pre><code class="language-python">import numpy as np</code></pre>
```

Bit weird, but it works. Now how can I include external content from external files with this?

```{=html}
<script src=" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js "></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js"></script>

<link href=" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css " rel="stylesheet">

<pre><code class="language-python" data="data/python.txt"></code></pre>
```

```{.nix filename="data/test.txt"}
```

Since quarto can run python, and you can force the output of that to render to markdown with a few options:



```{.python}
#| output: asis
#| echo: true

backtick = "`"
a = ""
with open('data/python.py', 'r') as f:
    file_contents = f.read()
    a = file_contents

print(f'''

{backtick * 3}{{.python filename="data/python.py"}}
{a}
{backtick * 3}
''')
```

Of course, the proper quarto syntax is:

```{{python}}
#| options here
# python code here
```



```{python}
#| output: asis
#| echo: false

backtick = "`"
a = ""
with open('data/python.py', 'r') as f:
    file_contents = f.read()
    a = file_contents

print(f'''

{backtick * 3}{{.python filename="data/python.py"}}
{a}
{backtick * 3}
''')
```

It works! Perhaps an awkward way of doing this, but it works. I can probably even get code from remote repos, since it's all python. There are other ways to do this, but I didn't want to do have to rely on any extensions or external dependencies. 



