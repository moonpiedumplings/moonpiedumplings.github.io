{
  "hash": "b921af9d8f54b94b5f6e55c9bc56f584",
  "result": {
    "markdown": "---\ntitle: \"I installed opensuse on my laptop\"\ndescription: \"Temporary, or permanent?\"\ndate: \"2023-6-11\"\ncategories: [nix, linux]\nexecute:\n  freeze: auto\n---\n\nSchool had just ended. During the school year, I had been using a hybrid graphics (dual-gpu) laptop, that otherwise worked normally, but had horrible, terrible battery life. I had struggled to get 2 hours out of it, because the dedicated nvidia gpu would not get turned off properly. \n\nSo I decided to switch to my second laptop, which has been unused so far. But it has pure intel graphics, and the laptop has much better linux support, and consequently, a much better battery life. \n\nBefore setting it up, I had a few requiremnts.\n\nSecurity. Previously, I didn't care about this, because I carried my laptop around with me at all times, but now I was going to be leaving my laptop unattended, maybe for extended periods of time. That meant I needed full disk encryption, and secure/trusted boot. However, I had limited time to set this up, so I neede to find a distro that did this the easiest way possible. I eventually settled on opensuse, which had  an option to set up secure boot and encryption in the installer, under guided partitioning. After some hiccups, it installed just fine.\n\n\nAnd the other, is my tools and packages. I didn't worry too much about this, because I had decided beforehand on using nix and [home-manager](https://github.com/nix-community/home-manager) to install packages not available in the repositories. Home manager is a tool that allows for declarative configuration of a user environmetn, including packages, configuration files, or environment variables, using the nix programming language. Notably, it can be useed on almost all linux distros. \n\nHere is my current home.nix, as of writing this, the file home-manager takes as an input.\n\n\n<details><summary>Show</summary>\n\n```{.nix filename=\"home.nix\"}\n{\n  pkgs ? import <nixpkgs> {},\n  config,\n  lib,\n  ... \n}:\nlet\n  nixgl = import <nixgl> {};\n  nixGlWrapper = import ./nixglwrapper.nix {inherit nixgl pkgs lib config;};\nin\nwith import ./quarto.nix {inherit pkgs config lib;};\nwith import ./nixglwrapper.nix {inherit pkgs config lib nixgl;};\n{\n  # Home Manager needs a bit of information about you and the paths it should\n  # manage.\n  home.username = \"moonpie\";\n  home.homeDirectory = \"/home/moonpie\";\n  targets.genericLinux.enable = true;\n\n  nixpkgs.config.allowUnfree = true;\n  nix.settings.experimental-features = [\"nix-command\" \"flakes\"];\n\n  # This value determines the Home Manager release that your configuration is\n  # compatible with. This helps avoid breakage when a new Home Manager release\n  # introduces backwards incompatible changes.\n  #\n  # You should not change this value, even if you update Home Manager. If you do\n  # want to update the value, then make sure to first check the Home Manager\n  # release notes.\n  nix.package = pkgs.nix;\n  home.stateVersion = \"23.11\"; # Please read the comment before changing.\n\n  # The home.packages option allows you to install Nix packages into your\n  # environment.\n  #fonts.fontconfig.enable = true;\n  xdg.mime.enable = true;\n  home.packages = [\n    #nixgl\n    nixgl.nixGLIntel\n    nixgl.nixVulkanIntel\n\n    (nixGLWrap pkgs.vscode)\n    (nixGLWrap pkgs.microsoft-edge)\n    (nixGLWrap pkgs.firefox)\n\n\n    pkgs.micro\n    pkgs.calibre\n    pkgs.languagetool\n    pkgs.git\n    pkgs.soundwireserver\n\n    quarto\n    pkgs.jupyter\n    pkgs.python3\n\n    pkgs.yt-dlp\n\n\n    pkgs.macchanger\n    pkgs.nmap\n    pkgs.wireshark\n\n    pkgs.gocryptfs\n    # # Adds the 'hello' command to your environment. It prints a friendly\n    # # \"Hello, world!\" when run.\n    # pkgs.hello\n\n    # # It is sometimes useful to fine-tune packages, for example, by applying\n    # # overrides. You can do that directly here, just don't forget the\n    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of\n    # # fonts?\n    # (pkgs.nerdfonts.override { fonts = [ \"FantasqueSansMono\" ]; })\n\n    # # You can also create simple shell scripts directly inside your\n    # # configuration. For example, this adds a command 'my-hello' to your\n    # # environment:\n    # (pkgs.writeShellScriptBin \"my-hello\" ''\n    #   echo \"Hello, ${config.home.username}!\"\n    # '')\n  ];\n\n  # Home Manager is pretty good at managing dotfiles. The primary way to manage\n  # plain files is through 'home.file'.\n  home.file = {};\n  home.sessionVariables = {\n    # EDITOR = \"emacs\";\n  };\n\n  # Let Home Manager install and manage itself.\n  programs = {\n  \thome-manager.enable = true;\n  \tbash.enable = true;\n  \tgh.enable = true;\n  };\n}\n```\n\n</details>\n\nOf course, the home.nix file isn't all there is too it. There are also some imports, which take info from files that aren't home.nix.\n\nI have two imports, as of right now. \n\nUsing nix to run applications on non-nixos distros mostly works, but has some quirks. One quirk is that hardware accelerated graphics (opengl, vulkan) is lacking. In order to get around this, I use a program called nixgl. However, nixgl is essentially a wrapper, and it works by calling hte program you want to run as a command line argument. Someone automated that in nix, and I integrated that into my code. \n\n<details><summary>Show</summary>\n\n```{.nix filename=\"nixglwrapper.nix\"}\n{ config, pkgs, lib, nixgl } :\n{\nnixGLWrap = pkg: pkgs.runCommand \"${pkg.name}-nixgl-wrapper\" {} ''\n    mkdir $out\n    ln -s ${pkg}/* $out\n    rm $out/bin\n    mkdir $out/bin\n    for bin in ${pkg}/bin/*; do\n     wrapped_bin=$out/bin/$(basename $bin)\n     echo \"exec ${lib.getExe nixgl.nixGLIntel} $bin \\\"\\$@\\\"\" > $wrapped_bin\n     chmod +x $wrapped_bin\n    done\n  '';\n  nixVulkanWrap = pkg: pkgs.runCommand \"${pkg.name}-nixgl-wrapper\" {} ''\n    mkdir $out\n    ln -s ${pkg}/* $out\n    rm $out/bin\n    mkdir $out/bin\n    for bin in ${pkg}/bin/*; do\n     wrapped_bin=$out/bin/$(basename $bin)\n     echo \"exec ${lib.getExe nixgl.nixVulkanIntel} $bin \\\"\\$@\\\"\" > $wrapped_bin\n     chmod +x $wrapped_bin\n    done\n  '';\n}\n```\n\n</details>\n\nAnd of course, finally my custom quarto package that I had made in [another post](../../projects/quarto-via-nix/)\n\n\n<details><summary>Show</summary>\n\n```{.nix filename=\"quarto.nix\"}\n{ pkgs, config, lib, ... } :\n\nlet \n    pandoc = null;\n    extraRPackages = [];\n    extraPythonPackages = ps: with ps; [];\nin\n {\n    quarto = (pkgs.quarto.overrideAttrs (oldAttrs: rec {\n        version = \"1.3.361\";\n        src = pkgs.fetchurl {\n            url = \"https://github.com/quarto-dev/quarto-cli/releases/download/v${version}/quarto-${version}-linux-amd64.tar.gz\";\n            sha256 = \"sha256-vvnrIUhjsBXkJJ6VFsotRxkuccYOGQstIlSNWIY5nuE=\";\n        };\n        buildInputs = with pkgs; [ ];\n        preFixup = ''\n            wrapProgram $out/bin/quarto \\\n            --prefix PATH : ${pkgs.lib.makeBinPath [ pkgs.deno ]} \\\n            --prefix QUARTO_PANDOC : $out/bin/tools/pandoc \\\n            --prefix QUARTO_ESBUILD : ${pkgs.esbuild}/bin/esbuild \\\n            --prefix QUARTO_DART_SASS : $out/bin/tools/dart-sass/sass \\\n            --prefix QUARTO_R : ${pkgs.rWrapper.override { packages = [ pkgs.rPackages.rmarkdown ] ++ extraRPackages; }}/bin/R \\\n            --prefix QUARTO_PYTHON : ${pkgs.python3}/bin/python3\n        '';\n        installPhase = ''\n            runHook preInstall\n\n            mkdir -p $out/bin $out/share\n\n            mv bin/* $out/bin\n            mv share/* $out/share\n            '';\n    })).override {inherit pandoc extraPythonPackages extraRPackages;};\n}\n```\n\n</details>\n\nHowever, in order for running some programs with sudo to work, I had to edit opensuse's default sudo configuration to keep environment variables, and not change the default path. This is an understandable thing to do on a multi user system, but on my single user system where I want to use some packages installed via nix with sudo, it is just annoying. \n\n\n```{.default .code-overflow-wrap filename=\"/etc/sudoers\"}\n...\n##\n## Defaults specification\n##\n## Prevent environment variables from influencing programs in an\n## unexpected or harmful way (CVE-2005-2959, CVE-2005-4158, CVE-2006-0151)\n#Defaults always_set_home\n## Use this PATH instead of the user's to find commands.\n#Defaults secure_path=\"/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:/usr/local/sbin\"\nDefaults !env_reset\n## Change env_reset to !env_reset in previous line to keep all environment variables\n....\n```\n\nI've now uploaded my home.nix to a github repo: [https://github.com/moonpiedumplings/home-manager](https://github.com/moonpiedumplings/home-manager)\n\nHere is the home.nix that is currently in the `main` branch of my github repo (this is dynamically rendered and updated every update of this blog)\n\n\n\n```{.nix .code-overflow-wrap filename=home.nix}\n{\n  pkgs ? import <nixpkgs> {},\n  config,\n  lib,\n  ... \n}:\nlet\n  nixgl = import <nixgl> {};\nin\nwith import ./quarto.nix {inherit pkgs config lib;};\nwith import ./nixglwrapper.nix {inherit pkgs config lib nixgl;};\n{\n  # Home Manager needs a bit of information about you and the paths it should\n  # manage.\n  home.username = \"moonpie\";\n  home.homeDirectory = \"/home/moonpie\";\n  targets.genericLinux.enable = true;\n\n  nixpkgs.config.allowUnfree = true;\n  nix = {\n    settings = {\n    experimental-features = [\"nix-command\" \"flakes\"];\n    };\n  };\n\n  # This value determines the Home Manager release that your configuration is\n  # compatible with. This helps avoid breakage when a new Home Manager release\n  # introduces backwards incompatible changes.\n  #\n  # You should not change this value, even if you update Home Manager. If you do\n  # want to update the value, then make sure to first check the Home Manager\n  # release notes.\n  nix.package = pkgs.nix;\n  home.stateVersion = \"23.11\"; # Please read the comment before changing.\n\n  # The home.packages option allows you to install Nix packages into your\n  # environment.\n  #fonts.fontconfig.enable = true;\n  xdg.mime.enable = true;\n  home.packages = [\n    #nixgl\n    nixgl.nixGLIntel\n    nixgl.nixVulkanIntel\n\n    #nixgl wrapped stuff\n    (nixGLWrap pkgs.vscode)\n    (nixGLWrap pkgs.microsoft-edge)\n    #(nixGLWrap pkgs.firefox-bin)\n\n\n    #general tools and utilities\n    pkgs.micro\n    pkgs.calibre\n    pkgs.languagetool\n    pkgs.htop\n\n    #git tools\n    pkgs.git\n    pkgs.bfg-repo-cleaner\n    pkgs.git-filter-repo\n\n    #share sound with android devices.\n    pkgs.soundwireserver\n\n    # development enviroment stuff\n    quarto # see the imports above.\n    (pkgs.python311.withPackages(ps: with ps; [ jupyter]))\n    pkgs.poetry\n\n    # general cli tools\n    pkgs.yt-dlp\n\n    #hacking\n    pkgs.macchanger\n    pkgs.nmap\n    pkgs.wireshark\n    pkgs.metasploit\n\n    #creativity\n    pkgs.manuskript\n\n    # storage and encryption\n    pkgs.rclone\n    pkgs.gocryptfs\n    # # It is sometimes useful to fine-tune packages, for example, by applying\n    # # overrides. You can do that directly here, just don't forget the\n    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of\n    # # fonts?\n    # (pkgs.nerdfonts.override { fonts = [ \"FantasqueSansMono\" ]; })\n\n    # # You can also create simple shell scripts directly inside your\n    # # configuration. For example, this adds a command 'my-hello' to your\n    # # environment:\n    # (pkgs.writeShellScriptBin \"my-hello\" ''\n    #   echo \"Hello, ${config.home.username}!\"\n    # '')\n  ];\n\n  # Home Manager is pretty good at managing dotfiles. The primary way to manage\n  # plain files is through 'home.file'.\n  home.file = {};\n  home.sessionVariables = {\n    # EDITOR = \"emacs\";\n  };\n\n  # Let Home Manager install and manage itself.\n  programs = {\n  \thome-manager.enable = true;\n  \tbash.enable = true;\n  \tgh.enable = true;\n  };\n}\n\n```\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}