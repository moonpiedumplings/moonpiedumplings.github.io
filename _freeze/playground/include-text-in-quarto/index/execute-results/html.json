{
  "hash": "cfbcb0f22db6198298da652150c8d2c6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Can I include text from other files in quarto?\"\ndescription: \"\"\ndate: \"2023-6-11\"\ncategories: [quarto, html, _playground]\nexecute:\n  freeze: auto\n---\n\n\n\n\nJust playing around with embeding quarto again.\n\n```{.html .code-overflow-wrap}\n<embed src=\"data/test.txt\">\n```\n\n<embed src=\"data/test.txt\">\n\n\n```{.html .code-overflow-wrap}\n<object type=\"text/plain\" data=\"file.txt\"></object>\n```\n\n<object type=\"text/plain\" data=\"data/test.txt\"></object>\n\nDoesn't look quite right.\n\n```{.default filename=\"quarto include function\"}\n\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n\n\n```\n\n\n\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n\n\n\n\nThis works. But how can I get formatted text? I would like to include code from files outside the main file, for ease of editing and modularity.\n\n\n```{.html .code-overflow-wrap}\n<script src=\" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js \"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js\"></script>\n\n<link href=\" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css \" rel=\"stylesheet\">\n\n<pre><code class=\"language-python\">import numpy as np</code></pre>\n```\n\n\n\n\n\n```{=html}\n<script src=\" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js \"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js\"></script>\n\n<link href=\" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css \" rel=\"stylesheet\">\n\n<pre><code class=\"language-python\">import numpy as np</code></pre>\n```\n\n\n\n\nBit weird, but it works. Now how can I include external content from external files with this?\n\n\n\n\n```{=html}\n<script src=\" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js \"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js\"></script>\n\n<link href=\" https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css \" rel=\"stylesheet\">\n\n<pre><code class=\"language-python\" data=\"data/python.txt\"></code></pre>\n```\n\n\n\n\n```{.nix filename=\"data/test.txt\"}\n```\n\nSince quarto can run python, and you can force the output of that to render to markdown with a few options:\n\n\n\n```{.python}\n#| output: asis\n#| echo: true\n\nbacktick = \"`\"\na = \"\"\nwith open('data/python.py', 'r') as f:\n    file_contents = f.read()\n    a = file_contents\n\nprint(f'''\n\n{backtick * 3}{{.python filename=\"data/python.py\"}}\n{a}\n{backtick * 3}\n''')\n```\n\nOf course, the proper quarto syntax is:\n\n```{{python}}\n#| options here\n# python code here\n```\n\n\n\n```{.python filename=\"data/python.py\"}\n# A function to check if a number is prime\ndef is_prime(n):\n  # If n is less than 2, it is not prime\n  if n < 2:\n    return False\n  # Loop from 2 to the square root of n\n  for i in range(2, int(n**0.5) + 1):\n    # If n is divisible by i, it is not prime\n    if n % i == 0:\n      return False\n  # If no divisor is found, it is prime\n  return True\n\n# Test the function with some numbers\nprint(is_prime(2)) # True\nprint(is_prime(3)) # True\nprint(is_prime(4)) # False\nprint(is_prime(5)) # True\nprint(is_prime(6)) # False\n\n```\n\n\n\nIt works! Perhaps an awkward way of doing this, but it works. I can probably even get code from remote repos, since it's all python. There are other ways to do this, but I didn't want to do have to rely on any extensions or external dependencies. \n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}