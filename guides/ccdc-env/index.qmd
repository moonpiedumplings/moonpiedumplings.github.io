---
title: "CCDC Environment setup"
date: "2023-11-15"
categories: [linux]
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-block-background: true
execute:
  freeze: true
---

This will be the guide(s) on how to set up your environment for CCDC playing, and development. I hope to make videos, but right now I'm just taking notes.


# Windows

As long as you Windows 10 May 2020 Update (version 2004), you can install wsl with a single command. Otherwise, you have to follow some [painful steps](https://learn.microsoft.com/en-us/windows/wsl/install-manual)

In an elevated powershell window:

`wsl --install`

Reboot the system.

Then, launch wsl with `wsl` from powershell or cmd. 

It's going to ask you for some prompts. Because this is a development environment, focusing on speed rather than security, I recommend an easy to type username and password. 


Edit the sudoers file:

To edit the sudo file, you can use `sudo visudo` to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.

```{.default filename="/etc/sudoers"}
# Change the portion of the file referring to env_reset to look like this:
# Put an "!" in front of env_reset, and comment out the part referring to secure path

Defaults        !env_reset
Defaults        mail_badpass
#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" 



# Change the portion of the file that refers to the sudo group to look like this:

%sudo ALL=(ALL:ALL) NOPASSWD: ALL
```

Either reboot, or restart the wsl virtual machine.

To restart the WSL vm, from **powershell** or **cmd**:

Install docker and docker-compose (and curl and git, other tools we will need later):

`sudo apt update && sudo apt upgrade`

`sudo apt install docker.io docker-compose curl git ssh wget virt-manager`

You might have to reboot here, before the next step will work. Maybe.

`sudo usermod -aG docker $USER # Run docker without sudo`

`sudo usermdo -aG libvirt $USER # Run libvirt vms without sudo`

## Nix

Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Restart your shell. Simply close and reopen the debian terminal. 

Update the nix channels:

`nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`nix-channel --update`

Install the zellij terminal multiplexer:

`nix profile install nixpkgs#zellij`




## Chocolatey

[Install chocolatey here](https://chocolatey.org/install#individual)


Install several packages we need for development and playing (remove any packages you already have installed)

```{.default}
choco install -y firefox wezterm vscode virtualbox vmware-workstation-player vagrant-vmware-plugin
```


### Wezterm

Install wezterm from either chocolatey or the [official website](https://wezfurlong.org/wezterm/install/windows.html) (using the setup.)


On a vm, I get an error about the opengl version being incompatible when I attempt to launch wezterm. I have to launch it with `wezterm --config "prefer_egl=true".

To launch the ubuntu session, you can right click on the new tab, and then a menu will appear, from which you can select Ubuntu. 



## Virtualbox

Virtualbox and hyperv at the same time is a bit tricky, so you might have to follow [this stackoverflow answer](https://stackoverflow.com/a/69896662)  



## Linux

Linux has many distributions, so I will include vague steps that will work everywhere, rather than precise steps that only work on one distro, like the above Windows steps. 

Edit the sudoers file:

To edit the sudo file, you can use `sudo visudo` to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.

```{.default filename="/etc/sudoers"}
# Change the portion of the file referring to env_reset to look like this:
# Put an "!" in front of env_reset, and comment out the part referring to secure path

Defaults        !env_reset
Defaults        mail_badpass
#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" 
```

You can also set sudo to not require a password, if you so wish. However, this varies based on distributions. 

Install:

* Equivalent of base development packages for your distro. Usually a metapackage containing git, compilers like gcc, and build tools like make.
* ssh and related packages. (If sshfs and scp are packaged, get them as well)
* curl and wget
* Libvirt and virt-manager
* Docker


## Nix

Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Update the nix channels:

`nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`nix-channel --update`

Install zellij

`nix profile install nixpkgs#zellij`



# Macos

## Tools

There are several tools you need for development/playing. 

## Nix

Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Update the nix channels:

`sudo nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`sudo nix-channel --update`

Install zellij

`nix profile install nixpkgs#zellij`


# All Operating Systems

## Vscode

Install these vscode extensions, and their dependencies (should be pulled automatically):

* [Ansible](https://marketplace.visualstudio.com/items?itemName=redhat.ansible)
* [Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)
* [WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)

Personal preference, but I like to [disable acceptance of the autocomplete suggestion on enter](https://stackoverflow.com/a/74409136). This can be particularly annoying in languages like ansible or python, where you have to hit enter to go to the next line. 



# Playing and Developing

### Playing

`git clone https://github.com/CSUN-CCDC/CCDC-2023`

When in the root of this git repo, you can run `nix-shell` to get a full development environment. It includes tools like ansible, ansible checking, and vagrant. 

For the play environment, that is located in the root of utils/ directory. 


# Also to look into

This is just for the developers.

<https://github.com/nix-community/nix-direnv>

Direnv, as an alternative to multiplexing for the competition environments.


Libvirt on macos: <https://libvirt.org/macos.html>

Nested virtualization in wsl:

<https://www.paralint.com/2022/11/find-new-modified-and-unversioned-subversion-files-on-windows>

These are personal notes, for myself and anyone else who wants to work on this guide.

<https://docs.docker.com/desktop/wsl/>


<https://code.visualstudio.com/docs/remote/wsl>

I don't like, we don't need or want remote development

<https://code.visualstudio.com/docs/remote/wsl-tutorial>

<https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode>
