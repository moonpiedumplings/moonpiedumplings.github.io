---
title: "CCDC Environment setup"
date: "2023-11-15"
categories: [linux]
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-block-background: true
execute:
  freeze: true
---

This will be the guide(s) on how to set up your environment for CCDC playing, and development. I hope to make videos, but right now I'm just taking notes.




# Windows

## Play environment

As long as you Windows 10 May 2020 Update (version 2004), you can install wsl with a single command. Otherwise, you have to follow some [painful steps](https://learn.microsoft.com/en-us/windows/wsl/install-manual)

In an elevated powershell window:

`wsl --install`

Reboot the system.

Then, launch wsl with `wsl` from powershell or cmd. 

It's going to ask you for some prompts. Because this is a development environment, focusing on speed rather than security, I recommend an easy to type username and password. 


Edit the sudoers file:

To edit the sudo file, you can use `sudo visudo` to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.

```{.default filename="/etc/sudoers"}
# Change the portion of the file referring to env_reset to look like this:
# Put an "!" in front of env_reset, and comment out the part referring to secure path

Defaults        !env_reset
Defaults        mail_badpass
#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" 



# Change the portion of the file that refers to wheel to look like this:

%sudo ALL=(ALL:ALL) NOPASSWD: ALL
```

Either reboot, or restart the wsl virtual machine.

To restart the WSL vm, from **powershell** or **cmd**:


`wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg`

`echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list`


Install docker and docker-compose (and curl and git, other tools we will need later):

`sudo apt update && sudo apt upgrade`

`sudo apt install docker.io docker-compose curl git ssh wget virt-manager`

You might have to reboot here, before the next step will work. Maybe.

`sudo usermod -aG docker $USER # Run docker without sudo`

`sudo usermdo -aG libvirt $USER # Run libvirt vms without sudo`


Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Restart your shell. Simply close and reopen the debian terminal. 

Update the nix channels:

`nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`nix-channel --update`

Install the zellij terminal multiplexer:

`nix profile install nixpkgs#zellij`


## Outside WSL

## Chocolatey?

[Install chocolatey here](https://chocolatey.org/install#individual)


## Firefox

[Install firefox](https://www.mozilla.org/en-US/firefox/new/) 

### Wezterm

Install wezterm from either chocolatey or the [official website](https://wezfurlong.org/wezterm/install/windows.html) (using the setup.)


On a vm, I get an error about the opengl version being incompatible when I attempt to launch wezterm. I have to launch it with `wezterm --config "prefer_egl=true".

To launch the ubuntu session, you can right click on the new tab, and then a menu will appear, from which you can select Ubuntu. 

## Virtualbox

[Virtualbox website](https://www.virtualbox.org/wiki/Downloads)

You may need to install the [Microsoft Visual C++ Redistributable 2019](https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-20220) in order to install VirtualBox. 

Attempting to install [older builds](https://www.virtualbox.org/wiki/Download_Old_Builds_6_1)

Virtualbox and wsl at the same time is a bit tricky, so you have to follow [this stackoverflow answer](https://stackoverflow.com/a/69896662)  


Now install vscode, from the website: <https://code.visualstudio.com/download>

When you use the windows installer, ensure the "add to path" option is selected, it should be enabled by default. 



Install these vscode extensions, and their dependencies (should be pulled automatically):

* [Ansible](https://marketplace.visualstudio.com/items?itemName=redhat.ansible)
* [Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)
* [WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)



# Macos

Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Update the nix channels:

`sudo nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`sudo nix-channel --update`



# Playing and Developing

### Playing

`git clone https://github.com/CSUN-CCDC/CCDC-2023`

When in the root of this git repo, you can run `nix-shell` to get a full development environment. It includes tools like ansible, ansible checking, and vagrant. 

For the play environment, that is located in the root of utils/ directory. 




# Also to look into

This is just for the developers.

<https://github.com/nix-community/nix-direnv>

Direnv, as an alternative to multiplexing for the competition environments.


Libvirt on macos: <https://libvirt.org/macos.html>

Nested virtualization in wsl:

<https://www.paralint.com/2022/11/find-new-modified-and-unversioned-subversion-files-on-windows>

These are personal notes, for myself and anyone else who wants to work on this guide.

<https://docs.docker.com/desktop/wsl/>


<https://code.visualstudio.com/docs/remote/wsl>

I don't like, we don't need or want remote development

<https://code.visualstudio.com/docs/remote/wsl-tutorial>

<https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode>
