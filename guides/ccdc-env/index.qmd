---
title: "CCDC Environment setup"
date: "2023-11-15"
categories: [linux]
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-block-background: true
execute:
  freeze: true
---

This will be the guide(s) on how to set up your environment for CCDC playing, and development. I hope to make videos, but right now I'm just taking notes.


# Windows

## Playing

First, in Windows "Programs and features", enable WSL and the virtualization platform. It might be enabled already, if it isn't, reboot after enabling it.

![](https://code.visualstudio.com/assets/docs/remote/wsl-tutorial/windows-features.png)

From a powershell window:


`wsl --update`

You may need to reboot

`wsl --install debian`

It's going to ask you for some prompts. Because this is a development environment, focusing on speed rather than security, I recommend an easy to type username and password. 

Go back to the powershell, for some further configurations:

`wsl --set-version debian 2`

`wsl --set-default debian`


Now, while inside the debian, create the file `/etc/wsl.conf` with contents as so:

```{.ini filename="/etc/wsl.conf"}
[boot]
systemd=true

[wsl2]
nestedVirtualization=true
```

Edit the sudoers file:

To edit the sudo file, you can use `sudo visudo` to edit it safely. This command while check the sudoers file for errors, rather than instantly breaking sudo upon a misconfiguration.

```{.default filename="/etc/sudoers"}
# Change the portion of the file referring to env_reset to look like this:
# Put an "!" in front of env_reset, and comment out the part referring to secure path

Defaults        !env_reset
Defaults        mail_badpass
#Defaults       secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" 



# Change the portion of the file that refers to wheel to look like this:

%sudo ALL=(ALL:ALL) NOPASSWD: ALL
```

Either reboot, or restart the wsl virtual machine.

To restart the WSL vm, from **powershell** or **cmd**:

`wsl --shutdown debian`

And then relaunch the debian virtual machine. 


Install the necessary packages:

`wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg`

`echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list`


Update and upgrade: `sudo apt update && sudo apt upgrade`


Install docker and docker-compose (and curl and git, other tools we will need later):

`sudo apt install docker.io docker-compose vagrant curl git ssh wget`

You might have to reboot here, before the next step will work. Maybe.

`sudo usermod -aG docker $USER # Run docker without sudo`


Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Restart your shell. Simply close and reopen the debian terminal. 

Update the nix channels:

`nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`nix-channel --update`




## Development

Within windows: Install virtualbox. 


Virtualbox and wsl at the same time is a bit tricky, so you have to follow [this stackoverflow answer](https://stackoverflow.com/a/69896662)


Now install vscode, from the website: 



Install these vscode extensions, and their dependencies (should be pulled automatically):

* [Ansible](https://marketplace.visualstudio.com/items?itemName=redhat.ansible)
* [Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)
* [WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)



# Macos

Install nix (tool used to manage our development environments):

`curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install`

Update the nix channels:

`sudo nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs`

`sudo nix-channel --update`



# Playing and Developing

### Playing

`git clone https://github.com/CSUN-CCDC/CCDC-2023`

When in the root of this git repo, you can run `nix-shell` to get a full development environment. It includes tools like ansible linting, vagrant, as well. 




# Also to look into

Nested virtualization in wsl:

<https://www.paralint.com/2022/11/find-new-modified-and-unversioned-subversion-files-on-windows>

These are personal notes, for myself and anyone else who wants to work on this guide.

<https://docs.docker.com/desktop/wsl/>


<https://code.visualstudio.com/docs/remote/wsl>

I don't like, we don't need or want remote development

<https://code.visualstudio.com/docs/remote/wsl-tutorial>

<https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode>
