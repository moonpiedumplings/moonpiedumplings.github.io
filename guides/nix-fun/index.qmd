---
title: "Installing the nix package manager and several uses for it"
description: "I love this thing"
date: "2023-6-11"
categories: [nix, linux]
execute:
  freeze: auto
---


# Install nix package manager

On a macos or linux system, run thsi command in your terminal (from the [nix manual](https://nixos.org/manual/nix/stable/installation/installing-binary.html)) `curl -L https://nixos.org/nix/install | sh -s -- --daemon`

Now, nix is installed. You should be able to access the nix commands in your terminal. For example, the `nix-shell` command can be used to create a temporary shell environment with packages, environment variables, and more. For examples, see below.

## installing home manager

From the home manager github


# Using nix

## Connecting your github account to git from the terminal

First, make sure you have git installed, but you probably do already, if you are here.

Then: `nix-shell -p gh`. This installs the github cli tool.

`gh auth login # logs you into github`

`gh setup-git` And with this, git is configured to use the github cli as a credential helper

`git config --global credential.helper store` with this, git stores the credentials permanently.

Now, while still in the nix environment:

`git push` while in the local copy of a repo you have stored in github. 

Check the `/home/yourusername/.git-credentials` file to make sure your git credentials are stored.

And then you should be good to exit the nix environment. Because your credentials are saved, you can now run `git push` from the command line.

## Deleting sensitive detail, or large files from a git repo

Git tracks every change. So if you store something like an image, or a binary in a git repo, if you delete those files later, they will continue to eat space and be wasteful, even if you commit the deletions later on. To alter every past commit, you can use special tools, which are somewhat painful to install with methods other than nix. 



`nix-shell -p bfg-repo-c





